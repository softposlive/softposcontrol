package backuprestoredb;

import java.awt.Cursor;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import utilities.Directory_Files_Controller;
import utilities.MySQLConnect;

public class backUp_Db extends javax.swing.JDialog {

    DefaultListModel model = new DefaultListModel();
    DefaultListModel modelb = new DefaultListModel();
    SimpleDateFormat dateFmtShow = new SimpleDateFormat("dd-MM-yyyy", Locale.ENGLISH);

    public backUp_Db(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        pathFileUtility uti = new pathFileUtility();
        if (!uti.getPathFileConfig()) {
            dispose();
        } else {
            initComponents();
            ldb.setModel(model);
            lb.setModel(modelb);
            loadDatabaseName();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ldb = new javax.swing.JList();
        btn_toback = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lb = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        btn_start1 = new javax.swing.JButton();
        btn_exit = new javax.swing.JButton();
        btn_setting = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("สำรองฐานข้อมูล (Backup Databases)");
        setResizable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Norasi", 1, 14));
        jLabel1.setForeground(new java.awt.Color(2, 155, 66));
        jLabel1.setText("Databases");

        ldb.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        ldb.setFont(new java.awt.Font("Norasi", 1, 16));
        ldb.setForeground(new java.awt.Color(248, 80, 80));
        ldb.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ldb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ldbMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(ldb);

        btn_toback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow.gif"))); // NOI18N
        btn_toback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tobackActionPerformed(evt);
            }
        });

        btn_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow2.gif"))); // NOI18N
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        lb.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        lb.setFont(new java.awt.Font("Norasi", 1, 16));
        lb.setForeground(new java.awt.Color(2, 155, 66));
        lb.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lbMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(lb);

        jLabel2.setFont(new java.awt.Font("Norasi", 1, 14));
        jLabel2.setForeground(new java.awt.Color(2, 155, 66));
        jLabel2.setText("Backup Content");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_cancel)
                            .addComponent(btn_toback)))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(58, 58, 58))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(btn_toback, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jProgressBar1.setName(""); // NOI18N

        btn_start1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_start1.setForeground(new java.awt.Color(2, 155, 66));
        btn_start1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Database.gif"))); // NOI18N
        btn_start1.setText("Start BackUp");
        btn_start1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_start1ActionPerformed(evt);
            }
        });

        btn_exit.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        btn_exit.setForeground(new java.awt.Color(181, 2, 4));
        btn_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete_16.png"))); // NOI18N
        btn_exit.setText("Exit");
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        btn_setting.setFont(new java.awt.Font("Norasi", 1, 14));
        btn_setting.setForeground(new java.awt.Color(2, 155, 66));
        btn_setting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gear_16.png"))); // NOI18N
        btn_setting.setText("Setting");
        btn_setting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_settingActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(235, 233, 231));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setFont(new java.awt.Font("Norasi", 1, 30));
        jLabel6.setForeground(new java.awt.Color(2, 155, 66));
        jLabel6.setText("Backup Databases");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(578, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, 0, 858, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_setting, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(btn_start1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btn_setting, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_start1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-868)/2, (screenSize.height-591)/2, 868, 591);
    }// </editor-fold>//GEN-END:initComponents

private void btn_tobackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tobackActionPerformed

    try {
        String dbName = (String) ldb.getSelectedValue();
        int lbsize = modelb.getSize();
        boolean back = true;
        for (int i = 0; i < lbsize; i++) {
            String check = (String) modelb.getElementAt(i);
            if (dbName.equals(check)) {
                JOptionPane.showMessageDialog(this, "ฐานข้อมูลนี้ถูกเลือกไว้แล้ว ไม่สามารถเลือกได้อีก", "Backup databases warning !", JOptionPane.WARNING_MESSAGE);
                back = false;
                break;
            }
        }
        if (back) {
            if (!dbName.equals(null)) {
                if (!dbName.trim().equals("")) {
                    modelb.addElement(dbName);
                }
            }
        }
    } catch (Exception e) {
    }

}//GEN-LAST:event_btn_tobackActionPerformed

private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
    int rowSelect = lb.getSelectedIndex();
    if (rowSelect > -1) {
        modelb.remove(rowSelect);
    }
}//GEN-LAST:event_btn_cancelActionPerformed

private void btn_start1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_start1ActionPerformed
    Thread t = new Thread() {

        public void run() {
            getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            btn_start1.setEnabled(false);
            btn_toback.setEnabled(false);
            btn_cancel.setEnabled(false);
            btn_exit.setEnabled(false);
            ldb.setEnabled(false);
            lb.setEnabled(false);
            btn_setting.setEnabled(false);
            cmdBackUp();
            btn_start1.setEnabled(true);
            btn_toback.setEnabled(true);
            btn_cancel.setEnabled(true);
            btn_exit.setEnabled(true);
            ldb.setEnabled(true);
            lb.setEnabled(true);
            btn_setting.setEnabled(true);
            getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    };

//    Thread m = new Thread() {
//
//            public void run() {
//                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//            }
//        };
    t.start();
// m.start();

}//GEN-LAST:event_btn_start1ActionPerformed

private void ldbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ldbMouseReleased
// TODO add your handling code here:
    lb.clearSelection();
}//GEN-LAST:event_ldbMouseReleased

private void lbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMouseReleased
// TODO add your handling code here:
    ldb.clearSelection();
}//GEN-LAST:event_lbMouseReleased

private void btn_settingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_settingActionPerformed
    backupSetting jdi = new backupSetting(new java.awt.Frame(), true);
    jdi.setVisible(true);
}//GEN-LAST:event_btn_settingActionPerformed

private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
// TODO add your handling code here:
    dispose();
}//GEN-LAST:event_btn_exitActionPerformed
    private void checkMaxFile(File path) {//check ว่า เกินขนาดที่กำหนดหรือไม่

        List fileName = new ArrayList();
        File fi = new File(path.getPath());
        String pathDayof = pathFileUtility.pathDateConfig + "dateOfBackup.ini";//"/spapplication/backupdatabase/dateOfBackup/dateOfBackup.log";

        Directory_Files_Controller ctrl = new Directory_Files_Controller();
        String dayOfBackup = ctrl.ReadLogFile(pathDayof);
        File fl[] = fi.listFiles();

        for (File check : fl) {//count file

            if (check.isFile() && !check.isHidden()) {
                System.out.println(check);
                fileName.add(check);
            }
        }
        // sort data
        int n = fileName.size();
        Date[] sort = new Date[n];
        for (int i = 0; i < n; i++) {
            String date = fileName.get(i).toString().trim();
            date = date.substring(date.length() - 14, date.length() - 4);
            try {
                sort[i] = dateFmtShow.parse(date);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        int id = 0;
        for (int i = 0; i < n - 1; i++) {
            Date min = sort[i];
            for (int j = i + 1; j < n; j++) {
                if (sort[j].compareTo(min) < 0) {
                    min = sort[j];
                    id = j;
                }
            }
            Date temp = sort[i];
            sort[i] = sort[id];
            sort[id] = temp;
        }

        for (int i = 0; i < sort.length; i++) {
            System.out.println("date sort :" + dateFmtShow.format(sort[i]));
        }

        // Collections.sort(fileName);
        int dayfigFromLog = 0;
        try {
            dayfigFromLog = Integer.parseInt(dayOfBackup.trim());
        } catch (Exception e) {
            dayfigFromLog = 10;
        }

        if (fileName.size() < dayfigFromLog) {//filename.size ดึงขนดของfile ที่ backup ไว้ทั้งหมด
        } else {
            List dateModify = new ArrayList();
            File remove = new File(fileName.get(0).toString());
            System.out.println("remove:" + fileName.get(0).toString());
            remove.delete();
//            fileName.remove(0);
//                try {
//                    Date d = new Date();
//                    File file = (File) fileName.get(i);
//                    String modi = dateFmtShow.format(file.lastModified());
//                    d = dateFmtShow.parse(modi);
//                    dateModify.add(d);
//                 } catch (ParseException ex) {
//                    Logger.getLogger(backUp_Db.class.getName()).log(Level.SEVERE, null, ex);
//                }
            //      }

        }
    }

    private void checkRemoveFiles(File file) {
        Directory_Files_Controller ctrl = new Directory_Files_Controller();
        // String dayOfBackup = ctrl.ReadLogFile(file);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                backUp_Db dialog = new backUp_Db(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_setting;
    private javax.swing.JButton btn_start1;
    private javax.swing.JButton btn_toback;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lb;
    private javax.swing.JList ldb;
    // End of variables declaration//GEN-END:variables

    private void cmdBackUp() {
        int rowcnt = modelb.getSize();
        if (rowcnt > 0) {
            boolean c = false;
            MySQLConnect db = new MySQLConnect();
            db.dbconnect();
            String host = db.HostName;
            String dbName = "";//(String) lb.getSelectedValue();

            String user = db.UserName;
            String pass = db.Password;
            String backUpName = dateFmtShow.format(new java.util.Date());

            int b_size = modelb.getSize();
            try {
                jProgressBar1.setIndeterminate(true);
                for (int i = 0; i < b_size; i++) {
                    dbName = (String) modelb.getElementAt(i);
                    File path = new File(pathFileUtility.pathBackUp + dbName);
                    if (path.exists()) {
                        checkMaxFile(path);
                    }
                    File ch = new File("" + path.getPath() + "/" + dbName + "_" + backUpName + ".sql");
                    System.out.println("/usr/bin/mysqldump -u" + user + " -p" + pass + " --opt " + dbName + " --result-file=" + path.getPath() + "/" + dbName + "_" + backUpName + ".sql");
                    if (path.mkdirs()) {
                        if (ch.exists()) {
                            ch.delete();
                        }

                        Process p = Runtime.getRuntime().exec("/usr/bin/mysqldump -u" + user + " -p" + pass + " --opt " + dbName + " --result-file=" + path.getPath() + "/" + dbName + "_" + backUpName + ".sql");
                        p.waitFor();

                    } else {
                        if (ch.exists()) {
                            ch.delete();
                        }
                        Process p = Runtime.getRuntime().exec("/usr/bin/mysqldump -u" + user + " -p" + pass + " --opt " + dbName + " --result-file=" + path.getPath() + "/" + dbName + "_" + backUpName + ".sql");
                        p.waitFor();
                    }

                }
                JOptionPane.showMessageDialog(this, "Backup database successful", "Backup databases", JOptionPane.INFORMATION_MESSAGE);

                jProgressBar1.setIndeterminate(false);
            } catch (Exception err) {
                err.printStackTrace();
                System.out.println(err);

            }

        }
    }

    private void loadDatabaseName() {
        String TmpPath = "/var/lib/mysql";
        File TempPath = new File(TmpPath);
        File fl[] = TempPath.listFiles();
        int index = 0;
        for (File check : fl) {
            if (check.isDirectory()) {
                if (!check.getName().equals("mysql") && (!check.getName().equals("phpmyadmin"))) {
                    model.addElement(check.getName());
                    index++;
                }

            }
        }
    }
}
