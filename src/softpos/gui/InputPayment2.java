package softpos.gui;


import java.awt.Color;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import utilities.MySQLConnect;

public class InputPayment2 extends javax.swing.JDialog {
    DefaultTableModel model2;
    static SimpleDateFormat Datefmtshow = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
    SimpleDateFormat DateTimeFmt = new SimpleDateFormat("dd/MM/yyyy (HH:mm)", Locale.ENGLISH);
    SimpleDateFormat SqlDateFmt = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
    static SimpleDateFormat SqlDateTimeFmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
    SimpleDateFormat DateFmt = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
    SimpleDateFormat TimeFmt = new SimpleDateFormat("HH:mm", Locale.ENGLISH);
    SimpleDateFormat FileDateFmt = new SimpleDateFormat("yyyyMMdd", Locale.ENGLISH) ;
    SimpleDateFormat FullTimeFmt = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
    SimpleDateFormat ShortTimeFmt = new SimpleDateFormat("HH:mm", Locale.ENGLISH);
    Date TempDate = new Date() ;
    
    String Branch_Name;
    String Branch_Code;
    String Branch_Type;

    /** Creates new form InputPayment */
    
    public InputPayment2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Font myfont = new Font("Norasi", Font.PLAIN, 14);
        UIManager.put("Label.font", myfont);
        UIManager.put("Button.font", myfont);
        model2 = (DefaultTableModel) ShowTableLogin.getModel();
        ShowTableLogin.setShowGrid(true);
        ShowTableLogin.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        ShowTableLogin.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ShowTableLogin.setRowSelectionAllowed(true);
        ShowTableLogin.setShowGrid(true);
        ShowTableLogin.setShowHorizontalLines(true) ;
        ShowTableLogin.setShowVerticalLines(true) ;
        ShowTableLogin.setGridColor(Color.black);

        JTableHeader header = ShowTableLogin.getTableHeader();
        header.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 16));

        int[] ColSize = {50, 300, 100, 100, 100 };
        for (int i = 0; i < 5; i++) {
            //int vColIndex = 0;
            TableColumn col = ShowTableLogin.getColumnModel().getColumn(i);
            col.setPreferredWidth(ColSize[i]);
        }
        
        DecimalFormat DoubleFmt = new DecimalFormat("##,###,##0.00");
        DecimalFormat IntegerFmt = new DecimalFormat("##,###,##0");
        DecimalFormat PersentFmt = new DecimalFormat("#,##0.00%");

        TableColumnModel tcm = ShowTableLogin.getColumnModel();

        TableTestFormatRenderer r = new TableTestFormatRenderer(IntegerFmt);

        r = new TableTestFormatRenderer(DoubleFmt);
        r.setHorizontalAlignment(SwingConstants.RIGHT);
        tcm.getColumn(2).setCellRenderer(r);

        r = new TableTestFormatRenderer(DoubleFmt);
        r.setHorizontalAlignment(SwingConstants.RIGHT);
        tcm.getColumn(3).setCellRenderer(r);
        
        r = new TableTestFormatRenderer(DoubleFmt);
        r.setHorizontalAlignment(SwingConstants.RIGHT);
        tcm.getColumn(4).setCellRenderer(r);
        TempDate = PublicVar.SaleDate ;
        TDate1.setText(Datefmtshow.format(TempDate)) ;
        LoadDataFromFile() ;
        LoadDataToGrid() ;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
     public void LoadDataFromFile() {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "select *from branch";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() != 0) {
                Branch_Code = rec.getString("code");
                Branch_Name = rec.getString("name");
                Branch_Type = rec.getString("btype");
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    public void UpdateSurRj(String TRjNo, Double TAmt1, Double TAmt2, Double TAmt3,Double TTotal,String fixcode) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String InsertQuery = "update surrj set mac1=?,mac2=?,mac3=?,gosstotal=?,fixcode=? where rjno=? " ;
            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
            prm.setDouble(1, TAmt1);
            prm.setDouble(2, TAmt2);
            prm.setDouble(3, TAmt3);
            prm.setDouble(4, TTotal) ;
            prm.setString(5, fixcode);
            prm.setString(6, TRjNo);
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    public double GetSumProlostAmt(Date SaleDate) {
        double ReturnValue = 0.0 ;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "Select Sum(r_amount) as sumamt from prolost left join hprolost on prolost.r_no=hprolost.r_no " +
                    "where hprolost.r_date='"+SqlDateFmt.format(SaleDate)+"' and hprolost.r_post='Y' ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                ReturnValue = rec.getDouble("sumamt") ;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            PUtility.ShowError(e.getMessage());
        }
        return ReturnValue ;
    }

     public void LoadDataToGrid() {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "update surrj set mac1=0,mac2=0,mac3=0,gosstotal=0,nettotal=0,vat=0 ";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        //LoadData To SurRj
        double SumProlost = 0 ;
        SumProlost = GetSumProlostAmt(PublicVar.SaleDate) ;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile = "select *from rjfile2 where tdate ='" + SqlDateFmt.format(TempDate) + "' order by rjno";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            rec.first();
            if (rec.getRow() == 0) {
                if (SumProlost>0) {
                    UpdateSurRj("T8", SumProlost, 0.0, 0.0, SumProlost,"");
                }
            } else {
                do {
                    String XRJNo = rec.getString("rjno");
                    Double XSum1 = rec.getDouble("mac1");
                    Double XSum2 = rec.getDouble("mac2");
                    Double XSum3 = rec.getDouble("mac3");
                    Double XTotal = rec.getDouble("total");
                    String fixcode = rec.getString("fixcode") ;
                    if (XRJNo.equals("60")) {
                        txtfixcode.setText(fixcode);
                    }
                    if (XRJNo.equals("T8")) {
                       UpdateSurRj(XRJNo, SumProlost, 0.0, 0.0, SumProlost,"");
                    } else {
                        UpdateSurRj(XRJNo, XSum1, XSum2, XSum3, XTotal,fixcode);
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            PUtility.ShowError(e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile = "select *from surrj order by rjno";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            Date dt = new Date();
            int RowCount = model2.getRowCount();
            for (int i = 0; i <= RowCount - 1; i++) {
                model2.removeRow(0);
            }
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("rjno").equals("60") | rec.getString("rjno").equals("61") | rec.getString("rjno").equals("62") 
                            |rec.getString("rjno").equals("67")|rec.getString("rjno").equals("68")
                            |rec.getString("rjno").equals("70")|rec.getString("rjno").equals("71")|rec.getString("rjno").equals("72")
                            |rec.getString("rjno").equals("73")|rec.getString("rjno").equals("67")
                            | rec.getString("rjno").equals("T0") | rec.getString("rjno").equals("T4") | rec.getString("rjno").equals("T5") | rec.getString("rjno").equals("T6") |rec.getString("rjno").equals("T8")|rec.getString("rjno").equals("T9")) {
                        Object[] input = {
                            rec.getString("rjno"),
                            rec.getString("tdesc"),
                            rec.getDouble("mac1"),
                            rec.getDouble("mac2"),
                            rec.getDouble("mac3")
                        };
                        model2.addRow(input);
                    }
                } while (rec.next());
                RowCount = model2.getRowCount();
                showCell(0, 0);
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            PUtility.ShowError(e.getMessage());
        }
    }
    public void showCell(int row, int column) {
        Rectangle rect = ShowTableLogin.getCellRect(row, column, true);
        ShowTableLogin.scrollRectToVisible(rect);
        ShowTableLogin.clearSelection();
        ShowTableLogin.setRowSelectionInterval(row, row);
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ShowTableLogin = new javax.swing.JTable();
        bntOK = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TDate1 = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtfixcode = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        ShowTableLogin.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        ShowTableLogin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RJNO", "รายการ (Description)", "เครื่อง 1", "เครื่อง 2", "เครื่อง 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ShowTableLogin.setOpaque(false);
        ShowTableLogin.setRowHeight(24);
        ShowTableLogin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ShowTableLoginKeyPressed(evt);
            }
        });
        ShowTableLogin.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                ShowTableLoginVetoableChange(evt);
            }
        });
        jScrollPane1.setViewportView(ShowTableLogin);

        bntOK.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        bntOK.setText("F5-ตกลง (OK)");
        bntOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bntOKMouseReleased(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        jLabel1.setText("ประจำวันที่ ");

        TDate1.setFocusable(false);
        TDate1.setFont(new java.awt.Font("Norasi", 1, 18)); // NOI18N
        TDate1.setRequestFocusEnabled(false);
        TDate1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TDate1FocusLost(evt);
            }
        });
        TDate1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TDate1KeyPressed(evt);
            }
        });

        jPanel2.setBackground(java.awt.Color.white);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setForeground(new java.awt.Color(241, 30, 11));

        jLabel2.setFont(new java.awt.Font("Norasi", 1, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(245, 18, 18));
        jLabel2.setText("บันทึกรายการโอนเงิน (Pay In)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(444, 444, 444)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(TDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jButton3.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        jButton3.setText("ESC-ออก (Exit)");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton3MouseReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        jLabel3.setText("      F1-ใส่รหัสธนาคาร (Bank Code PAY In 1)");

        txtfixcode.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        txtfixcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtfixcodeKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfixcode, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(273, 273, 273)
                        .addComponent(bntOK, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfixcode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntOK)
                    .addComponent(jLabel3))
                .addGap(88, 88, 88))
        );

        setSize(new java.awt.Dimension(1024, 768));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

private void ShowTableLoginKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ShowTableLoginKeyPressed
   if (evt.getKeyCode()==KeyEvent.VK_F1) {
       txtfixcode.requestFocus();
   }
   if (evt.getKeyCode()==KeyEvent.VK_F5) {
      bntOKClick() ;
   }
   if (evt.getKeyCode()==KeyEvent.VK_ESCAPE) {
      this.dispose();
   }

}//GEN-LAST:event_ShowTableLoginKeyPressed

private void ShowTableLoginVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_ShowTableLoginVetoableChange

}//GEN-LAST:event_ShowTableLoginVetoableChange

private void bntOKMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bntOKMouseReleased
    bntOKClick() ;
}//GEN-LAST:event_bntOKMouseReleased

private void TDate1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TDate1FocusLost
    LoadDataToGrid() ;
}//GEN-LAST:event_TDate1FocusLost

private void TDate1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TDate1KeyPressed
    if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
        ShowTableLogin.requestFocus();
    } else
        if (evt.getKeyCode()==KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
}//GEN-LAST:event_TDate1KeyPressed

private void jButton3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseReleased
    this.dispose();
}//GEN-LAST:event_jButton3MouseReleased

private void txtfixcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfixcodeKeyPressed
    // TODO add your handling code here:
    if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
        ShowTableLogin.requestFocus();
    }
    if (evt.getKeyCode()==KeyEvent.VK_ESCAPE) {
        ShowTableLogin.requestFocus();
    }

}//GEN-LAST:event_txtfixcodeKeyPressed
public void UpdateOperation() {
    Calendar CurDate = new GregorianCalendar();
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String UpdatePromotion = "update dayoperation set rjfile=?,rjfileuser=?,rjfiletime=? where operationdate=? ";
            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(UpdatePromotion);
            prm.setString(1, "Y");
            prm.setString(2, PublicVar._User);
            prm.setString(3, SqlDateTimeFmt.format(CurDate.getTime()));
            prm.setString(4, SqlDateFmt.format(PublicVar.SaleDate));
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            PUtility.ShowError(e.getMessage());
        }
    }
public void bntOKClick() {
    try {
       UpdateToDataBase() ;
       ClearRjFile() ;
       SaveDataToRJFile() ;
       UpdateOperation() ;
    }catch (Exception e) {
       JOptionPane.showMessageDialog(this, e.getMessage());
    }
    this.dispose();
}
public void ClearRjFile() {
    try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from rjfile2 where tdate='"+SqlDateFmt.format(TempDate)+"'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }    
}
public void SaveDataToRJFile() {
    try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from surrj ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    String RjNo = rec.getString("rjno") ;
                    if (rec.getString("rjno").equals("60") | rec.getString("rjno").equals("61") | rec.getString("rjno").equals("62")
                            |rec.getString("rjno").equals("67")|rec.getString("rjno").equals("68")
                            |rec.getString("rjno").equals("70")|rec.getString("rjno").equals("71")|rec.getString("rjno").equals("72")
                            |rec.getString("rjno").equals("73")|rec.getString("rjno").equals("67")
                            | rec.getString("rjno").equals("T0") |  rec.getString("rjno").equals("T4") | rec.getString("rjno").equals("T5") | rec.getString("rjno").equals("T6") | rec.getString("rjno").equals("T8")|rec.getString("rjno").equals("T9")) {
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into rjfile2 (brcode,tdate,rjno," +
                            "fixcode,mac1,mac2,mac3,total,nettotal,vat) " +
                            "values (?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, Branch_Code);
                    prm.setString(2, SqlDateFmt.format(TempDate));
                    prm.setString(3, rec.getString("rjno"));
                    if (RjNo.equals("60")) {
                        prm.setString(4, txtfixcode.getText());
                    } else {
                        prm.setString(4, "");
                    }
                    prm.setDouble(5, rec.getDouble("mac1"));
                    prm.setDouble(6, rec.getDouble("mac2"));
                    prm.setDouble(7, rec.getDouble("mac3"));
                    prm.setDouble(8, rec.getDouble("mac1")+rec.getDouble("mac2")+rec.getDouble("mac3"));
                    prm.setDouble(9, 0);
                    prm.setDouble(10, 0);
                    prm.executeUpdate();
                    stmt2.close();
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }    
}
public void ProcessSum() {
    try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile ="select *from surrj";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    String TRJNo = rec.getString("rjno") ;
                    String TDept = rec.getString("dept") ;
                    String TProcess = rec.getString("process") ;
                    if (!TProcess.equals("")) {
                       if (TProcess.substring(0,3).equals("SUM")) {
                           ProcessSumRJ(TRJNo,TProcess) ;
                       }
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            PUtility.ShowError(e.getMessage());
        }
}
public void ProcessSumRJ(String TRJNo,String TProcess) {
        Double XSum1 = 0.0 ;
        Double XSum2 = 0.0 ;
        Double XSum3 = 0.0 ;
        String XRJNo = "" ;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from surrj";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    XRJNo = rec.getString("rjno") ;
                    int XPoint = TProcess.indexOf(XRJNo) ;
                    if (XPoint>0) {
                       String XSign = TProcess.substring(XPoint-1,XPoint) ;
                       if (XSign.equals("-")) {
                           XSum1 = XSum1-rec.getDouble("mac1") ;
                           XSum2 = XSum2-rec.getDouble("mac2") ;
                           XSum3 = XSum3-rec.getDouble("mac3") ;
                       } else {
                           XSum1 = XSum1+rec.getDouble("mac1") ;
                           XSum2 = XSum2+rec.getDouble("mac2") ;
                           XSum3 = XSum3+rec.getDouble("mac3") ;
                       }
                    }
                } while (rec.next());
            }
            UpdateSurRj(TRJNo, XSum1, XSum2, XSum3);
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
         
        
    } 
 public void UpdateSurRj(String TRjNo, Double TAmt1, Double TAmt2, Double TAmt3) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String InsertQuery = "update surrj set mac1=?,mac2=?,mac3=? where rjno=? " ;
            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
            prm.setDouble(1, TAmt1);
            prm.setDouble(2, TAmt2);
            prm.setDouble(3, TAmt3);
            prm.setString(4, TRjNo);
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void UpdateToDataBase() {
        int maxrow;
        String RJNo = "";
        Double Mac1 = 0.0;
        Double Mac2 = 0.0;
        Double Mac3 = 0.0;
        Double Total = 0.0 ;
        maxrow = ShowTableLogin.getRowCount();
        if (maxrow > 0) {
            for (int i = 0; i < maxrow; i++) {
                RJNo = ShowTableLogin.getValueAt(i, 0).toString();
                Mac1 = (Double) ShowTableLogin.getValueAt(i, 2);
                Mac2 = (Double) ShowTableLogin.getValueAt(i, 3);
                Mac3 = (Double) ShowTableLogin.getValueAt(i, 4);
                Total = Mac1+Mac2+Mac3 ;
                try {
                    Statement stmt = (Statement) MySQLConnect.con.createStatement();
                    String LoadTableFile = "update surrj set mac1=" + Mac1 + ",mac2=" + Mac2 + ",mac3=" + Mac3 +",gosstotal="+Total+" where rjno='" + RJNo + "'";
                    stmt.executeUpdate(LoadTableFile);
                    stmt.close();
                } catch (SQLException e) {
                    PUtility.ShowError(e.getMessage());
                }

            }
        } else {
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InputPayment dialog = new InputPayment(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ShowTableLogin;
    private javax.swing.JFormattedTextField TDate1;
    private javax.swing.JButton bntOK;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtfixcode;
    // End of variables declaration//GEN-END:variables
     public class TableTestFormatRenderer extends DefaultTableCellRenderer {

        private Format formatter;

        public TableTestFormatRenderer(Format formatter) {
            if (formatter == null) {
                throw new NullPointerException();
            }
            this.formatter = formatter;
        }

        protected void setValue(Object obj) {
            setText(obj == null ? "" : formatter.format(obj));
        }
    }
}
