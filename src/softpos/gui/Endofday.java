package softpos.gui;


import directory_utility.DirectoryUtility;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import utilities.MySQLConnect;
import write_to_text.TextWriter;

public class Endofday extends javax.swing.JDialog {

    SimpleDateFormat DateTimeFmt = new SimpleDateFormat("dd/MM/yyyy (HH:mm)", Locale.ENGLISH);
    SimpleDateFormat SqlDateFmt = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
    SimpleDateFormat SqlDateTimeFmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
    SimpleDateFormat DateFmt = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
    SimpleDateFormat TimeFmt = new SimpleDateFormat("HH:mm", Locale.ENGLISH);
    SimpleDateFormat FileDateFmt = new SimpleDateFormat("yyyyMMdd", Locale.ENGLISH);
    SimpleDateFormat FullTimeFmt = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
    DecimalFormat DecFmt = new DecimalFormat("##,###,##0.00");
    DecimalFormat IntFmt = new DecimalFormat("##,###,##0");
    Date date = new Date();
    Date EndofdayDate = new Date();
    String T_Stk = "";
    private Timer timer;
    int CurRec;
    int totalRec;
    String _BranCode;
    String _BranName;
    String Branch_PromotionGP;
    String PVatType;
    static boolean processStop;
    String AutoSum = "" ;
    String AdjStock = "" ;
    String RjFile = "" ;
    String EndOfDay = "" ;
    String SendData = "" ;

    /** Creates new form Endofday */
    public Endofday(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        Font myfont = new Font("Norasi", Font.PLAIN, 14);
        UIManager.put("Label.font", myfont);
        UIManager.put("Button.font", myfont);
        initComponents();
        TimeOfDay time = new TimeOfDay();
        timer = new Timer(1000, (ActionListener) time);
        timer.start();
        
        Activate();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Sale_Date = new javax.swing.JFormattedTextField();
        bntOK = new javax.swing.JButton();
        bntCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Pro_Msg = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        Msg1 = new javax.swing.JLabel();
        Chk1 = new javax.swing.JCheckBox();
        Msg2 = new javax.swing.JLabel();
        Msg3 = new javax.swing.JLabel();
        Msg4 = new javax.swing.JLabel();
        Msg5 = new javax.swing.JLabel();
        Chk2 = new javax.swing.JCheckBox();
        Chk3 = new javax.swing.JCheckBox();
        Chk4 = new javax.swing.JCheckBox();
        Chk5 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ปิดยอดการขายประจำวัน (End Of Day)");
        setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTextArea1.setBackground(new java.awt.Color(246, 203, 230));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("                                                       *** คำเตือน ***         \n  การปิดยอดการขายประจำวัน เป็นการสรุปยอดรวมการขายทั้งหมดของวันนั้นๆ ซึ่งการปิดยอดการขายประจำวันนี้ ควรทำหลัง\n  จาก สิ้นสุดการขายของวันนั้นๆแล้วเท่านั้น และควรทำการพิมพ์รายงานการขายประจำวันต่างๆทั้งหมด ก่อนทำการการปิดยอด\n  การขายนี้  และหลังจากปิดยอดการขายประจำวันแล้วจะไม่สามารถพิมพ์รายงานการขายประจำวัน ที่เครื่อง POS ได้อีก\n              \n                  *** การปิดยอดการขายประจำวัน (End Of Day) จะต้องทำงานให้ครบทั้ง 5 ขั้นตอน  ***");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.setBackground(new java.awt.Color(144, 199, 230));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setFont(new java.awt.Font("Norasi", 0, 16)); // NOI18N
        jLabel2.setText("ปิดการขายประจำวันที่");

        Sale_Date.setEditable(false);
        Sale_Date.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        Sale_Date.setDisabledTextColor(java.awt.Color.black);
        Sale_Date.setEnabled(false);
        Sale_Date.setFont(new java.awt.Font("Norasi", 0, 16)); // NOI18N
        Sale_Date.setRequestFocusEnabled(false);

        bntOK.setFont(new java.awt.Font("Norasi", 0, 16)); // NOI18N
        bntOK.setText("ตกลงประมวลผลปิดสิ้นวัน (OK)");
        bntOK.setFocusable(false);
        bntOK.setMargin(new java.awt.Insets(1, 1, 1, 1));
        bntOK.setRequestFocusEnabled(false);
        bntOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bntOKMouseReleased(evt);
            }
        });
        bntOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntOKActionPerformed(evt);
            }
        });

        bntCancel.setFont(new java.awt.Font("Norasi", 0, 16)); // NOI18N
        bntCancel.setText("ออก (Exit)");
        bntCancel.setFocusable(false);
        bntCancel.setMargin(new java.awt.Insets(1, 1, 1, 1));
        bntCancel.setRequestFocusEnabled(false);
        bntCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bntCancelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Sale_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bntOK, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bntCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Sale_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(bntOK, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        Pro_Msg.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        Pro_Msg.setText("Process Message");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Pro_Msg, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(Pro_Msg)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TextArea1.setColumns(20);
        TextArea1.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        TextArea1.setRows(5);
        TextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        TextArea1.setVerifyInputWhenFocusTarget(false);
        jScrollPane2.setViewportView(TextArea1);

        jPanel3.setBackground(java.awt.Color.darkGray);
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray, 3));

        jLabel3.setFont(new java.awt.Font("Norasi", 0, 32)); // NOI18N
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("รายการปิดยอดการขายประจำวัน (End Of Day)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel3)
                .addContainerGap(344, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "  (ขั้นตอนการปิดการขายสิ้นวัน)  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Norasi", 1, 16))); // NOI18N
        jPanel4.setEnabled(false);
        jPanel4.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        Msg1.setFont(new java.awt.Font("Norasi", 0, 20)); // NOI18N
        Msg1.setForeground(new java.awt.Color(214, 10, 20));
        Msg1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BillPrint.jpg"))); // NOI18N
        Msg1.setText("(1) พิมพ์รายงานสรุปยอดการขายอัตโนมัติรวมทุกเครื่อง");
        Msg1.setOpaque(true);

        Chk1.setSelected(true);
        Chk1.setFocusable(false);
        Chk1.setRequestFocusEnabled(false);
        Chk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Chk1ActionPerformed(evt);
            }
        });

        Msg2.setFont(new java.awt.Font("Norasi", 0, 20)); // NOI18N
        Msg2.setForeground(new java.awt.Color(214, 10, 20));
        Msg2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PaidIn2.jpg"))); // NOI18N
        Msg2.setText("(2) ตรวจนับสินค้าสิ้นวันและบันทึกรายการของเสีย");

        Msg3.setFont(new java.awt.Font("Norasi", 0, 20)); // NOI18N
        Msg3.setForeground(new java.awt.Color(214, 10, 20));
        Msg3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Earnest.jpg"))); // NOI18N
        Msg3.setText("(3) บันทึกรายการโอนเงินเข้าธนาคาร (Pay In)");

        Msg4.setFont(new java.awt.Font("Norasi", 0, 20)); // NOI18N
        Msg4.setForeground(new java.awt.Color(214, 10, 20));
        Msg4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Add record.gif"))); // NOI18N
        Msg4.setText("(4) ประมวลผลปิดการขายประจำวัน");

        Msg5.setFont(new java.awt.Font("Norasi", 0, 20)); // NOI18N
        Msg5.setForeground(new java.awt.Color(214, 10, 20));
        Msg5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BillPrint.jpg"))); // NOI18N
        Msg5.setText("(5) ส่งข้อมูลการขาย และ ข้อมูลสมาชิกไปสำนักงานใหญ่");

        Chk2.setFocusable(false);
        Chk2.setRequestFocusEnabled(false);
        Chk2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Chk2ActionPerformed(evt);
            }
        });

        Chk3.setFocusable(false);
        Chk3.setRequestFocusEnabled(false);
        Chk3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Chk3ActionPerformed(evt);
            }
        });

        Chk4.setFocusable(false);
        Chk4.setRequestFocusEnabled(false);
        Chk4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Chk4ActionPerformed(evt);
            }
        });

        Chk5.setFocusable(false);
        Chk5.setRequestFocusEnabled(false);
        Chk5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Chk5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Chk1)
                    .addComponent(Chk2)
                    .addComponent(Chk3)
                    .addComponent(Chk4)
                    .addComponent(Chk5))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Msg5)
                    .addComponent(Msg4)
                    .addComponent(Msg3)
                    .addComponent(Msg2)
                    .addComponent(Msg1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Chk1)
                    .addComponent(Msg1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Chk2)
                    .addComponent(Msg2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Chk3)
                    .addComponent(Msg3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Chk4)
                    .addComponent(Msg4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Chk5)
                    .addComponent(Msg5)))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(131, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1041, 836));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    Sale_Date.requestFocus();
}//GEN-LAST:event_formWindowOpened

private void bntCancelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bntCancelMouseReleased
    this.dispose();
}//GEN-LAST:event_bntCancelMouseReleased

private void bntOKMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bntOKMouseReleased
  
    bntOKClick();
}//GEN-LAST:event_bntOKMouseReleased

private void bntOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntOKActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_bntOKActionPerformed

private void Chk1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Chk1ActionPerformed
    // TODO add your handling code here:
    UpdateCheckbnt() ;
}//GEN-LAST:event_Chk1ActionPerformed

private void Chk2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Chk2ActionPerformed
    // TODO add your handling code here:
    UpdateCheckbnt() ;
}//GEN-LAST:event_Chk2ActionPerformed

private void Chk3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Chk3ActionPerformed
    // TODO add your handling code here:
    UpdateCheckbnt() ;
}//GEN-LAST:event_Chk3ActionPerformed

private void Chk4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Chk4ActionPerformed
    // TODO add your handling code here:
    UpdateCheckbnt() ;
}//GEN-LAST:event_Chk4ActionPerformed

private void Chk5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Chk5ActionPerformed
    // TODO add your handling code here:
    UpdateCheckbnt() ;
}//GEN-LAST:event_Chk5ActionPerformed

    public void Activate() {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile = "select *from company";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                T_Stk = rec.getString("posstock");
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        _BranCode = "";
        _BranName = "";
        Branch_PromotionGP = "";
        PVatType = "";
        GetBranch();
        GetConfig();

        //PublicVar.SaleDate = PUtility.StrToCalendar("11/10/2010").getTime() ;
        Sale_Date.setText(DateFmt.format(PublicVar.SaleDate));
        EndofdayDate = PublicVar.SaleDate ;
//        try {
//            Statement stmt = (Statement) MySQLConnect.con.createStatement();
//            String LoadTableFile = "select *from dayoperation where operationdate='"+SqlDateFmt.format(PublicVar.SaleDate)+"'";
//            ResultSet rec = stmt.executeQuery(LoadTableFile);
//            rec.first();
//            if (rec.getRow() == 0) {
//            } else {
//                AutoSum = rec.getString("autosum") ;
//                AdjStock = rec.getString("adjstock") ;
//                RjFile = rec.getString("rjfile") ;
//                EndOfDay = rec.getString("endofday") ;
//                SendData = rec.getString("sendsaledata") ;
//            }
//            rec.close();
//            stmt.close();
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(this, e.getMessage());
//        }
        UpdateCheckbnt() ;
    }
    public void UpdateCheckbnt() {
        if (AutoSum.equals("Y")) {
            Chk1.setSelected(true);
            Msg1.setForeground(Color.BLUE);
        } else {
            Chk1.setSelected(false);
            Msg1.setForeground(Color.RED);
        }

        if (AdjStock.equals("Y")) {
            Chk2.setSelected(true);
            Msg2.setForeground(Color.BLUE);
        } else {
            Chk2.setSelected(false);
            Msg2.setForeground(Color.RED);
        }

        if (RjFile.equals("Y")) {
            Chk3.setSelected(true);
            Msg3.setForeground(Color.BLUE);
        } else {
            Chk3.setSelected(false);
            Msg3.setForeground(Color.RED);
        }
        if (EndOfDay.equals("Y")) {
            Chk4.setSelected(true);
            Msg4.setForeground(Color.BLUE);
        } else {
            Chk4.setSelected(false);
            Msg4.setForeground(Color.RED);
        }

        if (SendData.equals("Y")) {
            Chk5.setSelected(true);
            Msg5.setForeground(Color.BLUE);
        } else {
            Chk5.setSelected(false);
            Msg5.setForeground(Color.RED);
        }

    }
    public Boolean CheckLogOff() {
        Boolean RetVal = false;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from poshwsetup where onact='Y'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
                RetVal = true;
            } else {
                JOptionPane.showMessageDialog(this, "ยังมีเครื่อง POS ยังไม่ออกจากการทำงาน ไม่สามารถทำการปิดสิ้นวันได้ !!!");
                RetVal = false;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;
    }

    public Boolean CheckBalance() {
        Boolean RetVal = false;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from balance ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
                RetVal = true;
            } else {
                JOptionPane.showMessageDialog(this, "ยังมีรายการขายที่ยังไม่ได้ชำระเงิน...ไม่สามารถทำรายการปิดสิ้นวันได้ !!!");
                RetVal = false;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;
    }
    public void UpdateOperationEndOfDay() {
//        Calendar CurDate = new GregorianCalendar();
//        try {
//            Statement stmt = (Statement) MySQLConnect.con.createStatement();
//            String UpdatePromotion = "update dayoperation set endofday=?,endofdayuser=?,endofdaytime=? where operationdate=? ";
//            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(UpdatePromotion);
//            prm.setString(1, "Y");
//            prm.setString(2, PublicVar._User);
//            prm.setString(3, SqlDateTimeFmt.format(CurDate.getTime()));
//            prm.setString(4, SqlDateFmt.format(PublicVar.SaleDate));
//            prm.executeUpdate();
//            stmt.close();
//        } catch (SQLException e) {
//            PUtility.ShowError(e.getMessage());
//        }
    }

    public void UpdateBranchEndOfDay() {
    Calendar CurDate = new GregorianCalendar();
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String UpdatePromotion = "update branch set endofdaydate=? ";
            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(UpdatePromotion);
            prm.setString(1, SqlDateFmt.format(PublicVar.SaleDate));
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            PUtility.ShowError(e.getMessage());
        }
    }


    public Boolean CheckTransection() {
        Boolean RetVal = false;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from billno order by b_ondate ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
                JOptionPane.showMessageDialog(this, "ไม่พบรายการขายที่จะทำการปิดยอดการขายประจำวัน");
                RetVal = false;
            } else {
                Date TempDate;
                TempDate = rec.getDate("b_ondate");
                String StrDate1 = DateFmt.format(PublicVar.SaleDate) ;
                String StrDate2 = DateFmt.format(TempDate) ;
                if (StrDate1.compareTo(StrDate2) != 0) {
                    int option = JOptionPane.showConfirmDialog(null, "วันที่ปิดวันไม่ตรงกับวันที่เริ่มต้นในรายการขาย...ยืนยันการปิดยอดการขายประจำวัน (Yes/No)", "Confirm Dialog ....", JOptionPane.YES_NO_OPTION);
                    if (option == JOptionPane.YES_OPTION) {
                        GetPassword frm = new GetPassword(null, true);
                        frm.setVisible(true);
                        if (frm.ValidPassword) {
                            RetVal = true;
                        } else {
                            RetVal = false;
                        }
                    }
                } else {
                    RetVal = true ;
                }
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;

    }

    public Boolean CheckDuplicateEndofday(Date EndofdayDate) {
        Boolean RetVal = false;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from s_invoice where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
                RetVal = true;
            } else {
                int option = JOptionPane.showConfirmDialog(null, "ข้อมูลวันที่ " + DateFmt.format(EndofdayDate) + " มีการปิดวันไว้แล้ว กรุณาตรวจสอบวันที่ หรือยืนยันการปิดยอดขายตามวันที่ข้างต้น (Yes/No) ?", "Confirm Dialog ....", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    GetPassword frm = new GetPassword(null, true);
                    frm.setVisible(true);
                    if (frm.ValidPassword) {
                        DeleteOldProcess(EndofdayDate);
                        RetVal = true;
                    } else {
                        RetVal = false;
                    }
                }
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;
    }

    public void DeleteOldProcess(Date EndofdayDate) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_invoice where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_tran where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_transet where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_cupon where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_credit where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_paidio where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        //Must Clear StCard In this
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_sale where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_void where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_billar where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_tar where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_tcrar where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_gift where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_promotion where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from terminal where t_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from cashier where t_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_vat where tdate='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_billret where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from gpheader where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from gpdetail where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_kictran where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from rjfile where tdate='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        //For Charge
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_charge where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_trancharge where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "delete from s_tranchargeset where s_date='" + SqlDateFmt.format(EndofdayDate) + "'";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
     public void GetBranch() {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from branch ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                _BranCode = rec.getString("code");
                _BranName = rec.getString("name");
                Branch_PromotionGP = rec.getString("promotiongp");
            }
            if (Branch_PromotionGP==null) {
                Branch_PromotionGP="" ;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void GetConfig() {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from posconfigsetup ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                PVatType = rec.getString("p_vattype");
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    private boolean CheckOtherDocNotPost() {
        String TempDocNo = "";
        int Cnt = 0;
        boolean Retval = true;
        try {
            TempDocNo = "" ;
            Cnt = 0 ;
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from hrecive where r_post<>'Y'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last();
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Cnt++;
                    TempDocNo = TempDocNo + rec.getString("R_No") + ",";
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            if (Cnt > 0) {
                PUtility.ShowMsg("ยังมีเอกสารการรับสินค้าจากโรงงาน ที่ยังไม่ได้ทำการ POST สต็อก \n เลขที่ " + TempDocNo+"\n กรุณา POST เอกสารดังกล่าวให้เรียบร้อยก่อน...");
                Retval = false;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "hrecive : " + e.getMessage());
        }

        try {
            TempDocNo = "" ;
            Cnt = 0 ;
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from htranin where r_post<>'Y'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last();
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Cnt++;
                    TempDocNo = TempDocNo + rec.getString("R_No") + ",";
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            if (Cnt > 0) {
                PUtility.ShowMsg("ยังมีเอกสารการรับโอนสินค้า(เข้า) ที่ยังไม่ได้ทำการ POST สต็อก \n เลขที่ " + TempDocNo+"\n กรุณา POST เอกสารดังกล่าวให้เรียบร้อยก่อน...");
                Retval = false;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "htranin : " + e.getMessage());
        }

        try {
            TempDocNo = "" ;
            Cnt = 0 ;
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from htranout where r_post<>'Y'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last();
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Cnt++;
                    TempDocNo = TempDocNo + rec.getString("R_No") + ",";
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            if (Cnt > 0) {
                PUtility.ShowMsg("ยังมีเอกสารการโอนสินค้า(ออก) ที่ยังไม่ได้ทำการ POST สต็อก \n เลขที่ " + TempDocNo+"\n กรุณา POST เอกสารดังกล่าวให้เรียบร้อยก่อน...");
                Retval = false;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "htranout : " + e.getMessage());
        }
//        try {
//            TempDocNo = "" ;
//            Cnt = 0 ;
//            Statement stmt = (Statement) MySQLConnect.con.createStatement();
//            String SQLQuery = "select *from hprolost where r_post<>'Y'";
//            ResultSet rec = stmt.executeQuery(SQLQuery);
//            rec.last();
//            rec.first();
//            if (rec.getRow() == 0) {
//            } else {
//                do {
//                   Cnt++;
//                   TempDocNo = TempDocNo + rec.getString("R_No") + ",";
//                } while (rec.next());
//            }
//            rec.close();
//            stmt.close();
//            if (Cnt > 0) {
//                PUtility.ShowMsg("ยังมีเอกสารการบันทึกของเสีย ที่ยังไม่ได้ทำการ POST สต็อก \n เลขที่ " + TempDocNo+"\n กรุณา POST เอกสารดังกล่าวให้เรียบร้อยก่อน...");
//                Retval = false;
//            }
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(this, "hprolost : " + e.getMessage());
//        }
        try {
            TempDocNo = "" ;
            Cnt = 0 ;
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from hcharge where r_post<>'Y'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last();
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Cnt++;
                    TempDocNo = TempDocNo + rec.getString("R_No") + ",";
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            if (Cnt > 0) {
                PUtility.ShowMsg("ยังมีเอกสารการบันทึกแจกฟรี ที่ยังไม่ได้ทำการ POST สต็อก \n เลขที่ " + TempDocNo+"\n กรุณา POST เอกสารดังกล่าวให้เรียบร้อยก่อน...");
                Retval = false;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "hcharge : " + e.getMessage());
        }
        try {
            TempDocNo = "" ;
            Cnt = 0 ;
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from hconvert where r_post<>'Y'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last();
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Cnt++;
                    TempDocNo = TempDocNo + rec.getString("R_No") + ",";
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            if (Cnt > 0) {
                PUtility.ShowMsg("ยังมีเอกสารการแปรรูปสินค้า ที่ยังไม่ได้ทำการ POST สต็อก \n เลขที่ " + TempDocNo+"\n กรุณา POST เอกสารดังกล่าวให้เรียบร้อยก่อน...");
                Retval = false;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "hconvart : " + e.getMessage());
        }
        try {
            EndofdayDate = DateFmt.parse(Sale_Date.getText());
        } catch (Exception e) {
        }
        try {
            TempDocNo = "" ;
            Cnt = 0 ;
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from hadjstock where r_post<>'Y' and r_date='"+SqlDateFmt.format(EndofdayDate)+"'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last();
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Cnt++;
                    TempDocNo = TempDocNo + rec.getString("R_No") + ",";
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            if (Cnt > 0) {
                PUtility.ShowMsg("ยังมีเอกสารการการตรวจนับสินค้า ที่ยังไม่ได้ทำการ POST สต็อก \n เลขที่ " + TempDocNo+"\n กรุณา POST เอกสารดังกล่าวให้เรียบร้อยก่อน...");
                Retval = false;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "hadjstock : " + e.getMessage());
        }
        return Retval;
    }

    public void bntOKClick() {
        boolean ProcessOk = true ;
        if (!CheckOtherDocNotPost()) {
            ProcessOk = false ;
        }
        if (!AutoSum.equals("Y")) {
            PUtility.ShowMsg("กรุณาพิมพ์รายงานสรุปยอดการขายอัตโนมัติรวมทุกเครื่อง...ก่อนทำการปิดยอดการขายประจำวัน (End Of Day) !!!");
            ProcessOk = false ;
        }
        if (!AdjStock.equals("Y")) {
            PUtility.ShowMsg("กรุณาตรวจนับสินค้าสิ้นวันและบันทึกของเสีย...ก่อนทำการปิดยอดการขายประจำวัน (End Of Day) !!!");
            ProcessOk = false ;
        }
        if (!RjFile.equals("Y")) {
            PUtility.ShowMsg("กรุณาบันทึกรายงานโอนเงินเข้าธนาคาร (Pay In)...ก่อนทำการปิดยอดการขายประจำวัน (End Of Day) !!!");
            ProcessOk = false ;
        }
        if (ProcessOk) {
           Thread ProcessFile = new Thread(new ProcessFile());
           ProcessFile.start();
        }

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new  

              Runnable() {

                 public void run() {
                new Endofday(null, true).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Chk1;
    private javax.swing.JCheckBox Chk2;
    private javax.swing.JCheckBox Chk3;
    private javax.swing.JCheckBox Chk4;
    private javax.swing.JCheckBox Chk5;
    private javax.swing.JLabel Msg1;
    private javax.swing.JLabel Msg2;
    private javax.swing.JLabel Msg3;
    private javax.swing.JLabel Msg4;
    private javax.swing.JLabel Msg5;
    private javax.swing.JLabel Pro_Msg;
    private javax.swing.JFormattedTextField Sale_Date;
    private javax.swing.JTextArea TextArea1;
    private javax.swing.JButton bntCancel;
    private javax.swing.JButton bntOK;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
class TimeOfDay implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet.");
            SimpleDateFormat tf = new SimpleDateFormat("dd/mm/yyyy (HH:mm:ss)", Locale.US);
            String St = tf.format(new Date());        }
    }
class ProcessFile extends javax.swing.JDialog implements Runnable {
    public void run() {
        TextArea1.selectAll();
        TextArea1.cut();
        TextArea1.append("********** Start Process ************\n") ;
        
        processStop = false;
        try {
            EndofdayDate = DateFmt.parse(Sale_Date.getText());
        } catch (Exception e) {
        }
        if (CheckLogOff() & CheckBalance()) {
            if (CheckTransection()) {
                if (CheckDuplicateEndofday(EndofdayDate)) {
                    Sale_Date.setEnabled(false); ;
                    if (!processStop) {
                        ProcessInvoice();
                    }
                    if (!processStop) {
                        Processs_tran();
                    }
                    if (!processStop) {
                        Processs_tranSet();
                    }
                    if (!processStop) {
                        ProcessCredit();
                    }
                    if (!processStop) {
                        ProcessCoupon();
                    }
                    if (!processStop) {
                        ProcessPaidIO();
                    }
                    if (!processStop) {
                        ProcessPlu_Dept();
                    }
                    if (!processStop) {
                        //ProcessStock();
                    }
                    if (!processStop) {
                        ProcessVoid();
                    }
                    if (!processStop) {
                        ProcessAR();
                    }
                    if (!processStop) {
                        ProcessGiftVoucher();
                    }
                    if (!processStop) {
                        ProcessPromotion();
                    }
                    if (!processStop) {
                        ProcessTerminal();
                    }
                    if (!processStop) {
                        ProcessCashier();
                    }
                    if (!processStop) {
                        ProcessVatReport();
                    }
                    if (!processStop) {
                        ProcessCashReturn();
                    }
                    if (!processStop) {
                        ProcessPromotionGP();
                    }
                    if (!processStop) {
                        ProcessRJFile();
                    }
                    if (!processStop) {
                        ProcessClearKicTran();
                    }
                    if(!processStop) {
                        ProcessCharge() ;
                    }
                    if(!processStop) {
                        ProcessTranCharge() ;
                    }
                    if(!processStop) {
                        ProcesssTranChargeSet();
                    }
                    if (!processStop) {
                        BackupAllFile() ;
                    }
                    if (!processStop) {
                        MoveEjFile() ;
                    }
                    if (!processStop) {
                       ClearTransection() ;
                    }
                    if (!processStop) {
                        UpdateOperationEndOfDay() ;
                        UpdateBranchEndOfDay() ;
                        Chk4.setSelected(true);
                        Msg4.setForeground(Color.BLUE);
                    }
                    if (!processStop) {
                        //Send Data To Center
                        SentDataToCenterByADSL frm = new SentDataToCenterByADSL(null, true,EndofdayDate,EndofdayDate);
                        frm.setVisible(true);
                        if (PublicVar.SendDataComplete) {
                            Chk5.setSelected(true) ;
                            Msg5.setForeground(Color.BLUE);
                            TextArea1.append("ส่งข้อมูลการขายและข้อมูลสมาชิกไปสำนักงานใหญ่ เสร็จสมบูรณ์แล้ว  \n");
                        } else {
                            TextArea1.append("ส่งข้อมูลการขายและข้อมูลสมาชิกไปสำนักงานใหญ่ Error \n กรุณาส่งใหม่ในภายหลัง... \n ");
                        }
                    }
                    //UpdateCheckbnt() ;
                    if (!processStop) {
                        JOptionPane.showMessageDialog(this, "จบการปิดยอดการขายประจำวัน วันที่ " + DateFmt.format(EndofdayDate) + " การทำงานสมบูรณ์...\n");
                    } else {
                        TextArea1.setBackground(Color.RED) ;
                        JOptionPane.showMessageDialog(this, "สิ้นสุดการปิดยอดการขายประจำวัน วันที่ " + DateFmt.format(EndofdayDate) + " มีปัญหาบางประการกรุณาตรวจสอบ...\n");
                    }
                    Sale_Date.setEnabled(true) ;
                    TextArea1.append("************ End Of Process *************\n");
                }
            }
        }

    } //end of run()
    
    public void ProcessInvoice() {
        Pro_Msg.setText("ประมวลผล 'ใบกำกับภาษีอย่างย่อ' ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from billno order by b_macno,b_refno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            int RecCnt = 0;
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++;
                    Pro_Msg.setText("ประมวลผล 'ใบกำกับภาษีอย่างย่อ' "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_invoice (s_date,b_refno,b_cupondiscamt,b_ontime,b_ondate," +
                            "b_table,b_macno,b_cashier,b_cust,b_etd,b_total,b_food,b_drink,b_product," +
                            "b_service,b_serviceamt,b_itemdiscamt,b_memdisc,b_memdiscamt,b_subdisc,b_subdiscamt," +
                            "b_subdiscbath,b_empdisc,b_empdiscamt,b_empdiscbath,b_fastdisc,b_fastdiscamt,b_fastdiscbath," +
                            "b_traindisc,b_traindiscamt,b_traindiscbath,b_prodiscamt,b_spadiscamt,b_adjamt,b_nettotal," +
                            "b_netfood,b_netdrink,b_netproduct,b_netvat,b_netnonvat,b_vat,b_payamt,b_cash,b_giftvoucher," +
                            "b_earnest,b_ton,b_crcode1,b_cardno1,b_appcode1,b_crcharge1,b_crchargeamt1,b_cramt1,b_accrcode," +
                            "b_accramt,b_accrcr,b_memcode,b_memname,b_membegin,b_memend,b_memcursum,b_void,b_voiduser," +
                            "b_voidtime,b_billcopy,b_prncnt,b_prntime1,b_prntime2,b_userendofday,b_timeendofday,b_dateendofday," +
                            "b_chkbill,b_chkbilltime,b_cashtime,b_waittime,b_crbank,b_crcardamt,b_crcurpoint,b_crsumpoint," +
                            "barcodelost,barcodelostuser,barcodelostusername,barcodelosttime,employcode,employname," +
                            "b_round,b_roundclose,b_roundclosetime,b_roundclosemac) " +
                            "values " +
                            "(?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ," +
                            "?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?," +
                            "?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("b_refno"));
                    prm.setDouble(3, rec.getDouble("b_cupondiscamt"));
                    prm.setString(4, rec.getString("b_ontime"));
                    prm.setString(5, SqlDateFmt.format(rec.getDate("b_ondate")));
                    prm.setString(6, rec.getString("b_table"));
                    prm.setString(7, rec.getString("b_macno"));
                    prm.setString(8, rec.getString("b_cashier"));
                    prm.setInt(9, rec.getInt("b_cust"));
                    prm.setString(10, rec.getString("b_etd"));
                    prm.setDouble(11, rec.getDouble("b_total"));
                    prm.setDouble(12, rec.getDouble("b_food"));
                    prm.setDouble(13, rec.getDouble("b_drink"));
                    prm.setDouble(14, rec.getDouble("b_product"));
                    prm.setDouble(15, rec.getDouble("b_service"));
                    prm.setDouble(16, rec.getDouble("b_serviceamt"));
                    prm.setDouble(17, rec.getDouble("b_itemdiscamt"));
                    prm.setString(18, rec.getString("b_memdisc"));
                    prm.setDouble(19, rec.getDouble("b_memdiscamt"));
                    prm.setString(20, rec.getString("b_subdisc"));
                    prm.setDouble(21, rec.getDouble("b_subdiscamt"));
                    prm.setDouble(22, rec.getDouble("b_subdiscbath"));
                    prm.setString(23, rec.getString("b_empdisc"));
                    prm.setDouble(24, rec.getDouble("b_empdiscamt"));
                    prm.setDouble(25, 0);
                    prm.setString(26, rec.getString("b_fastdisc"));
                    prm.setDouble(27, rec.getDouble("b_fastdiscamt"));
                    prm.setDouble(28, 0);
                    prm.setString(29, rec.getString("b_traindisc"));
                    prm.setDouble(30, rec.getDouble("b_traindiscamt"));
                    prm.setDouble(31, 0);
                    prm.setDouble(32, rec.getDouble("b_prodiscamt"));
                    prm.setDouble(33, rec.getDouble("b_spadiscamt"));
                    prm.setDouble(34, rec.getDouble("b_adjamt"));
                    prm.setDouble(35, rec.getDouble("b_nettotal"));
                    prm.setDouble(36, rec.getDouble("b_netfood"));
                    prm.setDouble(37, rec.getDouble("b_netdrink"));
                    prm.setDouble(38, rec.getDouble("b_netproduct"));
                    prm.setDouble(39, rec.getDouble("b_netvat"));
                    prm.setDouble(40, rec.getDouble("b_netnonvat"));
                    prm.setDouble(41, rec.getDouble("b_vat"));
                    prm.setDouble(42, rec.getDouble("b_payamt"));
                    prm.setDouble(43, rec.getDouble("b_cash"));
                    prm.setDouble(44, rec.getDouble("b_giftvoucher"));
                    prm.setDouble(45, rec.getDouble("b_earnest"));
                    prm.setDouble(46, rec.getDouble("b_ton"));
                    prm.setString(47, "");
                    prm.setString(48, "");
                    prm.setString(49, "");
                    prm.setDouble(50, 0);
                    prm.setDouble(51, 0);
                    prm.setDouble(52, rec.getDouble("b_cramt1"));

                    //prm.setString(47, rec.getString("b_crcode1"));
                    //prm.setString(48, rec.getString("b_cardno1"));
                    //prm.setString(49, rec.getString("b_appcode1"));
                    //prm.setDouble(50, rec.getDouble("b_crcharge1"));
                    //prm.setDouble(51, rec.getDouble("b_crchargeamt1"));
                    //prm.setDouble(52, rec.getDouble("b_cramt1"));

                    prm.setString(53, rec.getString("b_accrcode"));
                    prm.setDouble(54, rec.getDouble("b_accramt"));
                    prm.setInt(55, rec.getInt("b_accrcr"));
                    prm.setString(56, rec.getString("b_memcode"));
                    prm.setString(57, rec.getString("b_memname"));
                    prm.setString(58, SqlDateFmt.format(date)); //b_membegin

                    prm.setString(59, SqlDateFmt.format(date)); //b_memend

                    prm.setDouble(60, rec.getDouble("b_memcursum"));
                    prm.setString(61, rec.getString("b_void"));
                    prm.setString(62, rec.getString("b_voiduser"));
                    prm.setString(63, rec.getString("b_voidtime"));
                    prm.setInt(64, rec.getInt("b_billcopy"));
                    prm.setInt(65, rec.getInt("b_prncnt"));
                    prm.setString(66, rec.getString("b_prntime1"));
                    prm.setString(67, rec.getString("b_prntime2"));
                    prm.setString(68, ""); //User

                    prm.setString(69, TimeFmt.format(date));
                    prm.setString(70, SqlDateFmt.format(date));
                    prm.setString(71, rec.getString("b_chkbill"));
                    prm.setString(72, TimeFmt.format(rec.getTime("b_chkbilltime")));
                    prm.setString(73, TimeFmt.format(rec.getTime("b_cashtime")));
                    prm.setInt(74, 0);  //CashTime-ChkbillTime

                    prm.setString(75, rec.getString("b_crbank"));
                    prm.setDouble(76, rec.getDouble("b_crcardamt"));
                    prm.setDouble(77, rec.getDouble("b_crcurpoint"));
                    prm.setDouble(78, rec.getDouble("b_crsumpoint"));

                    prm.setString(79, rec.getString("barcodelost"));
                    prm.setString(80, rec.getString("barcodelostuser"));
                    prm.setString(81, rec.getString("barcodelostusername"));
                    prm.setString(82, rec.getString("barcodelosttime"));
                    prm.setString(83, rec.getString("employcode"));
                    prm.setString(84, rec.getString("employname"));
                    prm.setInt(85, rec.getInt("b_round"));
                    prm.setString(86, rec.getString("b_roundclose"));
                    prm.setString(87, rec.getString("b_roundclosetime"));
                    prm.setString(88, rec.getString("b_roundclosemac"));

                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'ใบกำกับภาษีอย่างย่อ' "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'ใบกำกับภาษีอย่างย่อ' "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    public void ProcessCharge() {
        Pro_Msg.setText("ประมวลผล 'รายการเบิกสินค้า (Charge)' ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from billnocharge order by b_refno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++;
                    Pro_Msg.setText("ประมวลผล 'รายการเบิกสินค้า (Charge)' "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertBillNo = "insert into s_charge "
                            + "(s_date,b_refno,b_ondate,b_ontime,b_table,b_macno,b_cashier,b_cust,b_total,b_food,"
                            + "b_drink,b_product,b_chargecode,b_chargename,b_chargegroup,b_chargetype,b_chargeremark," +
                            "b_void,b_voiduser,b_voidtime) "
                            + " values (?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,?)" ;
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertBillNo);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("b_refno"));
                    prm.setString(3, SqlDateFmt.format(rec.getDate("b_ondate")));
                    prm.setString(4, rec.getString("b_ontime"));
                    prm.setString(5, rec.getString("b_table"));
                    prm.setString(6, rec.getString("b_macno"));
                    prm.setString(7, rec.getString("b_cashier"));
                    prm.setInt(8, rec.getInt("b_cust"));
                    prm.setDouble(9, rec.getDouble("b_total"));
                    prm.setDouble(10, rec.getDouble("b_food"));
                    prm.setDouble(11, rec.getDouble("b_drink"));
                    prm.setDouble(12, rec.getDouble("b_product"));
                    prm.setString(13, rec.getString("b_chargecode"));
                    prm.setString(14, rec.getString("b_chargename"));
                    prm.setString(15, rec.getString("b_chargegroup"));
                    prm.setInt(16, rec.getInt("b_chargetype"));
                    prm.setString(17, rec.getString("b_chargeremark"));
                    prm.setString(18, rec.getString("b_void"));
                    prm.setString(19, rec.getString("b_voiduser"));
                    prm.setString(20, rec.getString("b_voidtime"));
                    prm.executeUpdate();
                    prm.close();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'รายการเบิกสินค้า (Charge)' "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'รายการเบิกสินค้า (Charge)' "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }
     public void ProcessCoupon() {
        Pro_Msg.setText("ประมวลผล 'รายการส่วนลดคูปอง ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_cupon";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec=rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล 'รายการส่วนลดคูปอง "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_cupon (s_date,ref_no,macno,cashier,cucode,cuquan,cuamt,refund,sms_code,m_code) " +
                            "values (?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("r_refno"));
                    prm.setString(3, rec.getString("terminal"));
                    prm.setString(4, rec.getString("cashier"));
                    prm.setString(5, rec.getString("cucode"));
                    prm.setInt(6, rec.getInt("cuquan"));
                    prm.setDouble(7, rec.getDouble("cuamt"));
                    prm.setString(8, rec.getString("refund"));
                    prm.setString(9, rec.getString("sms_code"));
                    prm.setString(10, rec.getString("m_code"));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'รายการส่วนลดคูปอง "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'รายการส่วนลดคูปอง "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
     public void ProcessCredit() {
        Pro_Msg.setText("ประมวลผล 'รายการบัตรเครดิต ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_refno,b_macno,b_cashier,b_crcode1,DECODE(b_crcardno1,'snpfood') as CardNo,b_appcode1,b_crcharge1,b_crchargeamt1," +
                    "b_cramt1,b_crcurpoint,b_crsumpoint,b_crpurseamt,b_crcardamt,b_crbank from billcredit";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec=rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล 'รายการบัตรเครดิต "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_credit (s_date,b_refno,b_macno,b_cashier,b_crcode1,b_crcardno1," +
                            "b_appcode1,b_crcharge1,b_crchargeamt1,b_cramt1,b_crbank,b_crcardamt,b_crcurpoint," +
                            "b_crsumpoint,b_crpurseamt) " +
                            "values (?,?,?,?,?,ENCODE(?,'snpfood'),?,?,?,?, ?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("b_refno"));
                    prm.setString(3, rec.getString("b_macno"));
                    prm.setString(4, rec.getString("b_cashier"));
                    prm.setString(5, rec.getString("b_crcode1"));
                    prm.setString(6, rec.getString("CardNo")) ;// .Unicode2ASCII(rec.getString("b_crcardno1")));
                    prm.setString(7, rec.getString("b_appcode1"));
                    prm.setDouble(8, rec.getDouble("b_crcharge1"));
                    prm.setDouble(9, rec.getDouble("b_crchargeamt1"));
                    prm.setDouble(10, rec.getDouble("b_cramt1"));
                    prm.setString(11, rec.getString("b_crbank"));
                    prm.setDouble(12, rec.getDouble("b_crcardamt"));
                    prm.setDouble(13, rec.getDouble("b_crcurpoint"));
                    prm.setDouble(14, rec.getDouble("b_crsumpoint"));
                    prm.setDouble(15, rec.getDouble("b_crpurseamt"));

                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'รายการบัตรเครดิต "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'รายการบัตรเครดิต "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void Processs_tran() {
        Pro_Msg.setText("ประมวลผล 'รายการ Transection การขาย ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_sale";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec=rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล 'รายการ Transection การขาย "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_tran "
                            + "(s_date,r_index,r_refno,r_table,r_date,r_time,macno,cashier,r_emp,r_plucode,r_pname,r_unit," + //11
                            "r_group,r_status,r_normal,r_discount,r_service,r_set,r_stock,r_vat,r_type,r_etd,"
                            + "r_quan,r_price,r_total,r_prtype,r_prchktype,r_prcode,r_prdisc,r_prquan,r_prbath,"
                            + "r_pramt,r_pradj,r_discbath,r_prsubtype,r_prsubcode,r_prsubdisc,r_prsubquan,r_prsubbath,"
                            + "r_prsubamt,r_prsubadj,r_prcutype,r_prcucode,r_prcuquan,r_prcudisc,r_prcuamt,r_prcubath,"
                            + "r_prcuadj,r_nettotal,r_redule,r_kic,r_kicprint,r_void,r_voiduser,r_voidtime,r_prtype2,"
                            + "r_prchktype2,r_prcode2,r_prdisc2,r_prquan2,r_prbath2,r_pramt2,r_pradj2,holdtable,holdcashier,holdmacno,holddate,holdtime,r_refund) "
                            + " values (?,?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?,?,? )";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("r_index"));
                    prm.setString(3, rec.getString("r_refno"));
                    prm.setString(4, rec.getString("r_table"));
                    prm.setString(5, SqlDateFmt.format(rec.getDate("r_date")));
                    prm.setString(6, rec.getString("r_time"));
                    prm.setString(7, rec.getString("macno"));
                    prm.setString(8, rec.getString("cashier"));
                    prm.setString(9, rec.getString("r_emp"));
                    prm.setString(10, rec.getString("r_plucode"));
                    prm.setString(11, rec.getString("r_pname"));
                    prm.setString(12, rec.getString("r_unit"));
                    prm.setString(13, rec.getString("r_group"));
                    prm.setString(14, rec.getString("r_status"));
                    prm.setString(15, rec.getString("r_normal"));
                    prm.setString(16, rec.getString("r_discount"));
                    prm.setString(17, rec.getString("r_service"));
                    prm.setString(18, rec.getString("r_set"));
                    prm.setString(19, rec.getString("r_stock"));
                    prm.setString(20, rec.getString("r_vat"));
                    prm.setString(21, rec.getString("r_type"));
                    prm.setString(22, rec.getString("r_etd"));
                    prm.setDouble(23, rec.getDouble("r_quan"));
                    prm.setDouble(24, rec.getDouble("r_price"));
                    prm.setDouble(25, rec.getDouble("r_total"));
                    prm.setString(26, rec.getString("r_prtype"));
                    prm.setString(27, rec.getString("r_prchktype"));
                    prm.setString(28, rec.getString("r_prcode"));
                    prm.setDouble(29, rec.getDouble("r_prdisc"));
                    prm.setDouble(30, rec.getDouble("r_prquan"));
                    prm.setDouble(31, rec.getDouble("r_prbath"));
                    prm.setDouble(32, rec.getDouble("r_pramt"));
                    prm.setDouble(33, rec.getDouble("r_pradj"));
                    prm.setDouble(34, rec.getDouble("r_discbath"));
                    prm.setString(35, rec.getString("r_prsubtype"));
                    prm.setString(36, rec.getString("r_prsubcode"));
                    prm.setDouble(37, rec.getDouble("r_prsubdisc"));
                    prm.setDouble(38, rec.getDouble("r_prsubquan"));
                    prm.setDouble(39, rec.getDouble("r_prsubbath"));

                    prm.setDouble(40, rec.getDouble("r_prsubamt"));
                    prm.setDouble(41, rec.getDouble("r_prsubadj"));
                    prm.setString(42, rec.getString("r_prcutype"));
                    prm.setString(43, rec.getString("r_prcucode"));
                    prm.setDouble(44, rec.getDouble("r_prcuquan"));
                    prm.setDouble(45, rec.getDouble("r_prcudisc"));
                    prm.setDouble(46, rec.getDouble("r_prcuamt"));
                    prm.setDouble(47, rec.getDouble("r_prcubath"));
                    prm.setDouble(48, rec.getDouble("r_prcuadj"));
                    prm.setDouble(49, rec.getDouble("r_nettotal"));
                    prm.setDouble(50, rec.getDouble("r_redule"));
                    prm.setString(51, rec.getString("r_kic"));
                    prm.setString(52, rec.getString("r_kicprint"));
                    prm.setString(53, rec.getString("r_void"));
                    prm.setString(54, rec.getString("r_voiduser"));
                    prm.setString(55, rec.getString("r_voidtime"));
                    prm.setString(56, rec.getString("r_prtype2"));
                    prm.setString(57, rec.getString("r_prchktype2"));
                    prm.setString(58, rec.getString("r_prcode2"));
                    prm.setDouble(59, rec.getDouble("r_prdisc2"));
                    prm.setDouble(60, rec.getDouble("r_prquan2"));
                    prm.setDouble(61, rec.getDouble("r_prbath2"));
                    prm.setDouble(62, rec.getDouble("r_pramt2"));
                    prm.setDouble(63, rec.getDouble("r_pradj2"));
                    prm.setString(64, rec.getString("holdtable"));
                    prm.setString(65, rec.getString("holdcashier"));
                    prm.setString(66, rec.getString("holdmacno"));
                    prm.setDate(67, rec.getDate("holddate"));
                    prm.setString(68, rec.getString("holdtime"));
                    prm.setString(69, rec.getString("r_refund")) ;
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'รายการ Transection การขาย "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'Transection การขาย "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    public void Processs_tranSet() {
        Pro_Msg.setText("ประมวลผล 'รายการ Transection การขาย (Set) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_saleset";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec=rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล 'รายการ Transection การขาย Set "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_transet (r_refno,r_macno,r_index,r_table,r_plucode,r_psubcode,r_setqty,r_qty,r_void,r_refund,s_date) "
                                + "values (?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, rec.getString("r_refno"));
                    prm.setString(2, rec.getString("r_macno"));
                    prm.setString(3, rec.getString("r_index"));
                    prm.setString(4, rec.getString("r_table"));
                    prm.setString(5, rec.getString("r_plucode"));
                    prm.setString(6, rec.getString("r_psubcode"));
                    prm.setDouble(7, rec.getDouble("r_setqty"));
                    prm.setDouble(8, rec.getDouble("r_qty"));
                    prm.setString(9, rec.getString("r_void"));
                    prm.setString(10, rec.getString("r_refund"));
                    prm.setString(11, SqlDateFmt.format(EndofdayDate));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'รายการ Transection การขาย(Set) "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'Transection การขาย (Set) "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    public void ProcessTranCharge() {
        Pro_Msg.setText("ประมวลผล 'รายการ Transection การเบิกสินค้า (Charge) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_charge";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec=rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล 'รายการ Transection การเบิกสินค้า (Charge) "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertT_Sale = "insert into s_trancharge "
                            + "(s_date,r_index,r_refno,r_table,r_date,r_time,r_macno,r_cashier,r_emp,r_plucode,r_pname,r_unit," + //11
                            "r_group,r_etd,r_quan,r_netprice,r_nettotal,"
                            + "r_void,r_voiduser,r_voidtime,r_grossprice,r_grosstotal,r_pricedown,r_stock,r_set,r_refund)"
                            + " values (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm2 = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertT_Sale);
                    prm2.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm2.setString(2, rec.getString("r_index"));
                    prm2.setString(3, rec.getString("r_refno"));
                    prm2.setString(4, rec.getString("r_table"));
                    prm2.setString(5, SqlDateFmt.format(rec.getDate("r_date")));
                    prm2.setString(6, rec.getString("r_time"));
                    prm2.setString(7, rec.getString("r_macno"));
                    prm2.setString(8, rec.getString("r_cashier"));
                    prm2.setString(9, rec.getString("r_emp"));
                    prm2.setString(10, rec.getString("r_plucode"));
                    prm2.setString(11, rec.getString("r_pname"));
                    prm2.setString(12, rec.getString("r_unit"));
                    prm2.setString(13, rec.getString("r_group"));
                    prm2.setString(14, rec.getString("r_etd"));

                    prm2.setDouble(15, rec.getDouble("r_quan"));
                    prm2.setDouble(16, rec.getDouble("r_netprice"));
                    prm2.setDouble(17, rec.getDouble("r_nettotal"));

                    prm2.setString(18, rec.getString("r_void"));
                    prm2.setString(19, rec.getString("r_voiduser"));
                    prm2.setString(20, rec.getString("r_voidtime"));
                    prm2.setDouble(21, rec.getDouble("r_grossprice") );
                    prm2.setDouble(22, rec.getDouble("r_grosstotal"));
                    prm2.setDouble(23, rec.getDouble("r_pricedown"));
                    prm2.setString(24, rec.getString("r_stock"));
                    prm2.setString(25, rec.getString("r_set"));
                    prm2.setString(26, rec.getString("r_refund"));

                    prm2.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'รายการ Transection การเบิกสินค้า (Charge) "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'Transection การเบิกสินค้า (Charge) "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    public void ProcesssTranChargeSet() {
        Pro_Msg.setText("ประมวลผล 'รายการ Transection การเบิกสินค้า (Set) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_chargeset";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec=rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล 'รายการ Transection การเบิกสินค้า Set "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_tranchargeset (r_refno,r_macno,r_index,r_table,r_plucode,r_psubcode,r_setqty,r_qty,r_void,r_refund,s_date) "
                                + "values (?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    
                    prm.setString(1, rec.getString("r_refno"));
                    prm.setString(2, rec.getString("r_macno"));
                    prm.setString(3, rec.getString("r_index"));
                    prm.setString(4, rec.getString("r_table"));
                    prm.setString(5, rec.getString("r_plucode"));
                    prm.setString(6, rec.getString("r_psubcode"));
                    prm.setDouble(7, rec.getDouble("r_setqty"));
                    prm.setDouble(8, rec.getDouble("r_qty"));
                    prm.setString(9, rec.getString("r_void"));
                    prm.setString(10, rec.getString("r_refund"));
                    prm.setString(11, SqlDateFmt.format(EndofdayDate));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'รายการ Transection การเบิกสินค้า(Set) "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'Transection การเบิกสินค้า (Set) "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessPaidIO() {
        Pro_Msg.setText("ประมวลผล Paid In/Out ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from paidiofile";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล 'Paid In/Out' "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    String XTerminal = rec.getString("terminal");
                    String XCashier = rec.getString("cashier");
                    String XType = rec.getString("flage");
                    String XIndex = XTerminal + XCashier + XType;
                    int XQuan = 1;
                    Double XAmt = 0.0;
                    if (XType.equals("I")) {
                        XAmt = rec.getDouble("paidinamt");
                    } else {
                        XAmt = rec.getDouble("paidoutamt");
                    }
                    if (SeekS_PaidIO(XIndex)) {
                        Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                        String InsertQuery = "update s_paidio set quan=quan+?,paidamt=paidamt+? " +
                                "where pindex=?";
                        PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                        prm.setInt(1, XQuan);
                        prm.setDouble(2, XAmt);
                        prm.setString(3, XIndex);
                        prm.executeUpdate();
                        stmt2.close();
                    } else {
                        Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                        String InsertQuery = "insert into s_paidio (s_date,pindex,terminal,cashier,flage,quan,paidamt) " +
                                "values (?,?,?,?,?,?,?)";
                        PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                        prm.setString(1, SqlDateFmt.format(EndofdayDate));
                        prm.setString(2, XIndex);
                        prm.setString(3, XTerminal);
                        prm.setString(4, XCashier);
                        prm.setString(5, XType);
                        prm.setInt(6, XQuan);
                        prm.setDouble(7, XAmt);
                        prm.executeUpdate();
                        stmt2.close();
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'Paid In/Out' "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'Paid In/Out' "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessPlu_Dept() {
        Pro_Msg.setText("ประมวลผล 'ยอดการขายตามรหัสสินค้า (PLU & DEPT' ");
        String TempCode = "";
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_sale where (r_refund<>'V') and (r_void<>'V') order by r_plucode ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                TempCode = rec.getString("r_plucode");
                do {
                    CurRec++; 
                    Pro_Msg.setText("ประมวลผล 'ยอดการขายตามรหัสสินค้า (PLU & DEPT' "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    String XCode = rec.getString("r_plucode");
                    String XDept = rec.getString("r_group");
                    String XSup = "";
                    String XType = rec.getString("r_etd");
                    Double XQuan = rec.getDouble("r_quan");
                    Double XTotal = rec.getDouble("r_total");
                    Double XNet = rec.getDouble("r_nettotal");
                    Double EQty = 0.0;
                    Double EAmt = 0.0;
                    Double EDisc = 0.0;
                    Double ENet = 0.0;
                    Double TQty = 0.0;
                    Double TAmt = 0.0;
                    Double TDisc = 0.0;
                    Double TNet = 0.0;
                    Double DQty = 0.0;
                    Double DAmt = 0.0;
                    Double DDisc = 0.0;
                    Double DNet = 0.0;
                    Double PQty = 0.0;
                    Double PAmt = 0.0;
                    Double PDisc = 0.0;
                    Double PNet = 0.0;
                    Double WQty = 0.0;
                    Double WAmt = 0.0;
                    Double WDisc = 0.0;
                    Double WNet = 0.0;
                    Double SQty = 0.0;
                    Double SAmt = 0.0;
                    Double SDisc = 0.0;
                    Double SNet = 0.0;
                    if (XType.equals("E")) {
                        EQty = XQuan;
                        EAmt = XTotal;
                        ENet = XNet;
                        EDisc = EAmt - ENet;
                    } else if (XType.equals("T")) {
                        TQty = XQuan;
                        TAmt = XTotal;
                        TNet = XNet;
                        TDisc = TAmt - TNet;
                    } else if (XType.equals("D")) {
                        DQty = XQuan;
                        DAmt = XTotal;
                        DNet = XNet;
                        DDisc = DAmt - DNet;
                    } else if (XType.equals("P")) {
                        PQty = XQuan;
                        PAmt = XTotal;
                        PNet = XNet;
                        PDisc = PAmt - PNet;
                    } else if (XType.equals("W")) {
                        WQty = XQuan;
                        WAmt = XTotal;
                        WNet = XNet;
                        WDisc = WAmt - WNet;
                    } else {
                        XType = "E";
                        EQty = XQuan;
                        EAmt = XTotal;
                        ENet = XNet;
                        EDisc = EAmt - ENet;
                    }
                    SQty = XQuan;
                    SAmt = XTotal;
                    SNet = XNet;
                    SDisc = SAmt - SNet;
                    if (SeekS_Sale(EndofdayDate, XCode)) {
                        Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                        String InsertQuery = "update s_sale set s_dept=?,s_supp=?,e_qty=e_qty+?,e_amt=e_amt+?,e_disc=e_disc+?,e_net=e_net+?," +
                                "t_qty=t_qty+?,t_amt=t_amt+?,t_disc=t_disc+?,t_net=t_net+?,d_qty=d_qty+?,d_amt=d_amt+?,d_disc=d_disc+?,d_net=d_net+?,p_qty=p_qty+?,p_amt=p_amt+?," +
                                "p_disc=p_disc+?,p_net=p_net+?,w_qty=w_qty+?,w_amt=w_amt+?,w_disc=w_disc+?,w_net=w_net+?,s_qty=s_qty+?,s_amt=s_amt+?,s_disc=s_disc+?,s_net=s_net+? " +
                                "where (s_date=?) and (s_pcode=?)";
                        PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                        prm.setString(1, XDept);
                        prm.setString(2, XSup);
                        prm.setDouble(3, EQty);
                        prm.setDouble(4, EAmt);
                        prm.setDouble(5, EDisc);
                        prm.setDouble(6, ENet);
                        prm.setDouble(7, TQty);
                        prm.setDouble(8, TAmt);
                        prm.setDouble(9, TDisc);
                        prm.setDouble(10, TNet);
                        prm.setDouble(11, DQty);
                        prm.setDouble(12, DAmt);
                        prm.setDouble(13, DDisc);
                        prm.setDouble(14, DNet);
                        prm.setDouble(15, PQty);
                        prm.setDouble(16, PAmt);
                        prm.setDouble(17, PDisc);
                        prm.setDouble(18, PNet);
                        prm.setDouble(19, WQty);
                        prm.setDouble(20, WAmt);
                        prm.setDouble(21, WDisc);
                        prm.setDouble(22, WNet);
                        prm.setDouble(23, SQty);
                        prm.setDouble(24, SAmt);
                        prm.setDouble(25, SDisc);
                        prm.setDouble(26, SNet);
                        prm.setString(27, SqlDateFmt.format(EndofdayDate));
                        prm.setString(28, XCode);
                        prm.executeUpdate();
                        stmt2.close();
                    } else {
                        Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                        String InsertQuery = "insert into s_sale (s_dept,s_supp,e_qty,e_amt,e_disc,e_net," +
                                "t_qty,t_amt,t_disc,t_net,d_qty,d_amt,d_disc,d_net,p_qty,p_amt," +
                                "p_disc,p_net,w_qty,w_amt,w_disc,w_net,s_qty,s_amt,s_disc,s_net," +
                                "s_date,s_pcode) values (?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?) ";
                        PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                        prm.setString(1, SqlDateFmt.format(EndofdayDate));
                        prm.setString(1, XDept);
                        prm.setString(2, XSup);
                        prm.setDouble(3, EQty);
                        prm.setDouble(4, EAmt);
                        prm.setDouble(5, EDisc);
                        prm.setDouble(6, ENet);
                        prm.setDouble(7, TQty);
                        prm.setDouble(8, TAmt);
                        prm.setDouble(9, TDisc);
                        prm.setDouble(10, TNet);
                        prm.setDouble(11, DQty);
                        prm.setDouble(12, DAmt);
                        prm.setDouble(13, DDisc);
                        prm.setDouble(14, DNet);
                        prm.setDouble(15, PQty);
                        prm.setDouble(16, PAmt);
                        prm.setDouble(17, PDisc);
                        prm.setDouble(18, PNet);
                        prm.setDouble(19, WQty);
                        prm.setDouble(20, WAmt);
                        prm.setDouble(21, WDisc);
                        prm.setDouble(22, WNet);
                        prm.setDouble(23, SQty);
                        prm.setDouble(24, SAmt);
                        prm.setDouble(25, SDisc);
                        prm.setDouble(26, SNet);
                        prm.setString(27, SqlDateFmt.format(EndofdayDate));
                        prm.setString(28, XCode);
                        prm.executeUpdate();
                        stmt2.close();
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'ยอดการขายตามรหัสสินค้า "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'ยอดการขายตามรหัสสินค้า "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessStock() {
        Pro_Msg.setText("ประมวลผล 'การตัดสต็อกสินค้า' ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from s_sale where s_date='" + SqlDateFmt.format(EndofdayDate) + "' ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล 'การตัดสต็อกสินค้า' "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    String TempCode = rec.getString("s_pcode");
                    Double TempQty = rec.getDouble("s_qty");
                    Double TempAmt = rec.getDouble("s_amt");
                    String T_Rem = "SAL";
                    Boolean StkProc = false;
                    Boolean SetProc = false;
                    Statement stmt3 = (Statement) MySQLConnect.con.createStatement();
                    String LoadTableFile = "select *from product where pcode='" + TempCode + "'";
                    ResultSet rec3 = stmt3.executeQuery(LoadTableFile);
                    rec3.first();
                    if (rec3.getRow() == 0) {
                    } else {
                        if (rec3.getString("pstock").equals("Y")) {
                            StkProc = true;
                        } else {
                            StkProc = false;
                        }
                        if (rec3.getString("pset").equals("Y")) {
                            SetProc = true;
                        } else {
                            SetProc = false;
                        }
                    }
                    rec3.close();
                    stmt3.close();
                    if (StkProc) {
                        Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                        String InsertQuery = "insert into stcard (s_date,s_no,s_stk,s_pcode,s_que,s_in,s_incost," +
                                "s_out,s_outcost,s_rem,s_user,s_entrydate,s_entrytime) " +
                                "values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                        prm.setString(1, SqlDateFmt.format(EndofdayDate));
                        prm.setString(2, "Sale");
                        prm.setString(3, T_Stk);
                        prm.setString(4, TempCode);
                        prm.setInt(5, 1);
                        prm.setDouble(6, 0);
                        prm.setDouble(7, 0);
                        prm.setDouble(8, TempQty);
                        prm.setDouble(9, TempAmt);
                        prm.setString(10, T_Rem);
                        prm.setString(11, ""); //User

                        prm.setString(12, SqlDateFmt.format(date));
                        prm.setString(13, TimeFmt.format(date));
                        prm.executeUpdate();
                        stmt2.close();
                        int TempAct = GetActionMon(EndofdayDate);
                        if (!SeekStkFile(TempCode, T_Stk)) {
                            Statement stmt4 = (Statement) MySQLConnect.con.createStatement();
                            String InsertQuery4 = "insert into stkfile (bpcode,bstk) values (?,?)";
                            PreparedStatement prm4 = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery4);
                            prm4.setString(1, TempCode);
                            prm4.setString(2, T_Stk);
                            prm4.executeUpdate();
                            stmt4.close();
                        }
                        for (int i = TempAct; i <= 24; i++) {
                            String T_Mon = "bqty" + String.valueOf(i);
                            Statement stmt4 = (Statement) MySQLConnect.con.createStatement();
                            String InsertQuery4 = "update stkfile set " + T_Mon + "=" + T_Mon + "-? where (bpcode=?) and (bstk=?)";
                            PreparedStatement prm4 = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery4);
                            prm4.setDouble(1, TempQty);
                            prm4.setString(2, TempCode);
                            prm4.setString(3, T_Stk);
                            prm4.executeUpdate();
                            stmt4.close();
                        }
                    }
                    if (SetProc) {
                        ProcessSetUpdateStk(TempCode, TempQty);
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล 'การตัดสต็อกสินค้า' "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล 'การตัดสต็อกสินค้า' "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
            
        }
    }

    public void ProcessSetUpdateStk(String XCode, Double XQty) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from pset where pcode='" + XCode + "'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    String TempCode = rec.getString("psubcode");
                    Double TempQty = rec.getDouble("psubqty") * XQty;
                    Double TempAmt = 0.0;
                    String T_Rem = "SAL";
                    Boolean StkProc = false;
                    Statement stmt3 = (Statement) MySQLConnect.con.createStatement();
                    String LoadTableFile = "select *from product where pcode='" + TempCode + "'";
                    ResultSet rec3 = stmt3.executeQuery(LoadTableFile);
                    rec3.first();
                    if (rec3.getRow() == 0) {
                    } else {
                        if (rec3.getString("pstock").equals("Y")) {
                            StkProc = true;
                        } else {
                            StkProc = false;
                        }
                        TempAmt = rec3.getDouble("pprice11") * XQty;
                    }
                    rec3.close();
                    stmt3.close();
                    if (StkProc) {
                        Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                        String InsertQuery = "insert into stcard (s_date,s_no,s_stk,s_pcode,s_que,s_in,s_incost," +
                                "s_out,s_outcost,s_rem,s_user,s_entrydate,s_entrytime) " +
                                "values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                        prm.setString(1, SqlDateFmt.format(EndofdayDate));
                        prm.setString(2, "@" + XCode);
                        prm.setString(3, T_Stk);
                        prm.setString(4, TempCode);
                        prm.setInt(5, 1);
                        prm.setDouble(6, 0);
                        prm.setDouble(7, 0);
                        prm.setDouble(8, TempQty);
                        prm.setDouble(9, TempAmt);
                        prm.setString(10, T_Rem);
                        prm.setString(11, ""); //User

                        prm.setString(12, SqlDateFmt.format(date));
                        prm.setString(13, TimeFmt.format(date));
                        prm.executeUpdate();
                        stmt2.close();
                        int TempAct = GetActionMon(EndofdayDate);
                        if (!SeekStkFile(TempCode, T_Stk)) {
                            Statement stmt4 = (Statement) MySQLConnect.con.createStatement();
                            String InsertQuery4 = "insert into stkfile (bpcode,bstk) values (?,?)";
                            PreparedStatement prm4 = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery4);
                            prm4.setString(1, TempCode);
                            prm4.setString(2, T_Stk);
                            prm4.executeUpdate();
                            stmt4.close();
                        }
                        for (int i = TempAct; i <= 24; i++) {
                            String T_Mon = "bqty" + String.valueOf(i);
                            Statement stmt4 = (Statement) MySQLConnect.con.createStatement();
                            String InsertQuery4 = "update stkfile set " + T_Mon + "=" + T_Mon + "-? where (bpcode=?) and (bstk=?)";
                            PreparedStatement prm4 = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery4);
                            prm4.setDouble(1, TempQty);
                            prm4.setString(2, TempCode);
                            prm4.setString(3, T_Stk);
                            prm4.executeUpdate();
                            stmt4.close();
                        }
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessVoid() {
        Pro_Msg.setText("ประมวลผล รายการยกเลิกการขาย (VOID) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_sale where r_void='V'";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec=rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล รายการยกเลิกการขาย (VOID) "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_void (s_date,ref_no,voiduser,voidtime,pindex," +
                            "macno,cashier,time,vtable,date,pcode,qty,amt) " +
                            "values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("r_refno"));
                    prm.setString(3, rec.getString("r_voiduser"));
                    prm.setString(4, rec.getString("r_voidtime"));
                    prm.setString(5, rec.getString("r_index"));
                    prm.setString(6, rec.getString("macno"));
                    prm.setString(7, rec.getString("cashier"));
                    prm.setString(8, rec.getString("r_time"));
                    prm.setString(9, rec.getString("r_table"));
                    prm.setString(10, SqlDateFmt.format(rec.getDate("r_date")));
                    prm.setString(11, rec.getString("r_plucode"));
                    prm.setDouble(12, rec.getDouble("r_quan"));
                    prm.setDouble(13, rec.getDouble("r_total"));
                    prm.executeUpdate();
                    stmt2.close();

                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล รายการยกเลิกการขาย  "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล รายการยกเลิกการขาย  "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessAR() {
        Pro_Msg.setText("ประมวลผล รายการรับชำระจากลูกหนี้ภายนอก ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from billar";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล รายการรับชำระจากลูกหนี้ภายนอก "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_billar (s_date,ref_no,ondate,stotal,cash,cupon," +
                            "credit,terminal,cashier,fat,uservoid) " +
                            "values (?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("ref_no"));
                    prm.setString(3, SqlDateFmt.format(rec.getDate("ondate")));
                    prm.setDouble(4, rec.getDouble("stotal"));
                    prm.setDouble(5, rec.getDouble("cash"));
                    prm.setDouble(6, rec.getDouble("cupon"));
                    prm.setDouble(7, rec.getDouble("credit"));
                    prm.setString(8, rec.getString("terminal"));
                    prm.setString(9, rec.getString("cashier"));
                    prm.setString(10, rec.getString("fat"));
                    prm.setString(11, rec.getString("uservoid"));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            
        } catch (SQLException e) {
            processStop = true ;
            
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_ar";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_tar (s_date,ref_no,arcode,billno,billdate,amount," +
                            "fat,terminal,cashier) " +
                            "values (?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("ref_no"));
                    prm.setString(3, rec.getString("arcode"));
                    prm.setString(4, rec.getString("billno"));
                    prm.setString(5, SqlDateFmt.format(rec.getDate("billdate")));
                    prm.setDouble(6, rec.getDouble("amount"));
                    prm.setString(7, rec.getString("fat"));
                    prm.setString(8, rec.getString("terminal"));
                    prm.setString(9, rec.getString("cashier"));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select ref_no,crcode,crcnt,cramt,fat,DECODE(crid,'snpfood') as CardNo,crapp,terminal,cashier from t_crar";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_tcrar (s_date,ref_no,crcode,crcnt,cramt,fat," +
                            "crid,crapp,terminal,cashier) " +
                            "values (?,?,?,?,?,?,ENCODE(?,'snpfood'),?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("ref_no"));
                    prm.setString(3, rec.getString("crcode"));
                    prm.setDouble(4, rec.getDouble("crcnt"));
                    prm.setDouble(5, rec.getDouble("cramt"));
                    prm.setString(6, rec.getString("fat"));
                    prm.setString(7, rec.getString("CardNo"));
                    prm.setString(8, rec.getString("crapp"));
                    prm.setString(9, rec.getString("terminal"));
                    prm.setString(10, rec.getString("cashier"));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        if (!processStop) {
           TextArea1.append("ประมวลผล รายการรับชำระจากลูกหนี้ภายนอก "+"OK"+" ("+IntFmt.format(totalRec)+")\n");  
        } else {
           TextArea1.append("ประมวลผล รายการรับชำระจากลูกหนี้ภายนอก "+"Error\n"); 
        }
    }

    public void ProcessGiftVoucher() {
        Pro_Msg.setText("ประมวลผล รายการบัตรกำนัล/บัตรของขวัญ (Gift Voucher) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_gift ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล รายการบัตรกำนัล/บัตรของขวัญ (Gift Voucher) "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_gift (s_date,ondate,macno,cashier,refno,giftbarcode," +
                            "gifttype,giftprice,giftmodel,giftlot,giftexp,giftcode,giftno,giftamt) " +
                            "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, SqlDateFmt.format(rec.getDate("ondate")));
                    prm.setString(3, rec.getString("macno"));
                    prm.setString(4, rec.getString("cashier"));
                    prm.setString(5, rec.getString("refno"));
                    prm.setString(6, rec.getString("giftbarcode"));
                    prm.setString(7, rec.getString("gifttype"));
                    prm.setString(8, rec.getString("giftprice"));
                    prm.setString(9, rec.getString("giftmodel"));
                    prm.setString(10, rec.getString("giftlot"));
                    prm.setString(11, rec.getString("giftexp"));
                    prm.setString(12, rec.getString("giftcode"));
                    prm.setString(13, rec.getString("giftno"));
                    prm.setDouble(14, rec.getDouble("giftamt"));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล รายการบัตรกำนัล/บัตรของขวัญ "+"OK"+" ("+IntFmt.format(totalRec)+")\n"); 
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล รายการบัตรกำนัล/บัตรของขวัญ "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessPromotion() {
        Pro_Msg.setText("ประมวลผล รายการส่วนลดโปรโมชั่น (Promotion) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from t_promotion ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล รายการส่วนลดโปรโมชั่น (Promotion) "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_promotion (s_date,r_refno,terminal,cashier,prcode," +
                            "prtype,pcode,pqty,prtotalamt,pramt) " +
                            "values (?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("r_refno"));
                    prm.setString(3, rec.getString("terminal"));
                    prm.setString(4, rec.getString("cashier"));
                    prm.setString(5, rec.getString("prcode"));
                    prm.setString(6, rec.getString("prtype"));
                    prm.setString(7, rec.getString("pcode"));
                    prm.setDouble(8, rec.getDouble("pqty"));
                    prm.setDouble(9, rec.getDouble("prtotalamt"));
                    prm.setDouble(10, rec.getDouble("pramt"));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล รายการส่วนลดโปรโมชั่น "+"OK"+" ("+IntFmt.format(totalRec)+")\n"); 
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล รายการส่วนลดโปรโมชั่น "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessTerminal() {
        Pro_Msg.setText("ประมวลผล รายการขายตามเครื่อง Terminal ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from billno order by b_macno ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                CurRec++ ;
                Pro_Msg.setText("ประมวลผล รายการขายตามเครื่อง Terminal "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                FinalcialRec TranRec = new FinalcialRec();
                TranRec.ClearRec();
                String TempMacNo = rec.getString("b_macno");
                TranRec.StBill = rec.getString("b_refno");
                do {
                    if (!TempMacNo.equals(rec.getString("b_macno"))) {
                        SaveToTerminal(TranRec);
                        TranRec.ClearRec();
                        TempMacNo = rec.getString("b_macno");
                        TranRec.StBill = rec.getString("b_refno");
                    }
                    TranRec.SpBill = rec.getString("b_refno");
                    if (!rec.getString("b_void").equals("V")) {
                        TranRec.MacNo1 = rec.getString("b_macno");
                        TranRec.Dept_Sum = TranRec.Dept_Sum + rec.getDouble("b_total");
                        if (rec.getDouble("b_serviceamt") != 0.0) {
                            TranRec.Service = TranRec.Service + rec.getDouble("b_serviceamt");
                            TranRec.ServiceCnt++;
                        }
                        if (rec.getDouble("b_crchargeamt1") != 0.0) {
                            TranRec.Charge = TranRec.Charge + rec.getDouble("b_crchargeamt1");
                            TranRec.ChargeCnt++;
                        }
                        if (rec.getDouble("b_memdiscamt") != 0.0) {
                            TranRec.Vip_Disc = TranRec.Vip_Disc + rec.getDouble("b_memdiscamt");
                            TranRec.Vip_DiscCnt++;
                        }
                        if (rec.getDouble("b_empdiscamt") != 0.0) {
                            TranRec.Emp_Disc = TranRec.Emp_Disc + rec.getDouble("b_empdiscamt");
                            TranRec.Emp_DiscCnt++;
                        }
                        if (rec.getDouble("b_fastdiscamt") != 0.0) {
                            TranRec.Fast_Disc = TranRec.Fast_Disc + rec.getDouble("b_fastdiscamt");
                            TranRec.Fast_DiscCnt++;
                        }
                        if (rec.getDouble("b_Traindiscamt") != 0.0) {
                            TranRec.Train_Disc = TranRec.Train_Disc + rec.getDouble("b_traindiscamt");
                            TranRec.Train_DiscCnt++;
                        }
                        if (rec.getDouble("b_subdiscamt") != 0.0) {
                            TranRec.Sub_Disc = TranRec.Sub_Disc + rec.getDouble("b_subdiscamt");
                            TranRec.Sub_DiscCnt++;
                        }
                        if (rec.getDouble("b_subdiscbath") != 0.0) {
                            TranRec.Gen_Refund = TranRec.Gen_Refund + rec.getDouble("b_subdiscbath");
                            TranRec.Gen_RefundCnt++;
                        }
                        if (rec.getDouble("b_cupondiscamt") != 0.0) {
                            TranRec.Cupon_Disc = TranRec.Cupon_Disc + rec.getDouble("b_cupondiscamt");
                            TranRec.Cupon_DiscCnt++;
                        }
                        if (rec.getDouble("b_prodiscamt") != 0.0) {
                            TranRec.Promotion = TranRec.Promotion + rec.getDouble("b_prodiscamt");
                            TranRec.PromotionCnt++;
                        }
                        if (rec.getDouble("b_spadiscamt") != 0.0) {
                            TranRec.Spacial = TranRec.Spacial + rec.getDouble("b_spadiscamt");
                            TranRec.SpacialCnt++;
                        }
                        if (rec.getDouble("b_itemdiscamt") != 0.0) {
                            TranRec.Item_Disc = TranRec.Item_Disc + rec.getDouble("b_itemdiscamt");
                            TranRec.Item_DiscCnt++;
                        }
                        TranRec.Net_Sale = TranRec.Net_Sale + (rec.getDouble("b_nettotal") + rec.getDouble("b_crchargeamt1"));
                        if (rec.getDouble("b_cash") != 0.0) {
                            TranRec.Cash = TranRec.Cash + rec.getDouble("b_cash");
                            TranRec.CashCnt++;
                        }
                        if (rec.getDouble("b_giftvoucher") != 0.0) {
                            TranRec.Gift = TranRec.Gift + rec.getDouble("b_giftvoucher");
                            TranRec.GiftCnt++;
                        }
                        if (rec.getDouble("b_earnest") != 0.0) {
                            TranRec.Earnest = TranRec.Earnest + rec.getDouble("b_earnest");
                            TranRec.EarnestCnt++;
                        }
                        if (rec.getDouble("b_accramt") != 0.0) {
                            TranRec.ArPayment = TranRec.ArPayment + rec.getDouble("b_accramt");
                            TranRec.ArPaymentCnt++;
                        }
                        if (rec.getDouble("b_cramt1") != 0.0) {
                            TranRec.Credit_Card = TranRec.Credit_Card + rec.getDouble("b_cramt1");
                            TranRec.Credit_CardCnt++;
                        }
                        TranRec.SaleVat = TranRec.SaleVat + rec.getDouble("b_netvat");
                        TranRec.SaleNonVat = TranRec.SaleNonVat + rec.getDouble("b_netnonvat");
                        TranRec.VatAmt = TranRec.VatAmt + rec.getDouble("b_vat");
                        TranRec.CntBill++;
                        if (rec.getDouble("b_food") != 0.0) {
                            TranRec.Food = TranRec.Food + rec.getDouble("b_food");
                        }
                        if (rec.getDouble("b_drink") != 0.0) {
                            TranRec.Drink = TranRec.Drink + rec.getDouble("b_drink");
                        }
                        if (rec.getDouble("b_product") != 0.0) {
                            TranRec.Product = TranRec.Product + rec.getDouble("b_product");
                        }
                        if (rec.getInt("b_cust") != 0) {
                            TranRec.Customer = TranRec.Customer + rec.getInt("b_cust");
                        }
                        if (rec.getString("b_etd").equals("E")) {
                            TranRec.Eat_In_Cnt++;
                            TranRec.Eat_In_Amt = TranRec.Eat_In_Amt + rec.getDouble("b_total");
                            TranRec.Eat_In_Cust = TranRec.Eat_In_Cust + rec.getInt("b_cust");
                            TranRec.Eat_In_Net = TranRec.Eat_In_Net + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("T")) {
                            TranRec.Take_AwayCnt++;
                            TranRec.Take_AwayAmt = TranRec.Take_AwayAmt + rec.getDouble("b_total");
                            TranRec.Take_AwayCust = TranRec.Take_AwayCust + rec.getInt("b_cust");
                            TranRec.Take_AwayNet = TranRec.Take_AwayNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("D")) {
                            TranRec.DeliveryCnt++;
                            TranRec.DeliveryAmt = TranRec.DeliveryAmt + rec.getDouble("b_total");
                            TranRec.DeliveryCust = TranRec.DeliveryCust + rec.getInt("b_cust");
                            TranRec.DeliveryNet = TranRec.DeliveryNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("P")) {
                            TranRec.PintoCnt++;
                            TranRec.PintoAmt = TranRec.PintoAmt + rec.getDouble("b_total");
                            TranRec.PintoCust = TranRec.PintoCust + rec.getInt("b_cust");
                            TranRec.PintoNet = TranRec.PintoNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("W")) {
                            TranRec.WholeCnt++;
                            TranRec.WholeAmt = TranRec.WholeAmt + rec.getDouble("b_total");
                            TranRec.WholeCust = TranRec.WholeCust + rec.getInt("b_cust");
                            TranRec.WholeNet = TranRec.WholeNet + rec.getDouble("b_nettotal");
                        }
                    } else {
                        TranRec.AmtBillVoid = TranRec.AmtBillVoid + (rec.getDouble("b_nettotal") + rec.getDouble("b_crchargeamt1"));
                        TranRec.CntBillVoid++;
                        TranRec.CntBill++;
                    }
                } while (rec.next());
                SaveToTerminal(TranRec);
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล รายการขายตามเครื่อง "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล รายการขายตามเครื่อง "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessCashier() {
        Pro_Msg.setText("ประมวลผล รายการขายตามพนักงานขาย (Cashier) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from billno order by b_cashier ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                CurRec++ ;
                Pro_Msg.setText("ประมวลผล รายการขายตามพนักงานขาย (Cashier) "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                FinalcialRec TranRec = new FinalcialRec();
                TranRec.ClearRec();
                String TempMacNo = rec.getString("b_cashier");
                TranRec.StBill = rec.getString("b_refno");
                do {
                    if (!TempMacNo.equals(rec.getString("b_cashier"))) {
                        SaveToCashier(TranRec);
                        TranRec.ClearRec();
                        TempMacNo = rec.getString("b_cashier");
                        TranRec.StBill = rec.getString("b_refno");
                    }
                    TranRec.SpBill = rec.getString("b_refno");
                    if (!rec.getString("b_void").equals("V")) {
                        TranRec.MacNo1 = rec.getString("b_cashier");
                        TranRec.Dept_Sum = TranRec.Dept_Sum + rec.getDouble("b_total");
                        if (rec.getDouble("b_serviceamt") != 0.0) {
                            TranRec.Service = TranRec.Service + rec.getDouble("b_serviceamt");
                            TranRec.ServiceCnt++;
                        }
                        if (rec.getDouble("b_crchargeamt1") != 0.0) {
                            TranRec.Charge = TranRec.Charge + rec.getDouble("b_crchargeamt1");
                            TranRec.ChargeCnt++;
                        }
                        if (rec.getDouble("b_memdiscamt") != 0.0) {
                            TranRec.Vip_Disc = TranRec.Vip_Disc + rec.getDouble("b_memdiscamt");
                            TranRec.Vip_DiscCnt++;
                        }
                        if (rec.getDouble("b_empdiscamt") != 0.0) {
                            TranRec.Emp_Disc = TranRec.Emp_Disc + rec.getDouble("b_empdiscamt");
                            TranRec.Emp_DiscCnt++;
                        }
                        if (rec.getDouble("b_fastdiscamt") != 0.0) {
                            TranRec.Fast_Disc = TranRec.Fast_Disc + rec.getDouble("b_fastdiscamt");
                            TranRec.Fast_DiscCnt++;
                        }
                        if (rec.getDouble("b_Traindiscamt") != 0.0) {
                            TranRec.Train_Disc = TranRec.Train_Disc + rec.getDouble("b_traindiscamt");
                            TranRec.Train_DiscCnt++;
                        }
                        if (rec.getDouble("b_subdiscamt") != 0.0) {
                            TranRec.Sub_Disc = TranRec.Sub_Disc + rec.getDouble("b_subdiscamt");
                            TranRec.Sub_DiscCnt++;
                        }
                        if (rec.getDouble("b_subdiscbath") != 0.0) {
                            TranRec.Gen_Refund = TranRec.Gen_Refund + rec.getDouble("b_subdiscbath");
                            TranRec.Gen_RefundCnt++;
                        }
                        if (rec.getDouble("b_cupondiscamt") != 0.0) {
                            TranRec.Cupon_Disc = TranRec.Cupon_Disc + rec.getDouble("b_cupondiscamt");
                            TranRec.Cupon_DiscCnt++;
                        }
                        if (rec.getDouble("b_prodiscamt") != 0.0) {
                            TranRec.Promotion = TranRec.Promotion + rec.getDouble("b_prodiscamt");
                            TranRec.PromotionCnt++;
                        }
                        if (rec.getDouble("b_spadiscamt") != 0.0) {
                            TranRec.Spacial = TranRec.Spacial + rec.getDouble("b_spadiscamt");
                            TranRec.SpacialCnt++;
                        }
                        if (rec.getDouble("b_itemdiscamt") != 0.0) {
                            TranRec.Item_Disc = TranRec.Item_Disc + rec.getDouble("b_itemdiscamt");
                            TranRec.Item_DiscCnt++;
                        }
                        TranRec.Net_Sale = TranRec.Net_Sale + (rec.getDouble("b_nettotal") + rec.getDouble("b_crchargeamt1"));
                        if (rec.getDouble("b_cash") != 0.0) {
                            TranRec.Cash = TranRec.Cash + rec.getDouble("b_cash");
                            TranRec.CashCnt++;
                        }
                        if (rec.getDouble("b_giftvoucher") != 0.0) {
                            TranRec.Gift = TranRec.Gift + rec.getDouble("b_giftvoucher");
                            TranRec.GiftCnt++;
                        }
                        if (rec.getDouble("b_earnest") != 0.0) {
                            TranRec.Earnest = TranRec.Earnest + rec.getDouble("b_earnest");
                            TranRec.EarnestCnt++;
                        }
                        if (rec.getDouble("b_accramt") != 0.0) {
                            TranRec.ArPayment = TranRec.ArPayment + rec.getDouble("b_accramt");
                            TranRec.ArPaymentCnt++;
                        }
                        if (rec.getDouble("b_cramt1") != 0.0) {
                            TranRec.Credit_Card = TranRec.Credit_Card + rec.getDouble("b_cramt1");
                            TranRec.Credit_CardCnt++;
                        }
                        TranRec.SaleVat = TranRec.SaleVat + rec.getDouble("b_netvat");
                        TranRec.SaleNonVat = TranRec.SaleNonVat + rec.getDouble("b_netnonvat");
                        TranRec.VatAmt = TranRec.VatAmt + rec.getDouble("b_vat");
                        TranRec.CntBill++;
                        if (rec.getDouble("b_food") != 0.0) {
                            TranRec.Food = TranRec.Food + rec.getDouble("b_food");
                        }
                        if (rec.getDouble("b_drink") != 0.0) {
                            TranRec.Drink = TranRec.Drink + rec.getDouble("b_drink");
                        }
                        if (rec.getDouble("b_product") != 0.0) {
                            TranRec.Product = TranRec.Product + rec.getDouble("b_product");
                        }
                        if (rec.getInt("b_cust") != 0) {
                            TranRec.Customer = TranRec.Customer + rec.getInt("b_cust");
                        }
                        if (rec.getString("b_etd").equals("E")) {
                            TranRec.Eat_In_Cnt++;
                            TranRec.Eat_In_Amt = TranRec.Eat_In_Amt + rec.getDouble("b_total");
                            TranRec.Eat_In_Cust = TranRec.Eat_In_Cust + rec.getInt("b_cust");
                            TranRec.Eat_In_Net = TranRec.Eat_In_Net + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("T")) {
                            TranRec.Take_AwayCnt++;
                            TranRec.Take_AwayAmt = TranRec.Take_AwayAmt + rec.getDouble("b_total");
                            TranRec.Take_AwayCust = TranRec.Take_AwayCust + rec.getInt("b_cust");
                            TranRec.Take_AwayNet = TranRec.Take_AwayNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("D")) {
                            TranRec.DeliveryCnt++;
                            TranRec.DeliveryAmt = TranRec.DeliveryAmt + rec.getDouble("b_total");
                            TranRec.DeliveryCust = TranRec.DeliveryCust + rec.getInt("b_cust");
                            TranRec.DeliveryNet = TranRec.DeliveryNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("P")) {
                            TranRec.PintoCnt++;
                            TranRec.PintoAmt = TranRec.PintoAmt + rec.getDouble("b_total");
                            TranRec.PintoCust = TranRec.PintoCust + rec.getInt("b_cust");
                            TranRec.PintoNet = TranRec.PintoNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("W")) {
                            TranRec.WholeCnt++;
                            TranRec.WholeAmt = TranRec.WholeAmt + rec.getDouble("b_total");
                            TranRec.WholeCust = TranRec.WholeCust + rec.getInt("b_cust");
                            TranRec.WholeNet = TranRec.WholeNet + rec.getDouble("b_nettotal");
                        }
                    } else {
                        TranRec.AmtBillVoid = TranRec.AmtBillVoid + (rec.getDouble("b_nettotal") + rec.getDouble("b_crchargeamt1"));
                        TranRec.CntBillVoid++;
                        TranRec.CntBill++;
                    }
                } while (rec.next());
                SaveToCashier(TranRec);
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล รายการขายตามพนักงานขาย "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล รายการขายตามพนักงานขาย "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessVatReport() {
        Double TNetVat = 0.0;
        Double TNetNonVat = 0.0;
        Double TVat = 0.0;
        String TStBill = "";
        String TSpBill = "";
        String TMacNo = "";
        String TempMacNo = "";
        Pro_Msg.setText("ประมวลผล รายการภาษีมูลค่าเพิ่ม (VAT) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from billno order by b_macno ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                CurRec++ ;
                Pro_Msg.setText("ประมวลผล รายการภาษีมูลค่าเพิ่ม (VAT) "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                TStBill = rec.getString("b_refno");
                TSpBill = rec.getString("b_refno");
                TempMacNo = rec.getString("b_macno");
                do {
                    if (!TempMacNo.equals(rec.getString("b_macno"))) {
                        TMacNo = GetGovermentTax(TempMacNo);
                        Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                        String InsertQuery = "insert into s_vat (tdate,terminal,macno,stbill,spbill,netvat,netnonvat,vat) " +
                                "values (?,?,?,?,?,?,?,?)";
                        PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                        prm.setString(1, SqlDateFmt.format(EndofdayDate));
                        prm.setString(2, TempMacNo);
                        prm.setString(3, TMacNo);
                        prm.setString(4, TStBill);
                        prm.setString(5, TSpBill);
                        prm.setDouble(6, TNetVat);
                        prm.setDouble(7, TNetNonVat);
                        prm.setDouble(8, TVat);
                        prm.executeUpdate();
                        stmt2.close();
                        TNetVat = 0.0;
                        TNetNonVat = 0.0;
                        TVat = 0.0;
                        TMacNo = "";
                        TStBill = rec.getString("b_refno");
                        TSpBill = rec.getString("b_refno");
                        TempMacNo = rec.getString("b_macno");
                    }
                    if (!rec.getString("b_void").equals("V")) {
                        TNetVat = TNetVat + rec.getDouble("b_netvat");
                        TNetNonVat = TNetNonVat + rec.getDouble("b_netnonvat");
                        TVat = TVat + rec.getDouble("b_vat");
                        TSpBill = rec.getString("b_refno");
                    }
                } while (rec.next());
                TMacNo = GetGovermentTax(TempMacNo);
                Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                String InsertQuery = "insert into s_vat (tdate,terminal,macno,stbill,spbill,netvat,netnonvat,vat) " +
                        "values (?,?,?,?,?,?,?,?)";
                PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                prm.setString(1, SqlDateFmt.format(EndofdayDate));
                prm.setString(2, TempMacNo);
                prm.setString(3, TMacNo);
                prm.setString(4, TStBill);
                prm.setString(5, TSpBill);
                prm.setDouble(6, TNetVat);
                prm.setDouble(7, TNetNonVat);
                prm.setDouble(8, TVat);
                prm.executeUpdate();
                stmt2.close();
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล รายการภาษีมูลค่าเพิ่ม "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล รายการภาษีมูลค่าเพิ่ม "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }


    }

    public void ProcessCashReturn() {
        Pro_Msg.setText("ประมวลผล รายการคืนเงินมัดจำเป็นเงินสด (Cash Return) ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from billret ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล รายการคืนเงินมัดจำเป็นเงินสด (Cash Return) "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_billret (s_date,ref_no,ondate,stotal,cash,fat,uservoid) " +
                            "values (?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, rec.getString("r_refno"));
                    prm.setString(3, SqlDateFmt.format(rec.getDate("ondate")));
                    prm.setDouble(4, rec.getDouble("stotal"));
                    prm.setDouble(5, rec.getDouble("cash"));
                    prm.setString(6, rec.getString("fat"));
                    prm.setString(7, rec.getString("uservoid"));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("ประมวลผล คืนเงินมัดจำเป็นเงินสด "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("ประมวลผล คืนเงินมัดจำเป็นเงินสด "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessPromotionGP() {
        Pro_Msg.setText("ประมวลผล รายการส่วนลดแยกประเภท (Promotion GP)  อาจใช้เวลานาน...กรุณารอสักครู่ ");
        Date SaleDate = EndofdayDate;
        Double SumA = 0.0;
        Double SumB = 0.0;
        Double SumC = 0.0;
        Double SumD = 0.0;
        Double SumE = 0.0;
        Double SumF = 0.0;
        Double SumG = 0.0;
        Double SumH = 0.0;
        Double SumX = 0.0;
        Double SumEarnest = 0.0;
        Double SumBath = 0.0;
        Double XDiscQty = 0.0;
        Double XDiscQtySum = 0.0;

        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "select sum(b_earnest) from billno where (b_void<>'V')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    SumEarnest = rec.getDouble("sum(b_earnest)");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "select *from t_sale left join protab on r_prcode=procode left join cupon on cucode=r_prcucode " +
                    "where (r_void<>'V') and (r_refund<>'V') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    XDiscQty = 0.0;
                    XDiscQtySum = 0.0;
                    String TempType = rec.getString("r_prtype");
                    String TempCuType = rec.getString("r_prcutype");
                    String TempSubType = rec.getString("r_prsubtype");
                    String TempChkType = rec.getString("r_prchktype");
                    String TempCuCode = rec.getString("r_prcucode");
                    SumA = SumA + rec.getDouble("r_total");
                    SumD = SumD + rec.getDouble("r_discbath") + rec.getDouble("r_prcubath");
                    SumBath = SumBath + rec.getDouble("r_discbath") + rec.getDouble("r_prcubath");
                    if ((TempType.equals("")) & (TempCuType.equals("")) & (TempSubType.equals(""))) {
                        SumB = SumB + rec.getDouble("r_total");
                    } else {
                        if (!TempType.equals("")) { //แบบเก่า

                            if (TempChkType.equals("")) {
                                if (Branch_PromotionGP.indexOf(TempType) > 0) {
                                    XDiscQty = rec.getDouble("r_quan");
                                    XDiscQtySum = XDiscQtySum + XDiscQty;
                                    SumC = SumC + rec.getDouble("r_total");
                                    SumE = SumE + rec.getDouble("r_pramt") + rec.getDouble("r_prcuamt") - rec.getDouble("r_pradj");
                                } else {
                                    XDiscQty = rec.getDouble("r_quan");
                                    XDiscQtySum = XDiscQtySum + XDiscQty;
                                    SumB = SumB + rec.getDouble("r_total");
                                    SumD = SumD + rec.getDouble("r_pramt") + rec.getDouble("r_prcuamt") - rec.getDouble("r_pradj");
                                }
                                TempCuType = "";
                            } else { // แบบใหม่
                                //Promotion

                                if (rec.getDouble("r_prquan") + rec.getDouble("r_prquan2") > 0) {
                                    if (Branch_PromotionGP.indexOf(TempType) > 0) {
                                        XDiscQty = rec.getDouble("r_prquan")+rec.getDouble("r_prquan2");
                                        XDiscQtySum = XDiscQtySum + XDiscQty;
                                        SumC = SumC + ((rec.getDouble("r_prquan") + rec.getDouble("r_prquan2")) * rec.getDouble("r_price"));
                                        SumE = SumE + rec.getDouble("r_pramt") + rec.getDouble("r_pramt2") - rec.getDouble("r_pradj");

                                    } else {
                                        XDiscQty = rec.getDouble("r_prquan")+rec.getDouble("r_prquan2");
                                        XDiscQtySum = XDiscQtySum + XDiscQty;
                                        SumB = SumB + ((rec.getDouble("r_prquan") + rec.getDouble("r_prquan2")) * rec.getDouble("r_price"));
                                        SumD = SumD + rec.getDouble("r_pramt") + rec.getDouble("r_pramt2") - rec.getDouble("r_pradj");
                                    }
                                }
                            }
                        }
                        if (!TempSubType.equals("")) {
                            if (Branch_PromotionGP.indexOf(TempSubType) > 0) {
                                XDiscQty = rec.getDouble("r_prsubquan");
                                XDiscQtySum = XDiscQtySum + XDiscQty;
                                SumC = SumC + (rec.getDouble("r_prsubquan") * rec.getDouble("r_price"));
                                SumE = SumE + rec.getDouble("r_prsubamt") - rec.getDouble("r_prsubadj");
                            } else {
                                XDiscQty = rec.getDouble("r_prsubquan");
                                XDiscQtySum = XDiscQtySum + XDiscQty;
                                SumB = SumB + (rec.getDouble("r_prsubquan") * rec.getDouble("r_price"));
                                SumD = SumD + rec.getDouble("r_prsubamt") - rec.getDouble("r_prsubadj");
                            }
                        }
                        if (!TempCuType.equals("")) {
                            if (Branch_PromotionGP.indexOf(TempCuType) > 0) {
                                XDiscQty = rec.getDouble("r_prcuquan");
                                XDiscQtySum = XDiscQtySum + XDiscQty;
                                SumC = SumC + (rec.getDouble("r_prcuquan") * rec.getDouble("r_price"));
                                SumE = SumE + rec.getDouble("r_prcuamt") - rec.getDouble("r_prcuadj");
                            } else {
                                XDiscQty = rec.getDouble("r_prcuquan");
                                XDiscQtySum = XDiscQtySum + XDiscQty;
                                SumB = SumB + (rec.getDouble("r_prcuquan") * rec.getDouble("r_price"));
                                SumD = SumD + rec.getDouble("r_prcuamt") - rec.getDouble("r_prcuadj");
                            }
                        }
                        if (XDiscQtySum < rec.getDouble("r_quan")) {
                            SumB = SumB + (rec.getDouble("r_price") * (rec.getDouble("r_quan") - XDiscQtySum));
                        }
                    }
                } while (rec.next());
            }
            SumF = SumA - SumD - SumE - SumEarnest;
            SumG = SumB - SumD - SumEarnest;
            SumH = SumC - SumE;
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        //Delete GPHead
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from tempgpheader";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        //Delete GPDetail
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from tempgpdetail";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        InsertGPHead(SqlDateFmt.format(SaleDate), _BranCode, SumA, SumB, SumC, SumD, SumE, SumF, SumG, SumH, SumEarnest);
        SumBath = 0.0;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "select *from t_sale left join protab on r_prcode=procode left join cupon on cucode=r_prcucode " +
                    "where (r_void<>'V') and (r_refund<>'V') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    XDiscQty = 0.0;
                    XDiscQtySum = 0.0;
                    SumBath = SumBath + rec.getDouble("r_discbath") + rec.getDouble("r_prcubath");
                    String PTType = rec.getString("r_prtype");
                    String PTCode = "";
                    String TempChkType = rec.getString("r_prchktype");
                    String TempCuType = rec.getString("r_prcutype");
                    String TempSubType = rec.getString("r_prsubtype");
                    String TempCuCode = rec.getString("r_prcucode");
                    String PTName = "";
                    if ((PTType.equals("")) & (TempSubType.equals("")) & (TempCuType.equals(""))) {
                        XDiscQty = rec.getDouble("r_quan");
                        XDiscQtySum = XDiscQtySum + XDiscQty;
                        PTType = "-N";
                        PTCode = "";
                        SumA = rec.getDouble("r_total");
                        SumB = rec.getDouble("r_quan");
                        SumC = rec.getDouble("r_pramt") - rec.getDouble("r_pradj");
                        SumD = SumA - SumC;
                        if (SeekGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode)) {
                            UpdateGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                        } else {
                            InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                        }
                    } else {
                        if (!PTType.equals("")) {
                            if (TempChkType.equals("")) { //แบบเก่า

                                if ((PTType.equals("-C")) & (!rec.getString("r_prcucode").equals(""))) {
                                    XDiscQty = rec.getDouble("r_quan");
                                    XDiscQtySum = XDiscQtySum + XDiscQty;
                                    PTCode = rec.getString("r_prcucode");
                                    PTName = rec.getString("cuname");
                                    SumA = rec.getDouble("r_total");
                                    SumB = rec.getDouble("r_quan");
                                    SumC = rec.getDouble("r_pramt") + rec.getDouble("r_prcuamt") - rec.getDouble("r_pradj");
                                    SumD = SumA - SumC;
                                } else {
                                    XDiscQty = rec.getDouble("r_quan");
                                    XDiscQtySum = XDiscQtySum + XDiscQty;
                                    PTCode = rec.getString("r_prcode");
                                    PTName = rec.getString("prodesc");
                                    SumA = rec.getDouble("r_total");
                                    SumB = rec.getDouble("r_quan");
                                    SumC = rec.getDouble("r_pramt") + rec.getDouble("r_prcuamt") - rec.getDouble("r_pradj");
                                    SumD = SumA - SumC;
                                }
                                if (SeekGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode)) {
                                    UpdateGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                                } else {
                                    InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                                }
                                TempCuType = "";
                            } else {
                                Boolean ChkPro1OK = false;
                                if (rec.getDouble("r_prquan") > 0) {
                                    ChkPro1OK = true;
                                    XDiscQty = rec.getDouble("r_quan");
                                    XDiscQtySum = XDiscQtySum + XDiscQty;
                                    PTCode = rec.getString("r_prcode");
                                    PTName = rec.getString("prodesc");
                                    SumA = rec.getDouble("r_price") * rec.getDouble("r_prquan");
                                    SumB = rec.getDouble("r_quan");
                                    SumC = rec.getDouble("r_pramt") - rec.getDouble("r_pradj");
                                    SumD = SumA - SumC;
                                    if (SeekGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode)) {
                                        UpdateGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                                    } else {
                                        InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                                    }
                                }
                                if (rec.getDouble("r_prquan2") > 0) {
                                    XDiscQty = rec.getDouble("r_prquan2");
                                    XDiscQtySum = XDiscQtySum + XDiscQty;
                                    PTCode = rec.getString("r_prcode2");
                                    PTName = SeekPromotionName(PTCode);
                                    SumA = rec.getDouble("r_price") * rec.getDouble("r_prquan2");
                                    SumB = rec.getDouble("r_prquan2");
                                    if (ChkPro1OK) {
                                        SumC = rec.getDouble("r_pramt2");
                                    } else {
                                        SumC = rec.getDouble("r_pramt2") - rec.getDouble("r_pradj");
                                    }
                                    SumD = SumA - SumC;
                                    if (SeekGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode)) {
                                        UpdateGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                                    } else {
                                        InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                                    }
                                }
                            }
                        }
                        if ((!TempCuType.equals("")) & (!TempCuCode.equals(""))) {
                            PTType = TempCuType;
                            XDiscQty = rec.getDouble("r_prcuquan");
                            XDiscQtySum = XDiscQtySum + XDiscQty;
                            PTCode = rec.getString("r_prcucode");
                            PTName = rec.getString("cuname");
                            SumA = rec.getDouble("r_price") * rec.getDouble("r_prcuquan");
                            SumB = rec.getDouble("r_prcuquan");
                            SumC = rec.getDouble("r_prcuamt") - rec.getDouble("r_prcuadj");
                            SumD = SumA - SumC;
                            if (SeekGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode)) {
                                UpdateGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                            } else {
                                InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                            }
                        }
                        if (!TempSubType.equals("")) {
                            PTType = TempSubType;
                            XDiscQty = rec.getDouble("r_prSubquan");
                            XDiscQtySum = XDiscQtySum + XDiscQty;
                            PTCode = rec.getString("r_prSubcode");
                            PTName = rec.getString("prodesc");
                            SumA = rec.getDouble("r_price") * rec.getDouble("r_prsubquan");
                            SumB = rec.getDouble("r_prsubquan");
                            SumC = rec.getDouble("r_prsubamt") - rec.getDouble("r_prsubadj");
                            SumD = SumA - SumC;
                            if (SeekGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode)) {
                                UpdateGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                            } else {
                                InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                            }
                        }
                    }
                    if (XDiscQtySum < rec.getDouble("r_quan")) {
                        PTType = "-N";
                        PTCode = "";
                        PTName = "";
                        SumA = rec.getDouble("r_price") * (rec.getDouble("r_quan") - XDiscQtySum);
                        SumB = rec.getDouble("r_quan") - XDiscQtySum;
                        SumC = 0.0;
                        SumD = SumA - SumC;
                        if (SeekGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode)) {
                            UpdateGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                        } else {
                            InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, PTType, PTCode, PTName, SumA, SumB, SumC, SumD);
                        }
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, "-B", "", "", 0.0, 0.0, SumBath, 0.0);
        InsertGPDetail(SqlDateFmt.format(SaleDate), _BranCode, "-A", "", "", 0.0, 0.0, SumEarnest, 0.0);
        if (!processStop) {
           TextArea1.append("ประมวลผล รายการส่วนลดแยกประเภท "+"OK\n"); 
        } else {
           TextArea1.append("ประมวลผล รายการส่วนลดแยกประเภท "+"Error\n");
        }

    }

    public void ProcessClearKicTran() {
        Pro_Msg.setText("ประมวลผล Clear Data From Kichen Transection... ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from s_kictran where s_date='"+SqlDateFmt.format(EndofdayDate)+"'";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from kictran ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.last() ;
            totalRec = rec.getRow() ;
            CurRec = 0 ;
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CurRec++ ;
                    Pro_Msg.setText("ประมวลผล Clear Data From Kichen Transection... "+"Rec : "+IntFmt.format(CurRec)+"/"+IntFmt.format(totalRec));
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into s_kictran (s_date,pdate,pcode,pindex,macno,cashier,emp,pitemno,ptable," +
                            "pkic,ptimein,ptimeout,pvoid,petd,pqty,pflage,pwaittime,pservetime,pserve,ppayment,pinvno," +
                            "pwaitserve,pwaittotal) " +
                            "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, SqlDateFmt.format(EndofdayDate));
                    prm.setString(2, SqlDateFmt.format(rec.getDate("pdate")));
                    prm.setString(3, rec.getString("pcode"));
                    prm.setString(4, rec.getString("pindex"));
                    prm.setString(5, rec.getString("macno"));
                    prm.setString(6, rec.getString("cashier"));
                    prm.setString(7, rec.getString("emp"));
                    prm.setInt(8, rec.getInt("pitemno"));
                    prm.setString(9, rec.getString("ptable"));
                    prm.setString(10, rec.getString("pkic"));
                    prm.setTime(11, rec.getTime("ptimein"));
                    prm.setTime(12, rec.getTime("ptimeout"));
                    prm.setString(13, rec.getString("pvoid"));
                    prm.setString(14, rec.getString("petd"));
                    prm.setDouble(15, rec.getDouble("pqty"));
                    prm.setString(16, rec.getString("pflage"));
                    prm.setTime(17, rec.getTime("pwaittime"));
                    prm.setTime(18, rec.getTime("pservetime"));
                    prm.setString(19, rec.getString("pserve"));
                    prm.setString(20, rec.getString("ppayment"));
                    prm.setString(21, rec.getString("pinvno"));
                    prm.setTime(22, rec.getTime("pwaitserve"));
                    prm.setTime(23, rec.getTime("pwaittotal"));
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
            TextArea1.append("Clear Data From Kichen Transection... "+"OK"+" ("+IntFmt.format(totalRec)+")\n");
        } catch (SQLException e) {
            processStop = true ;
            TextArea1.append("Clear Data From Kichen Transection... "+"Error\n");
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void ProcessRJFile() {
        Pro_Msg.setText("ประมวลผล ข้อมูล RJ-File... ");
        String TMac1 = "";
        String TMac2 = "";
        String TMac3 = "";
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from poshwsetup order by terminal ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                TMac1 = rec.getString("terminal");
                if (rec.next()) {
                    TMac2 = rec.getString("terminal");
                }
                if (rec.next()) {
                    TMac3 = rec.getString("terminal");
                }
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "update surrj set mac1=0,mac2=0,mac3=0,gosstotal=0,nettotal=0,vat=0 ";
            stmt.executeUpdate(SQLQuery);
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from surrj ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    String TRJNo = rec.getString("rjno");
                    String TDept = rec.getString("dept");
                    String TProcess = rec.getString("process");
                    if (TProcess.equals("DEPT")) {
                        RJProcessDept(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("SERVICE+DEPT")) {
                        RJProcessService(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("DISCOUNT CUPON+DEPT")) {
                        RJProcessCupon(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("DISCOUNT MEMBER+DEPT")) {
                        RJProcessMember(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("DISCOUNT EMP+DEPT")) {
                        RJProcessEmp(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("DISCOUNT FASTIVAL+DEPT+ERANEST")) {
                        RJProcessFastival(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("VAT")) {
                        if (PVatType.equals("E")){
                            RJProcessVat(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                        }
                    } else
                    if (TProcess.equals("GIFT VOUCHER SALE")) {
                        RJProcessGiftSale(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("AR PAYMENT+DEPT")) {
                        RJProcessARPayment(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else 
                    if (TProcess.equals("AR SALES")) {
                        RJProcessARSale(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("CRADIT")) {
                        RJProcessCredit(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("GIFT VOUCHER")) {
                        RJProcessGift(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("RETURN")) {
                        RJProcessReturn(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("DELIVERY")) {
                        RJProcessDelivery(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("BILL DELIVERY")) {
                        RJProcessBillDelivery(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("SLIP CRADIT")) {
                        RJProcessSlipCredit(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    } else
                    if (TProcess.equals("CUSTOMER")) {
                        RJProcessCustomer(TRJNo, TDept, TProcess, TMac1, TMac2, TMac3);
                    }

                    //Load From RjFile2
                    if (rec.getString("rjno").equals("60") | rec.getString("rjno").equals("61") | rec.getString("rjno").equals("62")
                            |rec.getString("rjno").equals("67")|rec.getString("rjno").equals("68")
                            |rec.getString("rjno").equals("70")|rec.getString("rjno").equals("71")|rec.getString("rjno").equals("72")
                            |rec.getString("rjno").equals("73")|rec.getString("rjno").equals("67")
                            | rec.getString("rjno").equals("T0") | rec.getString("rjno").equals("T4") | rec.getString("rjno").equals("T5") | rec.getString("rjno").equals("T6") |rec.getString("rjno").equals("T8")|rec.getString("rjno").equals("T9")) {

                      try {
                        Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                        String LoadTableFile2 = "select *from rjfile2 where tdate ='" + SqlDateFmt.format(PublicVar.SaleDate) + "' and rjno='"+TRJNo+"'";
                        ResultSet rec2 = stmt2.executeQuery(LoadTableFile2);
                        rec2.first();
                        if (rec2.getRow() == 0) {
                        } else {
                                String XRJNo = rec2.getString("rjno");
                                Double XSum1 = rec2.getDouble("mac1");
                                Double XSum2 = rec2.getDouble("mac2");
                                Double XSum3 = rec2.getDouble("mac3");
                                String fixcode = rec2.getString("fixcode") ;
                                UpdateSurRj2(XRJNo, XSum1, XSum2, XSum3,fixcode);
                        }
                        rec2.close();
                        stmt2.close();
                    } catch (SQLException e) {
                        PUtility.ShowError(e.getMessage());
                    }
                    }
                } while (rec.next());
            }

            rec.first() ;
            if (rec.getRow()==0) {
            } else {
                do {
                    String TRJNo = rec.getString("rjno") ;
                    String TDept = rec.getString("dept") ;
                    String TProcess = rec.getString("process") ;
                    if (!TProcess.equals("")) {
                       if (TProcess.substring(0,3).equals("SUM")) {
                           ProcessSumRJ(TRJNo,TProcess) ;
                       }
                    }
                } while (rec.next()) ;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from surrj ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    Statement stmt2 = (Statement) MySQLConnect.con.createStatement();
                    String InsertQuery = "insert into rjfile (brcode,tdate,rjno,dept,account,sub,descname," +
                            "fixcode,mac1,mac2,mac3,total,nettotal,vat) " +
                            "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
                    prm.setString(1, _BranCode);
                    prm.setString(2, SqlDateFmt.format(EndofdayDate));
                    prm.setString(3, rec.getString("rjno"));
                    prm.setString(4, rec.getString("dept"));
                    prm.setString(5, rec.getString("account"));
                    prm.setString(6, rec.getString("sub"));
                    prm.setString(7, rec.getString("tdesc"));
                    prm.setString(8, rec.getString("fixcode"));
                    prm.setDouble(9, rec.getDouble("mac1"));
                    prm.setDouble(10, rec.getDouble("mac2"));
                    prm.setDouble(11, rec.getDouble("mac3"));
                    prm.setDouble(12, rec.getDouble("mac1")+rec.getDouble("mac2")+rec.getDouble("mac3"));
                    prm.setDouble(13, 0);
                    prm.setDouble(14, 0);
                    prm.executeUpdate();
                    stmt2.close();
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            processStop = true ;
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        if (!processStop) {
           TextArea1.append("ประมวลผล ข้อมูล RJ-File "+"OK\n"); 
        } else {
           TextArea1.append("ประมวลผล ข้อมูล RJ-File "+"Error\n");
        }
    }
    
    public void BackupAllFile() {
        try {
        Pro_Msg.setText("Backup All Transection File....  อาจใช้เวลานาน...กรุณารอสักครู่ ");
        String TmpPath = "C:/tmp" ;
        String Backuppath  = "C:/spapplication/backup/b"+SqlDateFmt.format(EndofdayDate) ;
        String TestFile  = "C:/spapplication/backup/b"+SqlDateFmt.format(EndofdayDate)+"/test.dat" ;
        TextWriter TextWrite = new TextWriter() ; 
        File fObject = new File(TestFile);
        if (!fObject.canRead()) {
            TextWrite.writeToText(TestFile, "") ;
        }
        TextWrite.writeToText(TestFile, "") ;
        File TempPath = new File(TmpPath);
        DirectoryUtility dirUtil = new DirectoryUtility();

        File TempPath2 = new File(Backuppath);
        File fl3[] = TempPath2.listFiles();
        for (int i = 0; i < fl3.length; i++) {
        try {
            dirUtil.deleteDir(fl3[i]);
            } catch (IOException ex) {
               Logger.getLogger(Endofday.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        /* wail for new process
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "backup table billno,t_sale,t_ar,t_crar,t_cupon," +
                    "paidiofile,billar,billret,t_gift,t_promotion to '"+TmpPath+"'";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
            TextArea1.append("Backup All Transection File....OK\n ");
        } catch (SQLException e) {
            e.printStackTrace();
            processStop = true ;
            TextArea1.append("Backup All Transection File....Error\n ");
            JOptionPane.showMessageDialog(this, "backup :"+e.getMessage());            
        }
         *
         */
        //New Process 31-10-2010
        String dateFile = SqlDateFmt.format(EndofdayDate) ;
        
        //BillNo
        String filename = TempPath+"/sb"+dateFile+".txt";
        String pathBackup = Backuppath+"/sb"+dateFile+".txt";
        File f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From billno ") ;
        copyFile(filename,pathBackup);
        
          //t_sale
        filename = TempPath+"/st"+dateFile+".txt";
        pathBackup = Backuppath+"/st"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From t_sale ") ;
        copyFile(filename,pathBackup);
        
         //t_ar
        filename = TempPath+"/sa"+dateFile+".txt";
        pathBackup = Backuppath+"/sa"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From t_ar ") ;
        copyFile(filename,pathBackup);
        
        //t_crar
        filename = TempPath+"/sr"+dateFile+".txt";
        pathBackup = Backuppath+"/sr"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From t_crar ") ;
        copyFile(filename,pathBackup);
        
        //t_cupon
        filename = TempPath+"/sc"+dateFile+".txt";
        pathBackup = Backuppath+"/sc"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From t_cupon ") ;
        copyFile(filename,pathBackup);
        
        //paidiofile
        filename = TempPath+"/sp"+dateFile+".txt";
        pathBackup = Backuppath+"/sp"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From paidiofile ") ;
        copyFile(filename,pathBackup);
        
        //billar
        filename = TempPath+"/si"+dateFile+".txt";
        pathBackup = Backuppath+"/si"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From billar ") ;
        copyFile(filename,pathBackup);
        
        //billret
        filename = TempPath+"/se"+dateFile+".txt";
        pathBackup = Backuppath+"/se"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From billret ") ;
        copyFile(filename,pathBackup);
        
        //t_gift
        filename = TempPath+"/sg"+dateFile+".txt";
        pathBackup = Backuppath+"/sg"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From t_gift ") ;
        copyFile(filename,pathBackup);
        
        //t_promotion
        filename = TempPath+"/sm"+dateFile+".txt";
        pathBackup = Backuppath+"/sm"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From t_promotion ") ;
        copyFile(filename,pathBackup);
        
        //billcredit
        filename = TempPath+"/sd"+dateFile+".txt";
        pathBackup = Backuppath+"/sd"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From billcredit ") ;
        copyFile(filename,pathBackup);

        //For Charge
        //billnocharge
        filename = TempPath+"/cb"+dateFile+".txt";
        pathBackup = Backuppath+"/cb"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From billnocharge ") ;
        copyFile(filename,pathBackup);

        //t_charge
        filename = TempPath+"/ct"+dateFile+".txt";
        pathBackup = Backuppath+"/ct"+dateFile+".txt";
        f = new File(filename);
        if(f.exists()){
            f.delete();
        }
        execSql("Select * INTO OUTFILE '"+filename+"' From t_charge ") ;
        copyFile(filename,pathBackup);


         TextArea1.append("Backup All Transection File....OK\n ");
         
        } catch (Exception e) {
            e.printStackTrace();
            processStop = true ;
            TextArea1.append("Backup All Transection File....Error\n ");
            JOptionPane.showMessageDialog(this, "backup :"+e.getMessage());            
        }

        
    }
    public void execSql(String sqls){
        PreparedStatement pstmt = null;
        try {
            String sql = sqls;
            pstmt = MySQLConnect.con.prepareStatement(sql);
            pstmt.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                pstmt.close();
            } catch (Exception ex) {
            }
        }
    }
    private void copyFile(String des,String target) {
        new File(target).getParentFile().mkdir();
        if(des.equals(target)){
        }
        else{
            try{
                InputStream in = new FileInputStream(des);
                OutputStream out = new FileOutputStream(target);
                long max = 0;
                max = new File(des).length();
                byte[] buf = new byte[1024];
                int len;
                long use = 0;
                while ((len = in.read(buf)) > 0) {
                    use+=len;
                    out.write(buf, 0, len);
                    out.flush();
                }
                in.close();
                out.close();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
    public void ClearTransection() {
        Pro_Msg.setText("Clear Transection File....  อาจใช้เวลานาน...กรุณารอสักครู่ ");
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from balance";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from billno";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from billcredit";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_sale";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_saleset";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from tablefile";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_ar";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_crar";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_cupon";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_gift";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_promotion";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from paidiofile";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from billar";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from billret";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from kictran";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        //For Charge
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from billnocharge";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_charge";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "delete from t_chargeset";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        TextArea1.append("Clear All Transection File....OK\n ");
    }
    public void copyfile(String srFile, String dtFile) {
            try {
                File f1 = new File(srFile);
                File f2 = new File(dtFile);
                InputStream in = new FileInputStream(f1);
                OutputStream out = new FileOutputStream(f2);
                byte[] buf = new byte[1024];
                int len;
                while ((len = in.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
                in.close();
                out.close();
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this," in the specified directory.");
                processStop = true ;
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,"copy file :"+e.getMessage());
                processStop = true ;
            }
        }
    public void MoveEjFile() {
        Pro_Msg.setText("Copy Ej-File To EjPath... ");
        String EjPath = "C:/spapplication/ejpath/" + FileDateFmt.format(EndofdayDate);
        String Present_DayPath = "C:/spapplication/present_day";
        File TempPath2 = new File(EjPath);
        File TempPath1 = new File(Present_DayPath);
        DirectoryUtility dirUtil = new DirectoryUtility();
        //try {
            if (!TempPath2.exists()) {
                try {
                    if (!dirUtil.createDir(TempPath2)) {
                        JOptionPane.showMessageDialog(this, "Can'n Create" + TempPath2);
                        processStop = true;
                    }
                } catch (IOException ex) {
                    //Logger.getLogger(Endofday.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Can'n Create" + TempPath2);
                    processStop = true;
                }
            }
            if (!TempPath1.exists()) {
                JOptionPane.showMessageDialog(this, "ไม่พบข้อมูล ใบกำกับภาษีขาย รายวัน ..." + TempPath1);
                    processStop  = true ;
            }
        //} catch (IOException ex) {
        //    Logger.getLogger(UpdateDataFromCenter.class.getName()).log(Level.SEVERE, null, ex);
        //}
        File fl[] = TempPath1.listFiles();
        if (!processStop) {
            String TempFileName = ""  ;
            String SourceFile ;
            String DestFile  ;
            for (int i=0;i<fl.length;i++) {
                Pro_Msg.setText("Copy Ej-File To EjPath... "+"Rec : "+IntFmt.format(i)+"/"+IntFmt.format(fl.length));
                TempFileName = fl[i].getName() ;
                SourceFile = Present_DayPath+"/"+TempFileName ;
                DestFile = EjPath+"/"+TempFileName ;
                copyfile(SourceFile,DestFile) ;
            }
        }
        if (!processStop) {
            try {
                for (int i = 0; i < fl.length; i++) {
                    //if(fl[i].getName().indexOf(".frm")!=-1||fl[i].getName().indexOf(".MYD")!=-1){
                        dirUtil.deleteDir(fl[i]);
                    //}
                }
            } catch (IOException ex) {
                Logger.getLogger(UpdateDataFromCenter.class.getName()).log(Level.SEVERE, null, ex);
            }
            TextArea1.append("Copy Ej-File To EjPath... ....OK\n ");
        } else {
            TextArea1.append("Copy Ej-File To EjPath... ....Error\n ");
        }
        
    }
    
    //Sub Procedure

    public Boolean SeekS_PaidIO(String XIndex) {
        Boolean RetVal = false;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile = "select *from s_paidio where pindex='" + XIndex + "'";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            rec.first();
            if (rec.getRow() == 0) {
                RetVal = false;
            } else {
                RetVal = true;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;

    }

    public Boolean SeekS_Sale(Date EndofdayDate, String XCode) {
        Boolean RetVal = false;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile = "select *from s_sale where (s_date='" + SqlDateFmt.format(EndofdayDate) + "') and (s_pcode='" + XCode + "') ";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            rec.first();
            if (rec.getRow() == 0) {
                RetVal = false;
            } else {
                RetVal = true;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;

    }

    public int GetActionMon(Date EndofdayDate) {
        int RetVal = 0;
        SimpleDateFormat XYear = new SimpleDateFormat("yyyy", Locale.ENGLISH);
        SimpleDateFormat XMonth = new SimpleDateFormat("MM", Locale.ENGLISH);
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile = "select *from company";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                String TempYear = XYear.format(rec.getDate("accterm"));
                String TempMonth = XMonth.format(rec.getDate("accterm"));
                String CurYear = XYear.format(EndofdayDate);
                String CurMonth = XMonth.format(EndofdayDate);
                if (TempYear.equals(CurYear)) {
                    RetVal = Integer.parseInt(CurMonth) + 12;
                } else {
                    if (Integer.parseInt(CurYear) == Integer.parseInt(TempYear) - 1) {
                        RetVal = Integer.parseInt(CurMonth);
                    } else {
                        RetVal = 0;
                    }
                }
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;
    }

    public Boolean SeekStkFile(String TempCode, String T_Stk) {
        Boolean RetVal = false;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile = "select *from stkfile where (bpcode='" + TempCode + "') and (bstk='" + T_Stk + "') ";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            rec.first();
            if (rec.getRow() == 0) {
                RetVal = false;
            } else {
                RetVal = true;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;

    }

    public void SaveToTerminal(FinalcialRec TranRec) {
        String TempMacNo = TranRec.MacNo1;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from paidiofile where (flage='I')and (terminal='" + TempMacNo + "')";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    TranRec.Paid_InCnt = TranRec.Paid_InCnt + 1;
                    TranRec.Paid_In = TranRec.Paid_In + rec.getDouble("paidinamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from paidiofile where (flage='O')and (terminal='" + TempMacNo + "')";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    TranRec.Paid_OutCnt = TranRec.Paid_OutCnt + 1;
                    TranRec.Paid_Out = TranRec.Paid_Out + rec.getDouble("paidoutamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select terminal,fat,sum(amount),count(amount) from t_ar " +
                    " where (terminal='" + TempMacNo + "') and (fat<>'V') group by fat";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    TranRec.ArPaymentCnt = rec.getInt("count(amount)");
                    TranRec.ArPayment = rec.getDouble("sum(amount)");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String InsertQuery = "insert into terminal (s_bran,t_date,t_macno,deptsum,dsales,salevat,salenon," +
                    "svat,pcust,cust,ncash,cash,ncupon,cupon,nmisc,misc,npaidout,paidout,npaidin,paidin,nsubdiscb," +
                    "subdiscb,nvoid,void,nrefund,refund,ngenrefund,genrefund,nitemdisc,itemdisc,nsubdiscy,subdiscy," +
                    "nsubdisc,subdisc,nsubdiscs,subdiscs,ncharge,charge,nservice,service,nosales,t_user,tmdate," +
                    "ntrain,disctrain,ndisccu,disccu,discpro,discdayend,neatin,ceatin,eatin,eatinnet,ntakeaway,ctakeaway," +
                    "takeaway,takeawaynet,ndelivery,cdelivery,delivery,deliverynet,npinto,cpinto,pinto,pintonet,nwhole," +
                    "cwhole,whole,wholenet,nar,ar) " +
                    "values (?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ," +
                    "?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?)";
            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
            prm.setString(1, _BranCode);
            prm.setString(2, SqlDateFmt.format(EndofdayDate));
            prm.setString(3, TranRec.MacNo1);
            prm.setDouble(4, TranRec.Dept_Sum);
            prm.setDouble(5, TranRec.Net_Sale);
            prm.setDouble(6, TranRec.SaleVat);
            prm.setDouble(7, TranRec.SaleNonVat);
            prm.setDouble(8, TranRec.VatAmt);
            prm.setDouble(9, TranRec.Customer);
            prm.setDouble(10, TranRec.CntBill);
            prm.setDouble(11, TranRec.CashCnt);
            prm.setDouble(12, TranRec.Cash);
            prm.setDouble(13, TranRec.Cupon_DiscCnt);
            prm.setDouble(14, TranRec.Cupon_Disc);
            prm.setDouble(15, TranRec.NMist);
            prm.setDouble(16, TranRec.Mist);
            prm.setDouble(17, TranRec.Paid_OutCnt);
            prm.setDouble(18, TranRec.Paid_Out);
            prm.setDouble(19, TranRec.Paid_InCnt);
            prm.setDouble(20, TranRec.Paid_In);
            prm.setDouble(21, TranRec.Fast_DiscCnt);
            prm.setDouble(22, TranRec.Fast_Disc);
            prm.setDouble(23, TranRec.CntVoid);
            prm.setDouble(24, TranRec.VoidValue);
            prm.setDouble(25, TranRec.CntBillVoid);
            prm.setDouble(26, TranRec.AmtBillVoid);
            prm.setDouble(27, TranRec.Gen_RefundCnt);
            prm.setDouble(28, TranRec.Gen_Refund);
            prm.setDouble(29, TranRec.Item_DiscCnt);
            prm.setDouble(30, TranRec.Item_Disc);
            prm.setDouble(31, TranRec.Emp_DiscCnt);
            prm.setDouble(32, TranRec.Emp_Disc);
            prm.setDouble(33, TranRec.Sub_DiscCnt);
            prm.setDouble(34, TranRec.Sub_Disc);
            prm.setDouble(35, TranRec.Vip_DiscCnt);
            prm.setDouble(36, TranRec.Vip_Disc);
            prm.setDouble(37, TranRec.ChargeCnt);
            prm.setDouble(38, TranRec.Charge);
            prm.setDouble(39, TranRec.ServiceCnt);
            prm.setDouble(40, TranRec.Service);
            prm.setDouble(41, 0);
            prm.setString(42, "XXXXXX");
            prm.setString(43, SqlDateFmt.format(date));
            prm.setDouble(44, TranRec.Train_DiscCnt);
            prm.setDouble(45, TranRec.Train_Disc);
            prm.setDouble(46, TranRec.Cupon_DiscCnt);
            prm.setDouble(47, TranRec.Cupon_Disc);
            prm.setDouble(48, TranRec.Promotion);
            prm.setDouble(49, 0);
            prm.setDouble(50, TranRec.Eat_In_Cnt);
            prm.setDouble(51, TranRec.Eat_In_Cust);
            prm.setDouble(52, TranRec.Eat_In_Amt);
            prm.setDouble(53, TranRec.Eat_In_Net);
            prm.setDouble(54, TranRec.Take_AwayCnt);
            prm.setDouble(55, TranRec.Take_AwayCust);
            prm.setDouble(56, TranRec.Take_AwayAmt);
            prm.setDouble(57, TranRec.Take_AwayNet);
            prm.setDouble(58, TranRec.DeliveryCnt);
            prm.setDouble(59, TranRec.DeliveryCust);
            prm.setDouble(60, TranRec.DeliveryAmt);
            prm.setDouble(61, TranRec.DeliveryNet);
            prm.setDouble(62, TranRec.PintoCnt);
            prm.setDouble(63, TranRec.PintoCust);
            prm.setDouble(64, TranRec.PintoAmt);
            prm.setDouble(65, TranRec.PintoNet);
            prm.setDouble(66, TranRec.WholeCnt);
            prm.setDouble(67, TranRec.WholeCust);
            prm.setDouble(68, TranRec.WholeAmt);
            prm.setDouble(69, TranRec.WholeNet);
            prm.setDouble(70, TranRec.ArPaymentCnt);
            prm.setDouble(71, TranRec.ArPayment);
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    public void SaveToCashier(FinalcialRec TranRec) {
        String TempMacNo = TranRec.MacNo1;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from paidiofile where (flage='I')and (cashier='" + TempMacNo + "')";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    TranRec.Paid_InCnt = TranRec.Paid_InCnt + 1;
                    TranRec.Paid_In = TranRec.Paid_In + rec.getDouble("paidinamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from paidiofile where (flage='O')and (cashier='" + TempMacNo + "')";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    TranRec.Paid_OutCnt = TranRec.Paid_OutCnt + 1;
                    TranRec.Paid_Out = TranRec.Paid_Out + rec.getDouble("paidoutamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select terminal,fat,sum(amount),count(amount) from t_ar " +
                    " where (cashier='" + TempMacNo + "') and (fat<>'V') group by fat";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    TranRec.ArPaymentCnt = rec.getInt("count(amount)");
                    TranRec.ArPayment = rec.getDouble("sum(amount)");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String InsertQuery = "insert into cashier (s_bran,t_date,t_cashno,deptsum,dsales,salevat,salenon," +
                    "svat,pcust,cust,ncash,cash,ncupon,cupon,nmisc,misc,npaidout,paidout,npaidin,paidin,nsubdiscb," +
                    "subdiscb,nvoid,void,nrefund,refund,ngenrefund,genrefund,nitemdisc,itemdisc,nsubdiscy,subdiscy," +
                    "nsubdisc,subdisc,nsubdiscs,subdiscs,ncharge,charge,nservice,service,nosales,t_user,tmdate," +
                    "ntrain,disctrain,ndisccu,disccu,discpro,discdayend,neatin,ceatin,eatin,eatinnet,ntakeaway,ctakeaway," +
                    "takeaway,takeawaynet,ndelivery,cdelivery,delivery,deliverynet,npinto,cpinto,pinto,pintonet,nwhole," +
                    "cwhole,whole,wholenet,nar,ar) " +
                    "values (?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ," +
                    "?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?,?,?,?,?,?,?,?,?,? ,?)";
            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
            prm.setString(1, _BranCode);
            prm.setString(2, SqlDateFmt.format(EndofdayDate));
            prm.setString(3, TranRec.MacNo1);
            prm.setDouble(4, TranRec.Dept_Sum);
            prm.setDouble(5, TranRec.Net_Sale);
            prm.setDouble(6, TranRec.SaleVat);
            prm.setDouble(7, TranRec.SaleNonVat);
            prm.setDouble(8, TranRec.VatAmt);
            prm.setDouble(9, TranRec.Customer);
            prm.setDouble(10, TranRec.CntBill);
            prm.setDouble(11, TranRec.CashCnt);
            prm.setDouble(12, TranRec.Cash);
            prm.setDouble(13, TranRec.Cupon_DiscCnt);
            prm.setDouble(14, TranRec.Cupon_Disc);
            prm.setDouble(15, TranRec.NMist);
            prm.setDouble(16, TranRec.Mist);
            prm.setDouble(17, TranRec.Paid_OutCnt);
            prm.setDouble(18, TranRec.Paid_Out);
            prm.setDouble(19, TranRec.Paid_InCnt);
            prm.setDouble(20, TranRec.Paid_In);
            prm.setDouble(21, TranRec.Fast_DiscCnt);
            prm.setDouble(22, TranRec.Fast_Disc);
            prm.setDouble(23, TranRec.CntVoid);
            prm.setDouble(24, TranRec.VoidValue);
            prm.setDouble(25, TranRec.CntBillVoid);
            prm.setDouble(26, TranRec.AmtBillVoid);
            prm.setDouble(27, TranRec.Gen_RefundCnt);
            prm.setDouble(28, TranRec.Gen_Refund);
            prm.setDouble(29, TranRec.Item_DiscCnt);
            prm.setDouble(30, TranRec.Item_Disc);
            prm.setDouble(31, TranRec.Emp_DiscCnt);
            prm.setDouble(32, TranRec.Emp_Disc);
            prm.setDouble(33, TranRec.Sub_DiscCnt);
            prm.setDouble(34, TranRec.Sub_Disc);
            prm.setDouble(35, TranRec.Vip_DiscCnt);
            prm.setDouble(36, TranRec.Vip_Disc);
            prm.setDouble(37, TranRec.ChargeCnt);
            prm.setDouble(38, TranRec.Charge);
            prm.setDouble(39, TranRec.ServiceCnt);
            prm.setDouble(40, TranRec.Service);
            prm.setDouble(41, 0);
            prm.setString(42, "XXXXXX");
            prm.setString(43, SqlDateFmt.format(date));
            prm.setDouble(44, TranRec.Train_DiscCnt);
            prm.setDouble(45, TranRec.Train_Disc);
            prm.setDouble(46, TranRec.Cupon_DiscCnt);
            prm.setDouble(47, TranRec.Cupon_Disc);
            prm.setDouble(48, TranRec.Promotion);
            prm.setDouble(49, 0);
            prm.setDouble(50, TranRec.Eat_In_Cnt);
            prm.setDouble(51, TranRec.Eat_In_Cust);
            prm.setDouble(52, TranRec.Eat_In_Amt);
            prm.setDouble(53, TranRec.Eat_In_Net);
            prm.setDouble(54, TranRec.Take_AwayCnt);
            prm.setDouble(55, TranRec.Take_AwayCust);
            prm.setDouble(56, TranRec.Take_AwayAmt);
            prm.setDouble(57, TranRec.Take_AwayNet);
            prm.setDouble(58, TranRec.DeliveryCnt);
            prm.setDouble(59, TranRec.DeliveryCust);
            prm.setDouble(60, TranRec.DeliveryAmt);
            prm.setDouble(61, TranRec.DeliveryNet);
            prm.setDouble(62, TranRec.PintoCnt);
            prm.setDouble(63, TranRec.PintoCust);
            prm.setDouble(64, TranRec.PintoAmt);
            prm.setDouble(65, TranRec.PintoNet);
            prm.setDouble(66, TranRec.WholeCnt);
            prm.setDouble(67, TranRec.WholeCust);
            prm.setDouble(68, TranRec.WholeAmt);
            prm.setDouble(69, TranRec.WholeNet);
            prm.setDouble(70, TranRec.ArPaymentCnt);
            prm.setDouble(71, TranRec.ArPayment);
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    public String GetGovermentTax(String TempMacNo) {
        String RetVal = "";
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String LoadTableFile = "select *from poshwsetup where (terminal='" + TempMacNo + "')";
            ResultSet rec = stmt.executeQuery(LoadTableFile);
            rec.first();
            if (rec.getRow() == 0) {
                RetVal = "";
            } else {
                RetVal = rec.getString("macno");
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return RetVal;

    }

    public void InsertGPHead(String SaleDate, String TBran, Double SumA, Double SumB, Double SumC, Double SumD, Double SumE, Double SumF, Double SumG, Double SumH, Double SumEarnest) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "insert into gpheader (s_date,s_bran,dept_sum,normal_sale,promotion_sale,normal_disc,promotion_disc,net_sale,normal_net,promotion_net,earnest) " +
                    "values ('" + SaleDate + "'," + "'" + TBran + "'," + SumA + "," + SumB + "," + SumC + "," + SumD + "," + SumE + "," + SumF + "," + SumG + "," + SumH + "," + SumEarnest + ")";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public Boolean SeekGPDetail(String SaleDate, String TBran, String PTType, String PTCode) {
        Boolean ReturnVal = false;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "select *from gpdetail where (s_date='" + SaleDate + "') and (s_bran='" + TBran + "') and (p_type='" + PTType + "') and (p_code='" + PTCode + "') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
                ReturnVal = false;
            } else {
                ReturnVal = true;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return ReturnVal;
    }

    public void UpdateGPDetail(String SaleDate, String TBran, String PTType, String PTCode, String PTName, Double SumA, Double SumB, Double SumC, Double SumD) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "update gpdetail set p_name='" + PTName + "',p_gross=p_gross+" + SumA + ",p_qty=p_qty+" + SumB + ",p_disc=p_disc+" + SumC + ",p_net=p_net+" + SumD + "  " +
                    "where (s_date='" + SaleDate + "') and (s_bran='" + TBran + "') and (p_type='" + PTType + "') and (p_code='" + PTCode + "') ";

            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void InsertGPDetail(String SaleDate, String TBran, String PTType, String PTCode, String PTName, Double SumA, Double SumB, Double SumC, Double SumD) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "insert into gpdetail (s_date,s_bran,p_type,p_code,p_name,p_gross,p_qty,p_disc,p_net) " +
                    "values ('" + SaleDate + "','" + TBran + "','" + PTType + "','" + PTCode + "','" + PTName + "'," + SumA + "," + SumB + "," + SumC + "," + SumD + ")";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public String SeekPromotionName(String TCode) {
        String ReturnValues = "";
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String UserGroupFile = "select *from protab where procode='" + TCode + "'";
            ResultSet rec = stmt.executeQuery(UserGroupFile);
            rec.first();
            if (rec.getRow() == 0) {
                ReturnValues = "*****";
            } else {
                ReturnValues = rec.getString("prodesc");
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
        }
        return ReturnValues;
    }

    public void RJProcessDept(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    
    public void RJProcessService(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_serviceamt) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_serviceamt)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_serviceamt)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_serviceamt)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessCupon(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_subdiscamt),sum(b_itemdiscamt)," +
                    "sum(b_prodiscamt),sum(b_spadiscamt),sum(b_cupondiscamt),sum(b_subdiscbath) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_subdiscamt)")+rec.getDouble("sum(b_itemdiscamt)")+rec.getDouble("sum(b_prodiscamt)")+rec.getDouble("sum(b_spadiscamt)")+rec.getDouble("sum(b_cupondiscamt)")+rec.getDouble("sum(b_subdiscbath)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_subdiscamt)")+rec.getDouble("sum(b_itemdiscamt)")+rec.getDouble("sum(b_prodiscamt)")+rec.getDouble("sum(b_spadiscamt)")+rec.getDouble("sum(b_cupondiscamt)")+rec.getDouble("sum(b_subdiscbath)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_subdiscamt)")+rec.getDouble("sum(b_itemdiscamt)")+rec.getDouble("sum(b_prodiscamt)")+rec.getDouble("sum(b_spadiscamt)")+rec.getDouble("sum(b_cupondiscamt)")+rec.getDouble("sum(b_subdiscbath)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessMember(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_memdiscamt) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_memdiscamt)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_memdiscamt)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_memdiscamt)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessEmp(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_empdiscamt),sum(b_traindiscamt) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_empdiscamt)")+rec.getDouble("sum(b_traindiscamt)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_empdiscamt)")+rec.getDouble("sum(b_traindiscamt)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_empdiscamt)")+rec.getDouble("sum(b_traindiscamt)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessFastival(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_fastdiscamt),sum(b_earnest) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_fastdiscamt)")+rec.getDouble("sum(b_earnest)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_fastdiscamt)")+rec.getDouble("sum(b_earnest)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_fastdiscamt)")+rec.getDouble("sum(b_earnest)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessVat(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_vat) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(vat)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(vat)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(vat)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessGiftSale(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessGift(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_giftvoucher) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_giftvoucher)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_giftvoucher)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_giftvoucher)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select terminal,fat,Sum(cupon) from billar " +
                    "where (fat<>'V') group by terminal";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("terminal").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("Sum(cupon)");
                    }
                    if (rec.getString("terminal").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("Sum(cupon)");
                    }
                    if (rec.getString("terminal").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("Sum(cupon)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessARPayment(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select terminal,fat,sum(stotal) from billar " +
                    "where (fat<>'V') group by terminal";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("terminal").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(stotal)");
                    }
                    if (rec.getString("terminal").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(stotal)");
                    }
                    if (rec.getString("terminal").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(stotal)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessARSale(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_Accramt) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_Accramt)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_accramt)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_accramt)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessCredit(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,sum(b_cramt1) from billcredit " +
                    "group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_cramt1)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_cramt1)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_cramt1)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select terminal,fat,Sum(credit) from billar " +
                    "where (fat<>'V') group by terminal";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("terminal").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("Sum(credit)");
                    }
                    if (rec.getString("terminal").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("Sum(credit)");
                    }
                    if (rec.getString("terminal").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("Sum(credit)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessReturn(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
        String TGroup = "00" + TDept;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_group,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_group='" + TGroup + "') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select terminal,fat,sum(stotal) from billret " +
                    "where (fat<>'V') group by terminal";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("terminal").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(stotal)");
                    }
                    if (rec.getString("terminal").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(stotal)");
                    }
                    if (rec.getString("terminal").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(stotal)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessDelivery(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
       
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select macno,r_void,r_refund,sum(r_total) from t_sale " +
                    "where (r_void<>'V') and (r_refund<>'V') and (r_etd='D') group by macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(r_total)");
                    }
                    if (rec.getString("macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(r_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessBillDelivery(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
       
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,b_etd,count(b_total) from billno " +
                    "where (b_void<>'V') and (b_etd='D') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("count(b_total)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("count(b_total)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("count(b_total)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessCustomer(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
       
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,sum(b_cust) from billno " +
                    "where (b_void<>'V') group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("sum(b_cust)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("sum(b_cust)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("sum(b_cust)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void RJProcessSlipCredit(String TRjNo, String TDept, String TProcess, String TMac1, String TMac2, String TMac3) {
        Double TAmt1 = 0.0;
        Double TAmt2 = 0.0;
        Double TAmt3 = 0.0;
       
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select b_macno,b_void,count(b_cramt1) from billno " +
                    "where (b_void<>'V') and (b_cramt1>0) group by b_macno";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("b_macno").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("count(b_cramt1)");
                    }
                    if (rec.getString("b_macno").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("count(b_cramt1)");
                    }
                    if (rec.getString("b_macno").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("count(b_cramt1)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select terminal,credit,fat,count(credit) from billar " +
                    "where (fat<>'V') and (credit>0) group by terminal";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    if (rec.getString("terminal").equals(TMac1)) {
                        TAmt1 = TAmt1+rec.getDouble("count(credit)");
                    }
                    if (rec.getString("terminal").equals(TMac2)) {
                        TAmt2 = TAmt2+rec.getDouble("count(credit)");
                    }
                    if (rec.getString("terminal").equals(TMac3)) {
                        TAmt3 = TAmt3+rec.getDouble("count(credit)");
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        UpdateSurRj(TRjNo, TAmt1, TAmt2, TAmt3);
    }
    public void UpdateSurRj(String TRjNo, Double TAmt1, Double TAmt2, Double TAmt3) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String InsertQuery = "update surrj set mac1=?,mac2=?,mac3=? where rjno=? " ;
            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
            prm.setDouble(1, TAmt1);
            prm.setDouble(2, TAmt2);
            prm.setDouble(3, TAmt3);
            prm.setString(4, TRjNo);
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    public void UpdateSurRj2(String TRjNo, Double TAmt1, Double TAmt2, Double TAmt3,String FixCode) {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String InsertQuery = "update surrj set mac1=?,mac2=?,mac3=?,fixcode=? where rjno=? " ;
            PreparedStatement prm = (PreparedStatement) MySQLConnect.con.prepareStatement(InsertQuery);
            prm.setDouble(1, TAmt1);
            prm.setDouble(2, TAmt2);
            prm.setDouble(3, TAmt3);
            prm.setString(4, FixCode) ;
            prm.setString(5, TRjNo);
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    public void ProcessSumRJ(String TRJNo,String TProcess) {
        Double XSum1 = 0.0 ;
        Double XSum2 = 0.0 ;
        Double XSum3 = 0.0 ;
        String XRJNo = "" ;
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SQLQuery = "select *from surrj";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    XRJNo = rec.getString("rjno") ;
                    int XPoint = TProcess.indexOf(XRJNo) ;
                    if (XPoint>0) {
                       String XSign = TProcess.substring(XPoint-1,XPoint) ;
                       if (XSign.equals("-")) {
                           XSum1 = XSum1-rec.getDouble("mac1") ;
                           XSum2 = XSum2-rec.getDouble("mac2") ;
                           XSum3 = XSum3-rec.getDouble("mac3") ;
                       } else {
                           XSum1 = XSum1+rec.getDouble("mac1") ;
                           XSum2 = XSum2+rec.getDouble("mac2") ;
                           XSum3 = XSum3+rec.getDouble("mac3") ;
                       }
                    }
                } while (rec.next());
            }
            UpdateSurRj(TRJNo, XSum1, XSum2, XSum3);
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    } 
} //end of class process file   
}
