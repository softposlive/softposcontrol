package softpos.gui;


import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import utilities.MySQLConnect;

public class jdi_UserGroupSetup extends javax.swing.JDialog {

    DefaultTableModel model1;
    DefaultTableModel model2;
    private String[] onAct = new String[92];

    public jdi_UserGroupSetup(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        setTableModel();

        loadGroupName();
    }

    private void setTableModel() {
        model1 = (DefaultTableModel) tblgroupName.getModel();
        model2 = (DefaultTableModel) tblmenu.getModel();
        tblmenu.setShowGrid(true);
        tblmenu.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblmenu.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblmenu.setRowSelectionAllowed(true);
        tblmenu.setShowGrid(true);
        tblmenu.setBackground(java.awt.Color.WHITE);
        tblmenu.setGridColor(Color.gray);
        JTableHeader header = tblmenu.getTableHeader();
        header.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 16));
        tblmenu.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 14));
        tblmenu.setRowHeight(25);
        tblmenu.getColumnModel().getColumn(0).setPreferredWidth(110);
        tblmenu.getColumnModel().getColumn(1).setPreferredWidth(350);
        tblmenu.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblmenu.setBackground(java.awt.Color.WHITE);
        tblmenu.setGridColor(Color.gray);
        TableColumnModel tcm = tblmenu.getColumnModel();
        DefaultTableCellRenderer d;

        d = new DefaultTableCellRenderer();
        d.setHorizontalAlignment(SwingConstants.LEADING);
        tcm.getColumn(0).setCellRenderer(d);
        tcm.getColumn(1).setCellRenderer(d);

        d = new DefaultTableCellRenderer();
        d.setHorizontalAlignment(SwingConstants.CENTER);
        tcm.getColumn(2).setCellRenderer(d);

        JTableHeader header2 = tblgroupName.getTableHeader();
        header2.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 16));
        tblgroupName.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 14));
        tblgroupName.setRowHeight(25);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnOk = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblgroupName = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblmenu = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("กำหนดรหัสกลุ่มผู้ใช้งาน (User Group Setup)");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(134, 149, 134), 2));

        txt1.setFont(new java.awt.Font("Norasi", 0, 14));
        txt1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt1KeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Norasi", 0, 14));
        jLabel1.setText("รหัสกลุ่มผู้ใช้งาน");

        btnOk.setFont(new java.awt.Font("Norasi", 0, 14));
        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        btnOk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnOkKeyReleased(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Norasi", 0, 14));
        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblgroupName.setFont(new java.awt.Font("Norasi", 0, 14));
        tblgroupName.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GroupName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblgroupName.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblgroupName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblgroupNameMouseClicked(evt);
            }
        });
        tblgroupName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblgroupNameKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblgroupName);
        tblgroupName.getColumnModel().getColumn(0).setResizable(false);

        btnSave.setFont(new java.awt.Font("Norasi", 0, 14));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.gif"))); // NOI18N
        btnSave.setText("บันทึก");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Norasi", 0, 14));
        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.gif"))); // NOI18N
        btnRemove.setText("ลบข้อมูล");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(210, Short.MAX_VALUE))
        );

        tblmenu.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tblmenu.setFont(new java.awt.Font("Norasi", 0, 14));
        tblmenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "กลุ่ม", "ชื่อเมนู/รายการ", "สิทธิการใช้งาน"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblmenu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblmenu.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblmenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1024)/2, (screenSize.height-768)/2, 1024, 768);
    }// </editor-fold>//GEN-END:initComponents

private void tblgroupNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblgroupNameMouseClicked
// TODO add your handling code here:
    if (evt.getClickCount() == 2) {
        int row = tblgroupName.getSelectedRow();
        String value = (String) model1.getValueAt(row, 0);
        txt1.setText(value);
        txt1.requestFocus();
        txt1.selectAll();
    }
}//GEN-LAST:event_tblgroupNameMouseClicked

private void tblgroupNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblgroupNameKeyReleased
// TODO add your handling code here:
//    int row = tblgroupName.getSelectedRow()-1;
//        String value = (String)model1.getValueAt(row,0);
//        txt1.setText(value); 
}//GEN-LAST:event_tblgroupNameKeyReleased

private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
// TODO add your handling code here:
    String userName = txt1.getText().trim();
    if (userName.length() > 0) {
        if (seekUserGroup()) {
            updateTempuserMenu();
            loadMenu();
        } else {
            updateTempuserOnCreate();
            loadMenu();
        }
        tblmenu.requestFocus();
    } else {
        JOptionPane.showMessageDialog(this, "กรุณาป้อนรหัสผู้ใช้งาน (User-Name) !!", "Ptestprocej", JOptionPane.WARNING_MESSAGE);
        txt1.requestFocus();
    }
}//GEN-LAST:event_btnOkActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    dispose();
}//GEN-LAST:event_jButton2ActionPerformed

private void txt1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt1KeyReleased
// TODO add your handling code here:
    if (txt1.getText().trim().length() > 0) {
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnOk.requestFocus();
        }
    }
}//GEN-LAST:event_txt1KeyReleased

private void btnOkKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnOkKeyReleased
    if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
        btnOkActionPerformed(null);
    }
}//GEN-LAST:event_btnOkKeyReleased

private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
    int cnt = model2.getRowCount();
    if (cnt > 0) {
        String groupName = txt1.getText().trim();
        if (groupName.length() > 0) {
            if (setActUpdate()) {
                int confirm = JOptionPane.showConfirmDialog(this, "ยืนยันบันทึกกลุ่มผู้ใช้งาน", "บันทึกข้อมูล", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.OK_OPTION) {
                    if (cmdSaveUserGroup()) {
                        JOptionPane.showMessageDialog(this, "บันทึกข้อมูลกลุ่มผู้ใช้งานแล้ว");
                        txt1.setText("");
                        cleartblMenu();
                        loadGroupName();
                        txt1.requestFocus();
                    } else {
                        JOptionPane.showMessageDialog(this, "เกิดข้อผิดพลาด ไม่สามารถบันทึกข้อมูลกลุ่มผู้ใช้งานได้", "Error !", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                //JOptionPane.showMessageDialog(this, "ท่านระบุสิทธิการใช้งานไม่ถุกต้อง กรุณาระบุสิทธิการใช้งาน Y หรือ N เท่านั้น");
            }
        }
    } else {
        txt1.requestFocus();
    }
}//GEN-LAST:event_btnSaveActionPerformed

private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
    if (txt1.getText().trim().length() > 0) {
        int cnt = model1.getRowCount();
        String check = "";
        for (int i = 0; i < cnt; i++) {
            check = (String) model1.getValueAt(i, 0);
            if (check.equals(txt1.getText().trim())) {
                int con = JOptionPane.showConfirmDialog(this, "คุณต้องการลบข้อมูลรายการนี้หรือไม่ ?", "Confirm", JOptionPane.OK_OPTION);
                if (con == JOptionPane.OK_OPTION) {
                    String mess = cmdRemoveUserGroup();
                    JOptionPane.showMessageDialog(this, mess, "Information", JOptionPane.INFORMATION_MESSAGE);
                }
                break;
            }
        }
    }



}//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                jdi_UserGroupSetup dialog = new jdi_UserGroupSetup(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblgroupName;
    private javax.swing.JTable tblmenu;
    private javax.swing.JTextField txt1;
    // End of variables declaration//GEN-END:variables
    private String[] cont = new String[14];//0-13
    private String[] sale = new String[33];
    private String[] stock = new String[46];

    private boolean setActUpdate() {
        String check = "";

        for (int i = 0; i < 14; i++) {
            check = (String) model2.getValueAt(i, 2);
            if (check.length() != 1) {
                JOptionPane.showMessageDialog(this, "กรุณาระบุสิทธิการใช้งาน  1 ตัวอักษร");
                tblmenu.setRowSelectionInterval(2, i);
                return false;
            } else {
                if (check.toLowerCase().equals("y") || check.toLowerCase().equals("n")) {
                    cont[i] = check.toUpperCase();
                } else {
                    JOptionPane.showMessageDialog(this, "ท่านระบุสิทธิการใช้งานไม่ถุกต้อง กรุณาระบุสิทธิการใช้งาน Y หรือ N เท่านั้น");
                    tblmenu.setRowSelectionInterval(2, i);
                    return false;
                }
            }
        }

        for (int i = 1; i < 33; i++) {
            check = (String) model2.getValueAt(i + 13, 2);
            if (check.length() != 1) {
                JOptionPane.showMessageDialog(this, "กรุณาระบุสิทธิการใช้งาน  1 ตัวอักษร");
                tblmenu.setRowSelectionInterval(2, i + 13);
                return false;
            } else {
                if (check.toLowerCase().equals("y") || check.toLowerCase().equals("n")) {
                    sale[i] = check.toUpperCase();
                } else {
                    JOptionPane.showMessageDialog(this, "ท่านระบุสิทธิการใช้งานไม่ถุกต้อง กรุณาระบุสิทธิการใช้งาน Y หรือ N เท่านั้น");
                    tblmenu.setRowSelectionInterval(2, i + 13);
                    return false;
                }
            }
        }

        for (int i = 0; i < 46; i++) {
            check = (String) model2.getValueAt(i + 46, 2);
            if (check.length() != 1) {
                JOptionPane.showMessageDialog(this, "กรุณาระบุสิทธิการใช้งาน  1 ตัวอักษร");
                tblmenu.setRowSelectionInterval(2, i + 46);
                return false;
            } else {
                if (check.toLowerCase().equals("y") || check.toLowerCase().equals("n")) {
                    stock[i] = check.toUpperCase();
                } else {
                    JOptionPane.showMessageDialog(this, "ท่านระบุสิทธิการใช้งานไม่ถุกต้อง กรุณาระบุสิทธิการใช้งาน Y หรือ N เท่านั้น");
                    tblmenu.setRowSelectionInterval(2, i + 46);
                    return false;//break end;

                }
            }

        }
        return true;
    }

    private void loadGroupName() {
        Statement stmt = null;
        ResultSet rs = null;
        String sql = "SELECT UserName FROM usergroup ";
        try {
            stmt = (Statement) MySQLConnect.con.createStatement();
            rs = stmt.executeQuery(sql);
            if (rs != null) {
                cleartblGroupName();
            }
            while (rs.next()) {
                String[] data = new String[1];
                data[0] = rs.getString(1);
                model1.addRow(data);
            }
            rs.close();
            stmt.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void cleartblGroupName() {
        int cnt = model1.getRowCount();
        if (cnt > 0) {
            for (int i = 0; i < cnt; i++) {
                model1.removeRow(0);
            }
        }
    }

    private void cleartblMenu() {
        int cnt = model2.getRowCount();
        if (cnt > 0) {
            for (int i = 0; i < cnt; i++) {
                model2.removeRow(0);
            }
        }
    }

    private void loadMenu() {
        Statement stmt = null;
        ResultSet rs = null;
        String sql = "Select * From tempUsermenu ";
        try {
            stmt = (Statement) MySQLConnect.con.createStatement();
            rs = stmt.executeQuery(sql);
            if (rs != null) {
                cleartblMenu();
            }
            while (rs.next()) {
                String[] data = new String[3];
                data[0] = "  " + rs.getString("MGROUP");
                data[1] = rs.getString("MDESC");
                data[2] = rs.getString("ONACT");
                model2.addRow(data);
            }
            rs.close();
            stmt.close();
            tblmenu.setRowSelectionInterval(0, 0);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private boolean seekUserGroup() {
        Statement stmt = null;
        ResultSet rs = null;//

        String sql = "Select  UserName From usergroup Where  UserName = '" + txt1.getText().trim() + "'";
        try {
            stmt = (Statement) MySQLConnect.con.createStatement();
            rs = stmt.executeQuery(sql);

            if (rs.next()) {
                rs.close();
                stmt.close();
                return true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
        return false;
    }

    private void updateTempuserOnCreate() {
        Statement stmt = null;
        String sql = "";
        int result = 0;
        try {
            stmt = (Statement) MySQLConnect.con.createStatement();
            sql = "update tempUsermenu set OnAct = 'N'";
            result = stmt.executeUpdate(sql);

            stmt.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateTempuserMenu() {
        Statement stmt = null;
        String sql = "";
        int result = 0;
        try {
            stmt = (Statement) MySQLConnect.con.createStatement();
            for (int i = 0; i < 16; i++) {
                sql = "update tempUsermenu set OnAct = " +
                        "( select Cont" + i + " from usergroup Where UserName = '" + txt1.getText().trim() + "') " +
                        "Where MCode = 'Cont" + i + "' ";
                //System.out.println(sql);
                result = stmt.executeUpdate(sql);
            }
            stmt.close();
        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            stmt = (Statement) MySQLConnect.con.createStatement();
            for (int i = 1; i < 37; i++) {
                sql = "update tempUsermenu set OnAct = " +
                        "( select Sale" + i + " from usergroup Where UserName = '" + txt1.getText().trim() + "') " +
                        "Where MCode = 'Sale" + i + "' ";
                //System.out.println(sql);
                result = stmt.executeUpdate(sql);
            }
            stmt.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            stmt = (Statement) MySQLConnect.con.createStatement();
            for (int i = 0; i < 46; i++) {
                sql = "update tempUsermenu set OnAct = " +
                        "( select Stock" + i + " from usergroup Where UserName = '" + txt1.getText().trim() + "') " +
                        "Where MCode = 'Stock" + i + "' ";
                //System.out.println(sql);
                result = stmt.executeUpdate(sql);
            }
            stmt.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean cmdSaveUserGroup() {
        setOnAct();
        Statement stmt = null;
        String sql = "";
        int result = -1;//sale index = 14-45 stock index = 46-91  con0-13

        try {
            if (seekUserGroup()) {
                sql =
                        "set Cont0 = '" + cont[0] + "',Cont1 = '" + cont[1] + "',Cont2 = '" + cont[2] + "'," +
                        "Cont3 = '" + cont[3] + "',Cont4 = '" + cont[4] + "',Cont5 = '" + cont[5] + "'," +
                        "Cont6 = '" + cont[6] + "',Cont7 = '" + cont[7] + "',Cont8 = '" + cont[8] + "'," +
                        "Cont9 = '" + cont[9] + "',Cont10 = '" + cont[10] + "',Cont11 = '" + cont[11] + "'," +
                        "Cont12 = '" + cont[12] + "',Cont13 = '" + cont[13] + "'," +
                        "Sale1 = '" + sale[1] + "',Sale2 = '" + sale[2] + "'," +
                        "Sale3 = '" + sale[3] + "',Sale4 = '" + sale[4] + "',Sale5 = '" + sale[5] + "'," +
                        "Sale6 = '" + sale[6] + "',Sale7 = '" + sale[7] + "',Sale8 = '" + sale[8] + "'," +
                        "Sale9 = '" + sale[9] + "',Sale10 = '" + sale[10] + "',Sale11 = '" + sale[11] + "'," +
                        "Sale12 = '" + sale[12] + "',Sale13 = '" + sale[13] + "',Sale14 = '" + sale[14] + "'," +
                        "Sale15 = '" + sale[15] + "',Sale16 = '" + sale[16] + "',Sale17 = '" + sale[17] + "'," +
                        "Sale18 = '" + sale[18] + "',Sale19 = '" + sale[19] + "',Sale20 = '" + sale[20] + "'," +
                        "Sale21 = '" + sale[21] + "',Sale22 = '" + sale[22] + "',Sale23 = '" + sale[23] + "'," +
                        "Sale24 = '" + sale[24] + "',Sale25 = '" + sale[25] + "',Sale26 = '" + sale[26] + "'," +
                        "Sale27 = '" + sale[27] + "',Sale28 = '" + sale[28] + "',Sale29 = '" + sale[29] + "'," +
                        "Sale30 = '" + sale[30] + "',Sale31 = '" + sale[31] + "',Sale32 = '" + sale[32] + "'," +
                        "Stock0 = '" + stock[0] + "',Stock1 = '" + stock[1] + "',Stock2 = '" + stock[2] + "'," +
                        "Stock3 = '" + stock[3] + "',Stock4 = '" + stock[4] + "',Stock5 = '" + stock[5] + "'," +
                        "Stock6 = '" + stock[6] + "',Stock7 = '" + stock[7] + "',Stock8 = '" + stock[8] + "'," +
                        "Stock9 = '" + stock[9] + "',Stock10 = '" + stock[10] + "',Stock11 = '" + stock[11] + "'," +
                        "Stock12 = '" + stock[12] + "',Stock13 = '" + stock[13] + "',Stock14 = '" + stock[14] + "'," +
                        "Stock15 = '" + stock[15] + "',Stock16 = '" + stock[16] + "',Stock17 = '" + stock[17] + "'," +
                        "Stock18 = '" + stock[18] + "',Stock19 = '" + stock[19] + "',Stock20 = '" + stock[20] + "'," +
                        "Stock21 = '" + stock[21] + "',Stock22 = '" + stock[22] + "',Stock23 = '" + stock[23] + "'," +
                        "Stock24 = '" + stock[24] + "',Stock25 = '" + stock[25] + "',Stock26 = '" + stock[26] + "'," +
                        "Stock27 = '" + stock[27] + "',Stock28 = '" + stock[28] + "',Stock29 = '" + stock[29] + "'," +
                        "Stock30 = '" + stock[30] + "',Stock31 = '" + stock[31] + "',Stock32 = '" + stock[32] + "'," +
                        "Stock33 = '" + stock[33] + "',Stock34 = '" + stock[34] + "',Stock35 = '" + stock[35] + "'," +
                        "Stock36 = '" + stock[36] + "',Stock37 = '" + stock[37] + "',Stock38 = '" + stock[38] + "'," +
                        "Stock39 = '" + stock[39] + "',Stock40 = '" + stock[40] + "',Stock41 = '" + stock[41] + "'," +
                        "Stock42 = '" + stock[42] + "',Stock43 = '" + stock[43] + "',Stock44 = '" + stock[44] + "'," +
                        "Stock45 = '" + stock[45] + "'";
                try {
                    //usergroup
                    stmt = (Statement) MySQLConnect.con.createStatement();
                    String updateGroup = "update usergroup " + sql + " Where UserName = '" + txt1.getText().trim() + "'";
                    String updatePosU = "update posuser " + sql + " Where  usergroup = '" + txt1.getText().trim() + "'";
                    //System.out.println(updateGroup);
                    //System.out.println(updatePosU);
                    result = stmt.executeUpdate(updateGroup);
                    if (result > 0) {
                        if (seekPosUser()) {
                            result = stmt.executeUpdate(updatePosU);
                            System.out.println("updateposuer ss");
                        }
                    //System.out.println("updateposuer ss");
                    }
                    stmt.close();
                } catch (Exception e) {
                    e.printStackTrace();
                    return false;
                }


//                try {
//                    stmt = (Statement)MySQLConnect.con.createStatement();
//                    for (int i = 0; i < 16; i++) {
//                        sql = "update usergroup set Cont" + i + " = '" + cont[i] + "' " +
//                                "Where UserName = '" + txt1.getText().trim() + "' ";
//                        System.out.println(sql);
//                        result = stmt.executeUpdate(sql);
//                    }
//                    stmt.close();
//                } catch (Exception e) {
//                }
//               System.out.println("\n");
//                try {
//                    stmt = (Statement)MySQLConnect.con.createStatement();
//                    for (int i = 1; i < 37; i++) {
//                        sql = "update usergroup set Sale" + i + " = '" + sale[i] + "' " +
//                                "Where UserName = '" + txt1.getText().trim() + "' ";
//                         
//                        System.out.println(sql);
//                        result = stmt.executeUpdate(sql);
//                    }
//                    stmt.close();
//                } catch (Exception e) {
//                }
//System.out.println("\n");
//                try {
//                    stmt = (Statement)MySQLConnect.con.createStatement();
//                    for (int i = 0; i < 46; i++) {
//                        sql = "update usergroup set Stock" + i + " = '" + stock[i] + "' " +
//                                "Where UserName = '" + txt1.getText().trim() + "' ";
//                         
//                        System.out.println(sql);
//                        result = stmt.executeUpdate(sql);
//                    }
//                    stmt.close();
//                } catch (Exception e) {
//                }

            } else {
                sql = "insert into usergroup values ('" + txt1.getText().trim() + "','','','N',''," +
                        "'" + onAct[14] + "','" + onAct[15] + "','" + onAct[16] + "','" + onAct[17] + "','" + onAct[18] + "','" + onAct[19] + "','" + onAct[20] + "','" + onAct[21] + "'," +
                        "'" + onAct[22] + "','" + onAct[23] + "','" + onAct[24] + "','" + onAct[25] + "','" + onAct[26] + "','" + onAct[27] + "','" + onAct[28] + "','" + onAct[29] + "'," +
                        "'" + onAct[30] + "','" + onAct[31] + "','" + onAct[32] + "','" + onAct[33] + "','" + onAct[34] + "','" + onAct[35] + "','" + onAct[36] + "','" + onAct[37] + "'," +
                        "'" + onAct[38] + "','" + onAct[39] + "','" + onAct[40] + "','" + onAct[41] + "','" + onAct[42] + "','" + onAct[43] + "','" + onAct[44] + "','" + onAct[45] + "'," +
                        "'N','N','N','N'," +
                        "'" + onAct[0] + "','" + onAct[1] + "','" + onAct[2] + "','" + onAct[3] + "','" + onAct[4] + "','" + onAct[5] + "','" + onAct[6] + "','" + onAct[7] + "'," +
                        "'" + onAct[8] + "','" + onAct[9] + "','" + onAct[10] + "','" + onAct[11] + "','" + onAct[12] + "','" + onAct[13] + "','N','N'," +
                        "'" + onAct[46] + "','" + onAct[47] + "','" + onAct[48] + "','" + onAct[49] + "','" + onAct[50] + "','" + onAct[51] + "','" + onAct[52] + "','" + onAct[53] + "'," +
                        "'" + onAct[54] + "','" + onAct[55] + "','" + onAct[56] + "','" + onAct[57] + "','" + onAct[58] + "','" + onAct[59] + "','" + onAct[60] + "','" + onAct[61] + "'," +
                        "'" + onAct[62] + "','" + onAct[63] + "','" + onAct[64] + "','" + onAct[65] + "','" + onAct[66] + "','" + onAct[67] + "','" + onAct[68] + "','" + onAct[69] + "'," +
                        "'" + onAct[70] + "','" + onAct[71] + "','" + onAct[72] + "','" + onAct[73] + "','" + onAct[74] + "','" + onAct[75] + "','" + onAct[76] + "','" + onAct[77] + "'," +
                        "'" + onAct[78] + "','" + onAct[79] + "','" + onAct[80] + "','" + onAct[81] + "','" + onAct[82] + "','" + onAct[83] + "','" + onAct[84] + "','" + onAct[85] + "'," +
                        "'" + onAct[86] + "','" + onAct[87] + "','" + onAct[88] + "','" + onAct[89] + "','" + onAct[90] + "','" + onAct[91] + "');";
                System.out.println("sql :" + sql);
                stmt = MySQLConnect.con.createStatement();
                result = stmt.executeUpdate(sql);//0 45

            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }

    private void setOnAct() {
        int cnt = model2.getRowCount();
        for (int i = 0; i < cnt; i++) {
            onAct[i] = (String) model2.getValueAt(i, 2);
        }
    }

    private String cmdRemoveUserGroup() {
        if (!seekPosUser()) {//not use to remove

            Statement stmt = null;
            String value = txt1.getText().trim();
            String sql = "Delete From usergroup  Where UserName ='" + value + "'";
            int result = -1;
            try {
                stmt = (Statement) MySQLConnect.con.createStatement();
                result = stmt.executeUpdate(sql);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            if (result > 0) {
                txt1.setText("");
                cleartblMenu();
                loadGroupName();
                return "ลบข้อมูลกลุ่มผู้ใช้งาน " + value + " แล้ว";
            } else {
                return "เกิดข้อผิดพลาดไม่สามารถลบข้อมูลกลุ่มผู้ใช้งาน " + value + " ได้";
            }
        } else {//used

            return "มีผู้ใช้บางรายการอ้างถึงรหัสกลุ่มนี้ .. ไม่สามารถลบได้";
        }
    }//Select *From PosUser Where UserGroup = :UserGroup

    private boolean seekPosUser() {
        Statement stmt = null;
        ResultSet rs = null;//

        String sql = "Select * From posuser Where usergroup = '" + txt1.getText().trim() + "'";
        try {
            stmt = (Statement) MySQLConnect.con.createStatement();
            rs = stmt.executeQuery(sql);

            if (rs.next()) {
                rs.close();
                stmt.close();
                return true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
        return false;
    }
}
