/*
 * MainFrame.java
 *
 * Created on May 30, 2009, 8:32 PM
 */

package other;

import directory_utility.DirectoryUtility;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.NoRouteToHostException;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;

/**
 *
 * @author  root
 */
public class MainFrame_Beta1 extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame_Beta1() {
        try{
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        }catch(Exception e){
            e.printStackTrace();
        }
        initComponents();
        setLocationRelativeTo(this);
        pb.setMaximum(100);
        pb.setMinimum(0);
        pb.setStringPainted(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdConnectTest = new javax.swing.JButton();
        cmdDisconnectTest = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaArea = new javax.swing.JTextArea();
        cmdUp1 = new javax.swing.JButton();
        cmdUp2 = new javax.swing.JButton();
        cmdUp3 = new javax.swing.JButton();
        cmdUp4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        lb = new javax.swing.JLabel();
        pb = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        cmdDown1 = new javax.swing.JButton();
        cmdDown2 = new javax.swing.JButton();
        cmdDown3 = new javax.swing.JButton();
        cmdDown4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cmdCodeTest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FTP Beta 1");

        cmdConnectTest.setText("ติดต่อสำนักงานใหญ่");
        cmdConnectTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdConnectTestActionPerformed(evt);
            }
        });

        cmdDisconnectTest.setText("ยกเลิกการติดต่อ");
        cmdDisconnectTest.setEnabled(false);
        cmdDisconnectTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDisconnectTestActionPerformed(evt);
            }
        });

        txaArea.setColumns(20);
        txaArea.setRows(5);
        jScrollPane1.setViewportView(txaArea);

        cmdUp1.setText("1");
        cmdUp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp1ActionPerformed(evt);
            }
        });

        cmdUp2.setText("2");
        cmdUp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp2ActionPerformed(evt);
            }
        });

        cmdUp3.setText("3");
        cmdUp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp3ActionPerformed(evt);
            }
        });

        cmdUp4.setText("1+2+3");
        cmdUp4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp4ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblStatus.setText("status");

        lb.setText("0/0 Byte");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pb, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lblStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(lb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pb, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 15));
        jLabel3.setText("< Upload >");

        cmdDown1.setText("1");
        cmdDown1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown1ActionPerformed(evt);
            }
        });

        cmdDown2.setText("2");
        cmdDown2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown2ActionPerformed(evt);
            }
        });

        cmdDown3.setText("3");
        cmdDown3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown3ActionPerformed(evt);
            }
        });

        cmdDown4.setText("1+2+3");
        cmdDown4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown4ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 15));
        jLabel4.setText("< Download >");

        cmdCodeTest.setText("CodeTest");
        cmdCodeTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCodeTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(284, 284, 284)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdDown2, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addComponent(cmdDown1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addComponent(cmdDown3, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addComponent(cmdDown4, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdCodeTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 471, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(37, 37, 37))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmdUp4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdUp3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdUp1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                            .addComponent(cmdUp2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmdConnectTest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmdDisconnectTest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(23, 23, 23)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmdConnectTest)
                                .addComponent(cmdDisconnectTest))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdUp1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdUp2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdUp3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdUp4))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdDown1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDown2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDown3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDown4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4))
                    .addComponent(cmdCodeTest))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cmdConnectTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdConnectTestActionPerformed
    String server = "192.168.1.3";
    String user = "choonew";
    String pass = "";
    int port = 21;
    cmdConnectTest.setEnabled(false);
    if(connect(server,user,pass,port)){
            try {
                txaArea.append("Connect complete FTP Server at " + server + "(" + ftp.getSystemName() + ")" + "\n");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        cmdDisconnectTest.setEnabled(true);
    }else{
        txaArea.append("Can not connect FTP Server at " +server +"\n");
        cmdConnectTest.setEnabled(true);
    }
}//GEN-LAST:event_cmdConnectTestActionPerformed

private void cmdDisconnectTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDisconnectTestActionPerformed
    txaArea.append("Disconnect from FTP Server : " + "\n");
    
    if (ftp == null) {
        cmdConnectTest.setEnabled(true);
        cmdDisconnectTest.setEnabled(false);
        return;
    }
    
    disconnect(ftp);
    
    cmdConnectTest.setEnabled(true);
    cmdDisconnectTest.setEnabled(false);
}//GEN-LAST:event_cmdDisconnectTestActionPerformed

private void cmdUp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp1ActionPerformed
    Thread t = new Thread(new Runnable(){
          
        public void run(){
            up1();
        }
    });
    t.start();
}//GEN-LAST:event_cmdUp1ActionPerformed

private void cmdUp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp2ActionPerformed
    Thread t = new Thread(new Runnable(){
          
        public void run(){
            up2();
        }
    });
    t.start();
}//GEN-LAST:event_cmdUp2ActionPerformed

private void cmdUp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp3ActionPerformed
    Thread t = new Thread(new Runnable(){
          
        public void run(){
            up3();
        }
    });
    t.start();
}//GEN-LAST:event_cmdUp3ActionPerformed

private void cmdUp4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp4ActionPerformed
    Thread t = new Thread(new Runnable(){
          
        public void run(){
            up4();
        }
    });
    t.start();
}//GEN-LAST:event_cmdUp4ActionPerformed

private void cmdDown1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown1ActionPerformed
    Thread t = new Thread(new Runnable(){
          
        public void run(){
            down1();
        }
    });
    t.start();
}//GEN-LAST:event_cmdDown1ActionPerformed

private void cmdDown2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown2ActionPerformed
    Thread t = new Thread(new Runnable(){
          
        public void run(){
            down2();
        }
    });
    t.start();
}//GEN-LAST:event_cmdDown2ActionPerformed

private void cmdDown3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown3ActionPerformed
    Thread t = new Thread(new Runnable(){
          
        public void run(){
            down3();
        }
    });
    t.start();
}//GEN-LAST:event_cmdDown3ActionPerformed

private void cmdDown4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown4ActionPerformed
    Thread t = new Thread(new Runnable(){
          
        public void run(){
            down4();
        }
    });
    t.start();
}//GEN-LAST:event_cmdDown4ActionPerformed

private void cmdCodeTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCodeTestActionPerformed
    
    
}//GEN-LAST:event_cmdCodeTestActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame_Beta1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCodeTest;
    private javax.swing.JButton cmdConnectTest;
    private javax.swing.JButton cmdDisconnectTest;
    private javax.swing.JButton cmdDown1;
    private javax.swing.JButton cmdDown2;
    private javax.swing.JButton cmdDown3;
    private javax.swing.JButton cmdDown4;
    private javax.swing.JButton cmdUp1;
    private javax.swing.JButton cmdUp2;
    private javax.swing.JButton cmdUp3;
    private javax.swing.JButton cmdUp4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JProgressBar pb;
    private javax.swing.JTextArea txaArea;
    // End of variables declaration//GEN-END:variables

    int complete = 0;
    int incomplete = 0;

    boolean cmdUp4Act = false;
    
    void showComplete(){
        txaArea.append("Upload Complete = "+complete +"\n");
        txaArea.append("Upload incomplete = "+incomplete +"\n");
    }
    
    void up1(){
        complete = 0;
        incomplete = 0;
        
        String server = "192.168.1.3";
        String user = "choonew";
        String pass = "";
        int port = 21;
        String localFile = "/root/localFileFTP/1.mp3";
        String remoteFile = "/Choonew/1.mp3";
        
        File f = new File(localFile);
        if(!f.exists()){
            JOptionPane.showMessageDialog(this, "Can not File in your computer :" + f.getPath());
            return;
        }
        lblStatus.setText("Upload " + f.getName());
        
        if(connect(server,user,pass,port)){
            if(upload(localFile,remoteFile)){
                complete++;
                txaArea.append(f.getPath()+" :=> complete\n");
            }else{
                JOptionPane.showMessageDialog(this, "Can not upload server");
                incomplete++;
                txaArea.append(f.getPath()+" :=> incomplete\n");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Can not Connect server");
            incomplete++;
            txaArea.append(f.getPath()+" :=> incomplete\n");
        }
        disconnect(ftp);
        
        if(!cmdUp4Act)
            showComplete();
    }
    
    void up2(){
        complete = 0;
        incomplete = 0;
        
        String server = "192.168.1.3";
        String user = "choonew";
        String pass = "";
        int port = 21;
        String localFile = "/root/localFileFTP/2.DAT";
        String remoteFile = "/Choonew/2.DAT";
        
        File f = new File(localFile);
        if(!f.exists()){
            JOptionPane.showMessageDialog(this, "Can not File in your computer :" + f.getPath());
            return;
        }
        lblStatus.setText("Upload " + f.getName());
        
        if(connect(server,user,pass,port)){
            if(upload(localFile,remoteFile)){
                complete++;
                txaArea.append(f.getPath()+" :=> complete\n");
            }else{
                JOptionPane.showMessageDialog(this, "Can not upload server");
                incomplete++;
                txaArea.append(f.getPath()+" :=> incomplete\n");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Can not Connect server");     
            incomplete++;
            txaArea.append(f.getPath()+" :=> incomplete\n");
        }
        disconnect(ftp);
        
        if(!cmdUp4Act)
            showComplete();
    }
    
    void up3(){
        complete = 0;
        incomplete = 0;
        
        String server = "192.168.1.3";
        String user = "choonew";
        String pass = "";
        int port = 21;
        String localFile = "/root/localFileFTP/MEM_MASTER.zip";
        String remoteFile = "/Choonew/MEM_MASTER.zip";
        
        File f = new File(localFile);
        if(!f.exists()){
            JOptionPane.showMessageDialog(this, "Can not File in your computer :" + f.getPath());
            return;
        }
        lblStatus.setText("Upload " + f.getName());
        
        // upload 1 file/1 connect
        if(connect(server,user,pass,port)){
            if(upload(localFile,remoteFile)){
                complete++;
                txaArea.append(f.getPath()+" :=> complete\n");
            }else{
                JOptionPane.showMessageDialog(this, "Can not upload server");
                incomplete++;
                txaArea.append(f.getPath()+" :=> incomplete\n");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Can not Connect server");          
            incomplete++;
            txaArea.append(f.getPath()+" :=> incomplete\n");
        }
        disconnect(ftp);
        
        if(!cmdUp4Act)
            showComplete();
    }
    
    void up4(){
        
        cmdUp4Act = true;
        int completeTotal = 0;
        int incompleteTotal = 0;
        
        up1();
        completeTotal += complete;
        incompleteTotal += incomplete;
        up2();
        completeTotal += complete;
        incompleteTotal += incomplete;
        up3();
        completeTotal += complete;
        incompleteTotal += incomplete;
        
        txaArea.append("Upload Complete = "+completeTotal +"\n");
        txaArea.append("Upload incomplete = "+incompleteTotal +"\n");
        cmdUp4Act = false;
    }
    
    void down1(){
        complete = 0;
        incomplete = 0;
        
        String server = "192.168.1.3";
        String user = "choonew";
        String pass = "";
        int port = 21;
        String localFile = "/root/remoteFileFTP/1.mp3";
        String remoteFile = "/Choonew/1.mp3";
        
        lblStatus.setText("Download " + "1.mp3");

        if(connect(server,user,pass,port)){
            if(download(remoteFile,localFile)){
                complete++;
                txaArea.append(remoteFile+" :=> complete\n");
            }else{
                JOptionPane.showMessageDialog(this, "Can not upload server");
                incomplete++;
                txaArea.append(remoteFile+" :=> incomplete\n");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Can not Connect server");
            incomplete++;
            txaArea.append(remoteFile+" :=> incomplete\n");
        }
        disconnect(ftp);
        
        if(!cmdUp4Act)
            showComplete();
    }
    
    void down2(){
        complete = 0;
        incomplete = 0;
        
        String server = "192.168.1.3";
        String user = "choonew";
        String pass = "";
        int port = 21;
        String localFile = "/root/remoteFileFTP/2.DAT";
        String remoteFile = "/Choonew/2.DAT";
        
        lblStatus.setText("Download " + "2.DAT");
        
        if(connect(server,user,pass,port)){
            if(download(remoteFile,localFile)){
                complete++;
                txaArea.append(remoteFile+" :=> complete\n");
            }else{
                JOptionPane.showMessageDialog(this, "Can not upload server");
                incomplete++;
                txaArea.append(remoteFile+" :=> incomplete\n");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Can not Connect server");
            txaArea.append(remoteFile+" :=> incomplete\n");
            incomplete++;
        }
        disconnect(ftp);
        
        if(!cmdUp4Act)
            showComplete();
    }
    
    void down3(){
        complete = 0;
        incomplete = 0;
        
        String server = "192.168.1.3";
        String user = "choonew";
        String pass = "";
        int port = 21;
        String localFile = "/root/remoteFileFTP/MEM_MASTER.zip";
        String remoteFile = "/Choonew/MEM_MASTER.zip";
        
        lblStatus.setText("Download " + "MEM_MASTER.zip");
        
        // upload 1 file/1 connect
        if(connect(server,user,pass,port)){
            if(download(remoteFile,localFile)){
                complete++;
                txaArea.append(remoteFile+" :=> complete\n");
            }else{
                JOptionPane.showMessageDialog(this, "Can not upload server");
                incomplete++;
                txaArea.append(remoteFile+" :=> incomplete\n");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Can not Connect server");
            incomplete++;
            txaArea.append(remoteFile+" :=> incomplete\n");
        }
        disconnect(ftp);
        
        if(!cmdUp4Act)
            showComplete();
    }
    
    void down4(){
        
        cmdUp4Act = true;
        int completeTotal = 0;
        int incompleteTotal = 0;
        
        down1();
        completeTotal += complete;
        incompleteTotal += incomplete;
        down2();
        completeTotal += complete;
        incompleteTotal += incomplete;
        down3();
        completeTotal += complete;
        incompleteTotal += incomplete;
        
        txaArea.append("Download Complete = "+completeTotal +"\n");
        txaArea.append("Download incomplete = "+incompleteTotal +"\n");
        cmdUp4Act = false;
    }
    
///////////////////////////   FTP   ////////////////////////////////////////////
    
    FTPClient ftp;
     private boolean connect(String server, String user, String pass , int port){
        ftp = new FTPClient();
        ftp.addProtocolCommandListener(new PrintCommandListener(
                                           new PrintWriter(System.out)));

        ftp.setDefaultPort(port);
        // Sets the timeout in milliseconds to use when reading from the data connection.
        // 15 sec.
        ftp.setDataTimeout(1000*15);

        try{
            //JOptionPane.showMessageDialog(frame, "FTP server ทำการเชื่อมต่อ.\n");
            int reply;
            ftp.connect(server);
     
            reply = ftp.getReplyCode();
            
            if (!FTPReply.isPositiveCompletion(reply)){
                ftp.disconnect();
                // FTP server refused connection.
                JOptionPane.showMessageDialog(this, "FTP server ปฏิเสธการเชื่อมต่อ.\n");
                return false;
               
            }else{
                // FTP server agree connection.;            
            }
            
        }catch (NoRouteToHostException e){
            if (ftp.isConnected())
                try{ ftp.disconnect(); } catch (IOException f){}
            // FTP Server not found.
            JOptionPane.showMessageDialog(this, "ไม่พบ FTP Server : " + server);
            
            e.printStackTrace();
            return false;
        }catch (UnknownHostException e){
            if (ftp.isConnected())
                try{ ftp.disconnect(); } catch (IOException f){}
            // Unknow FTP Server.
            JOptionPane.showMessageDialog(this, "ไมรู้จัก FTP Server : " + server);
            
            e.printStackTrace();
            return false;
        }catch (IOException e){
            if (ftp.isConnected())
                try{ ftp.disconnect(); } catch (IOException f){}
            
            // Error IOException.
            JOptionPane.showMessageDialog(this, "เกิดปัญหาการเชื่อมต่อ กรุณาตรวจเช็ค! " +
                    "การเชื่อมต่ออินเตอร์เน็ต หรือ ระบบเน็ตเวิค ของท่าน");
            
            e.printStackTrace();
            return false;
        }

        try{
            // Connection with user and password...
            if (!ftp.login(user, pass)){

                ftp.logout();
                
                // Username or Password not correct!
                JOptionPane.showMessageDialog(this, "Username หรือ Password ไม่ถูกต้อง!");
                
                // reset values
                    ftp = null;
                    server = null;
                    user = null;
                    pass = null;
                return false;
            }else{
                // Complete connection.
                //JOptionPane.showMessageDialog(frame, "Complete connect FTP server that remote system is " + ftp.getSystemName());    
            }
 
        }catch(Exception e){
            // unknow Exception
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Exception error");
            return false;
        }
        // Complete connection.
        return true;
    }
     
     public void disconnect(FTPClient ftp) {
        if(ftp != null){
            try {
                ftp.logout(); 
                ftp.disconnect(); 
                ftp = null;
            } catch (Exception ex) { }
        }else{
            System.err.println("FTP NullPointerException.");
            //JOptionPane.showMessageDialog(this, "FTP NullPointerException");
        }
    }
     
     public boolean upload(String localFile, String remoteFile) {
        
        InputStream input = null;
        OutputStream output = null;
        boolean success = false;
        try{
            if (true)
                ftp.setFileType(FTP.BINARY_FILE_TYPE);

            // Use passive mode as default because most of us are
            // behind firewalls these days.
            ftp.enterLocalPassiveMode();
            //ftp.enterLocalActiveMode();
            
            // output is ftp server.
            // input is my computer.
            File f = new File(localFile);
            if(!f.exists()){
                JOptionPane.showMessageDialog(this, "Can not find in My computer : "+f.getPath());
                return false;
            }
            input = new FileInputStream(localFile);
            
            output = ftp.storeFileStream(remoteFile);

            if(output == null){
                JOptionPane.showMessageDialog(this, "Can not upload to FTP Server : "+remoteFile);
                return false;
            }
            
            byte[] buffer = new byte[1024];
            int len;

            f = new File(localFile);
            long max = f.length();
            long use = 0;

            while ((len = input.read(buffer)) != -1) {
                output.write(buffer, 0, len);
                output.flush();
                use += len;
                
                pb.setValue((int) ((use * 100) / max));
                lb.setText(use + "/" + max + " Byte");
            }
            
            pb.setValue(100);
            lb.setText(use + "/" + max + " Byte");

            // Complete upload file.
            success = true;
           
            if(input != null)
                try{ input.close(); }catch(Exception ex){ ex.printStackTrace(); }
            if(output != null)
                try{ output.close(); }catch(Exception ex){ ex.printStackTrace(); }
            
            // Complete upload method
            return success; 
            
        }catch(Exception e){
            // Have Error.
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "เกิดปัญหาการเชื่อมต่อ กรุณาตรวจเช็ค" +
                    "การเชื่อมต่ออินเตอร์เน็ต หรือ ระบบเน็ตเวิค ของท่าน");
            
            if(input != null)
                try{ input.close(); }catch(Exception ex){ ex.printStackTrace(); }
            if(output != null)
                try{ output.close(); }catch(Exception ex){ ex.printStackTrace(); }
            return false;
        }
    }
     
     public boolean download(String remoteFile, String localFile) {
        //JOptionPane.showMessageDialog(frame, "Download : " + remoteFile +" >>> " + localFile);
        
        OutputStream output = null; 
        InputStream input = null;
        boolean success = false;
        pb.setValue(0);
        try{
            
            long max = 0;
            FTPFile[] files = ftp.listFiles(remoteFile);
            System.out.println("Number of files in dir: " + files.length);

            for (int i = 0; i < files.length; i++) {
                System.out.println(files[i].getSize()/1024.0 + " KByte"); 
                max = files[i].getSize();
            }
            
            if (true)
                ftp.setFileType(FTP.BINARY_FILE_TYPE);

            // Use passive mode as default because most of us are
            // behind firewalls these days.
            //ftp.enterLocalPassiveMode();
            ftp.enterLocalActiveMode();
            
            DirectoryUtility du = new DirectoryUtility();
            File localF = du.getFileAndCreateDir(localFile);
            
            // output is my computer.
            // input is ftp server.
            //JOptionPane.showMessageDialog(frame, "Download updateProgressBa   r: " + (input != null));
            output = new FileOutputStream(localF);
            input = ftp.retrieveFileStream(remoteFile);
                
           
                
          //long max = 0;
            long use = 0;
            byte[] buffer = new byte[1024];
            int len;
            while ((len = input.read(buffer)) != -1) {
                output.write(buffer, 0, len);
                output.flush();

                use += len;

                pb.setValue((int) ((use * 100) / max));
                lb.setText(use + "/" + max + " Byte");

            }

            pb.setValue(100);
            lb.setText(use + "/" + max + " Byte");

            // Complete download.
            success = true;

            if(input != null)
                try{ input.close(); }catch(Exception ex){ ex.printStackTrace(); }
            if(output != null)
                try{ output.close(); }catch(Exception ex){ ex.printStackTrace(); }
            
            // Complete download method.            
            return success;

        }catch(Exception e){
            // Have Error.
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "เกิดปัญหาการเชื่อมต่อ กรุณาตรวจเช็ค" +
                    "การเชื่อมต่ออินเตอร์เน็ต หรือ ระบบเน็ตเวิค ของท่าน");
            
            if(input != null)
                try{ input.close(); }catch(Exception ex){ ex.printStackTrace(); }
            if(output != null)
                try{ output.close(); }catch(Exception ex){ ex.printStackTrace(); }
            return false;
        }
    }

     /*
    public static void getDataFiles(String server,
            String username,
            String password,
            String localFile,
            String remoteFile) {
        try {
            // Connect and logon to FTP Server
            FTPClient ftpa = new FTPClient();
            ftpa.connect(server);
            ftpa.login(username, password);
            System.out.println("Connected to " +
                    server + ".");
            System.out.print(ftpa.getReplyString());

            // List the files in the directory
            //ftpa.changeWorkingDirectory(folder);
            FTPFile[] files = ftpa.listFiles(remoteFile);
            System.out.println("Number of files in dir: " + files.length);

            for (int i = 0; i < files.length; i++) {
                System.out.println(files[i].getSize()/1024.0);  
            }
            // Logout from the FTP Server and disconnect
            ftpa.logout();
            ftpa.disconnect();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
      * */
      
}
