/*
 * UseFTPMainWindow.java
 *
 * Created on June 1, 2009, 10:34 PM
 */

package other;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.text.MaskFormatter;
import utilities.MySQLConnect;

/**
 *
 * @author  root
 */
public class FTPMainWindow extends javax.swing.JFrame {
    private boolean cmdSumAct = false;
    String BranId ;
    String BranType ;
    public boolean isConnection ;
    MySQLConnect db = new MySQLConnect() ;


    
    /** Creates new form UseFTPMainWindow */
    public FTPMainWindow() {
        try{
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        }catch(Exception e){
            e.printStackTrace();
        }
        initComponents();

        db.dbconnect() ;
        setLocationRelativeTo(this);
        
        setProgress();
        txtPane.setEditable(false);
        loadMainServer();
        txtpaneCon = new ComponentControl();
        txtpaneCon.setTextPane(txtPane);
        ftp = new FTPUtility();
        setDayInCbx();
        getVariable() ;
        cmdCancleAll.setVisible(false);
    }
    public void  getVariable() {
        try {
            Statement stmt = (Statement) MySQLConnect.con.createStatement();
            String SqlQuery = "select * from branch";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() != 0) {
                BranId = rec.getString("code");
                BranType = rec.getString("btype");
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SaveAndExit1 = new javax.swing.JPanel();
        cmdSystemSetup = new javax.swing.JButton();
        cmdConnectHeadOffice = new javax.swing.JButton();
        cmdDisconnectHeadOffice = new javax.swing.JButton();
        cmdExitMain = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbxServer = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPane = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        cmdUp5 = new javax.swing.JButton();
        cmdUp1 = new javax.swing.JButton();
        cmdUp2 = new javax.swing.JButton();
        cmdUp3 = new javax.swing.JButton();
        cmdUp4 = new javax.swing.JButton();
        txfSendStop = new javax.swing.JFormattedTextField();
        txfSendStart = new javax.swing.JFormattedTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        cmdDown6 = new javax.swing.JButton();
        cmdDown4 = new javax.swing.JButton();
        cmdDown3 = new javax.swing.JButton();
        cmdDown2 = new javax.swing.JButton();
        cmdDown1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cbGetStart = new javax.swing.JComboBox();
        cbGetStop = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmdDown5 = new javax.swing.JButton();
        cmdClearMemo = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        lb = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        pb = new javax.swing.JProgressBar();
        cmdCancleAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("โปรแกรมรับส่งข้อมูลผ่านระบบ (Use FTP Protocol) *Zip File Supported* SP-Version #SP01062009");
        setFont(new java.awt.Font("Norasi", 1, 14));

        SaveAndExit1.setBackground(java.awt.Color.orange);
        SaveAndExit1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 1, 2, 1, new java.awt.Color(0, 0, 0)));

        cmdSystemSetup.setBackground(java.awt.Color.orange);
        cmdSystemSetup.setFont(new java.awt.Font("Norasi", 1, 16));
        cmdSystemSetup.setText("System Setup");
        cmdSystemSetup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cmdSystemSetupMouseReleased(evt);
            }
        });

        cmdConnectHeadOffice.setBackground(java.awt.Color.orange);
        cmdConnectHeadOffice.setFont(new java.awt.Font("Norasi", 1, 16));
        cmdConnectHeadOffice.setText("ติดต่อสำนักงานใหญ่");
        cmdConnectHeadOffice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdConnectHeadOfficeActionPerformed(evt);
            }
        });

        cmdDisconnectHeadOffice.setBackground(java.awt.Color.orange);
        cmdDisconnectHeadOffice.setFont(new java.awt.Font("Norasi", 1, 16));
        cmdDisconnectHeadOffice.setText("ยกเลิกการติดต่อสำนักงานใหญ่");
        cmdDisconnectHeadOffice.setEnabled(false);
        cmdDisconnectHeadOffice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDisconnectHeadOfficeActionPerformed(evt);
            }
        });

        cmdExitMain.setBackground(java.awt.Color.orange);
        cmdExitMain.setFont(new java.awt.Font("Norasi", 1, 16));
        cmdExitMain.setText("ออก (Exit)");
        cmdExitMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitMainActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Norasi", 1, 16));
        jLabel1.setText("Server :");

        cbxServer.setBackground(new java.awt.Color(254, 254, 254));
        cbxServer.setFont(new java.awt.Font("Norasi", 0, 14));
        cbxServer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Local FTP Server", "Main FTP Server", "Secondary FTP Server" }));

        javax.swing.GroupLayout SaveAndExit1Layout = new javax.swing.GroupLayout(SaveAndExit1);
        SaveAndExit1.setLayout(SaveAndExit1Layout);
        SaveAndExit1Layout.setHorizontalGroup(
            SaveAndExit1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaveAndExit1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdSystemSetup, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(cbxServer, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(cmdConnectHeadOffice, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdDisconnectHeadOffice, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdExitMain, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        SaveAndExit1Layout.setVerticalGroup(
            SaveAndExit1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaveAndExit1Layout.createSequentialGroup()
                .addGroup(SaveAndExit1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdConnectHeadOffice, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(cbxServer, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(cmdSystemSetup, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(cmdDisconnectHeadOffice, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(cmdExitMain, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        txtPane.setBackground(new java.awt.Color(248, 248, 177));
        txtPane.setEditable(false);
        jScrollPane1.setViewportView(txtPane);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBackground(new java.awt.Color(253, 254, 210));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBackground(new java.awt.Color(210, 253, 112));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setFont(new java.awt.Font("Norasi", 1, 16));
        jLabel2.setForeground(new java.awt.Color(69, 1, 111));
        jLabel2.setText("ส่งข้อมูลไปสำนักงานใหญ่");
        jPanel3.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("Norasi", 1, 16));
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("(Send Data To Center)");
        jPanel3.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Norasi", 1, 16));
        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("กำหนดวันที่ของข้อมูลที่ต้องการส่ง");

        jLabel5.setFont(new java.awt.Font("Norasi", 1, 16));
        jLabel5.setText("ถึง");

        jPanel6.setBackground(new java.awt.Color(253, 254, 210));
        jPanel6.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(255, 0, 0)));
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        cmdUp5.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdUp5.setText("(5) ส่งข้อมูลทุกประเภท (1) + (2) + (3) ไปสำนักงานใหญ่     ");
        cmdUp5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp5ActionPerformed(evt);
            }
        });
        jPanel6.add(cmdUp5);

        cmdUp1.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdUp1.setText("(1) ส่งข้อมูลการขาย/ลูกหนี้ภายนอก/สมาชิก/Stock Movement/Gift Voucher/EJ");
        cmdUp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp1ActionPerformed(evt);
            }
        });

        cmdUp2.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdUp2.setText("(2) ส่งข้อมูลยอดสินค้าคงเหลือสิ้นเดือน / ยอดการโอนสินค้า");
        cmdUp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp2ActionPerformed(evt);
            }
        });

        cmdUp3.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdUp3.setText("(3) ส่งข้อมูลใบสั่งสินค้า");
        cmdUp3.setEnabled(false);
        cmdUp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp3ActionPerformed(evt);
            }
        });

        cmdUp4.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdUp4.setText("(4) อื่น ๆ");
        cmdUp4.setEnabled(false);
        cmdUp4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUp4ActionPerformed(evt);
            }
        });

        txfSendStop.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txfSendStop.setFont(new java.awt.Font("Norasi", 1, 14));

        txfSendStart.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txfSendStart.setFont(new java.awt.Font("Norasi", 1, 14));
        txfSendStart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfSendStartKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfSendStart, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfSendStop, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cmdUp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdUp2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdUp3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdUp4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(89, 89, 89))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(txfSendStop, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfSendStart, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(cmdUp1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(cmdUp2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(cmdUp3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(cmdUp4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(253, 254, 210));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel8.setBackground(new java.awt.Color(164, 254, 206));
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel6.setFont(new java.awt.Font("Norasi", 1, 16));
        jLabel6.setForeground(new java.awt.Color(69, 1, 111));
        jLabel6.setText("รับข้อมูลจากสำนักงานใหญ่");
        jPanel8.add(jLabel6);

        jLabel7.setFont(new java.awt.Font("Norasi", 1, 16));
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("(Receive Master File)");
        jPanel8.add(jLabel7);

        jPanel11.setBackground(new java.awt.Color(253, 254, 210));
        jPanel11.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(255, 0, 0)));
        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        cmdDown6.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdDown6.setText("(6) รับข้อมูลทุกประเภท (1) + (2) + (3) +(4)   จากสำนักงานใหญ่     ");
        cmdDown6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown6ActionPerformed(evt);
            }
        });
        jPanel11.add(cmdDown6);

        cmdDown4.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdDown4.setText("(4) รับข้อมูลใบรับสินค้า   จากสำนักงานใหญ่");
        cmdDown4.setEnabled(false);
        cmdDown4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown4ActionPerformed(evt);
            }
        });

        cmdDown3.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdDown3.setText("(3) รับข้อมูลบัตรของขวัญ   จากสำนักงานใหญ่");
        cmdDown3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown3ActionPerformed(evt);
            }
        });

        cmdDown2.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdDown2.setText("(2) รับข้อมูลสมาชิก   จากสำนักงานใหญ่");
        cmdDown2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown2ActionPerformed(evt);
            }
        });

        cmdDown1.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdDown1.setText("(1) รับข้อมูล Master File   จากสำนักงานใหญ่");
        cmdDown1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown1ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 15));
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("กำหนดวันที่ใบรับสินค้า");

        cbGetStart.setBackground(new java.awt.Color(254, 254, 254));
        cbGetStart.setEnabled(false);

        cbGetStop.setBackground(new java.awt.Color(254, 254, 254));
        cbGetStop.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Monospaced", 1, 14));
        jLabel9.setText("ถึง");

        cmdDown5.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdDown5.setText("(5) อื่น ๆ");
        cmdDown5.setEnabled(false);
        cmdDown5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDown5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbGetStart, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbGetStop, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cmdDown2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdDown1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                        .addComponent(cmdDown3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cmdDown4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdDown5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)))
                .addGap(89, 89, 89))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdDown1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(cmdDown2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(cmdDown3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cbGetStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(cbGetStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdDown4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(cmdDown5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        cmdClearMemo.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdClearMemo.setText("Clear Memo");
        cmdClearMemo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearMemoActionPerformed(evt);
            }
        });

        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, null, new java.awt.Color(1, 1, 1)));
        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lb.setText("0/0 Byte");
        jPanel12.add(lb);

        lblStatus.setForeground(new java.awt.Color(255, 0, 9));
        lblStatus.setText("lblStatus");
        jPanel12.add(lblStatus);

        jPanel13.setLayout(new java.awt.GridLayout(1, 0));

        cmdCancleAll.setFont(new java.awt.Font("Norasi", 0, 14));
        cmdCancleAll.setText("ยกเลิกการทำงาน");
        cmdCancleAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancleAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SaveAndExit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cmdCancleAll, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(cmdClearMemo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pb, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(SaveAndExit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmdCancleAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdClearMemo, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                        .addGap(6, 6, 6))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pb, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1024)/2, (screenSize.height-768)/2, 1024, 768);
    }// </editor-fold>//GEN-END:initComponents

private void cmdExitMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitMainActionPerformed
    int s = JOptionPane.showConfirmDialog(this, "คุณต้องการออกจากโปรแกรม?");
    if(s==JOptionPane.YES_OPTION)
        System.exit(0);
}//GEN-LAST:event_cmdExitMainActionPerformed

private void cmdConnectHeadOfficeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdConnectHeadOfficeActionPerformed
    loadConfFTPServer();
    
    String server = prop.getProperty("host1");
    String user = prop.getProperty("usersend1");
    String pass = prop.getProperty("passsend1");
    int port = Integer.parseInt(prop.getProperty("port1"));
            
    ftp.setProgress(lb, pb);
    cmdConnectHeadOffice.setEnabled(false);
    TextArea.append("\nกรุณารอสักครู่ระบบกำลังทำการติดต่อ FTP Server...\n");
    if (ftp.connect(server, user, pass, port)) {
        TextArea.append("การเชื่อมต่อสำเร็จ : "+server+"\n");
        cmdDisconnectHeadOffice.setEnabled(true);
    } else {
        cmdConnectHeadOffice.setEnabled(true);
        TextArea.append("การเชื่อมล้มเหลว : "+server+"\n");
    }
}//GEN-LAST:event_cmdConnectHeadOfficeActionPerformed

private void cmdDisconnectHeadOfficeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDisconnectHeadOfficeActionPerformed
    loadConfFTPServer();
    String server = prop.getProperty("host1");
    TextArea.append("ยกเลิกการเชื่อมต่อกับ FTP Server : "+server+"\n");
    //txaArea.append("Disconnect from FTP Server : " + "\n");
    ftp.disconnect();
    cmdConnectHeadOffice.setEnabled(true);
    cmdDisconnectHeadOffice.setEnabled(false);
}//GEN-LAST:event_cmdDisconnectHeadOfficeActionPerformed

private void cmdClearMemoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearMemoActionPerformed
    txtPane.setText("");
}//GEN-LAST:event_cmdClearMemoActionPerformed
    Thread up5Thread;
private void cmdUp5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp5ActionPerformed
    
    up5Thread = new Thread(new Runnable(){
          
        public void run(){
            cmdUp2.setEnabled(false);
            cmdUp1.setEnabled(false);
            cmdDown1.setEnabled(false);
            cmdDown2.setEnabled(false);
            cmdDown3.setEnabled(false);
            cmdDown6.setEnabled(false);
            loadConfFTPServer();
            up5();
            cmdUp2.setEnabled(true);
            cmdUp1.setEnabled(true);
            cmdDown1.setEnabled(true);
            cmdDown2.setEnabled(true);
            cmdDown3.setEnabled(true);
            cmdDown6.setEnabled(true);
        }
    });
    up5Thread.start();
}//GEN-LAST:event_cmdUp5ActionPerformed
    Thread Down6Thread;

public void cmdDown6Action(JTextArea TextArea, JLabel lb,
        JLabel lblStatus, JProgressBar pb){
    this.pb=pb;
    this.lb=lb;
    this.lblStatus=lblStatus;
    this.TextArea=TextArea;
    loadConfFTPServer();         
    down6();
}

public void CheckConnection(JTextArea TextArea) {
    this.TextArea=TextArea ;
    loadConfFTPServer();

    String server = prop.getProperty("host1");
    String user = prop.getProperty("usersend1");
    String pass = prop.getProperty("passsend1");
    int port = Integer.parseInt(prop.getProperty("port1"));

    ftp.setProgress(lb, pb);
    cmdConnectHeadOffice.setEnabled(false);
    TextArea.append("\nกรุณารอสักครู่ระบบกำลังทำการติดต่อ FTP Server...\n");
    if (ftp.connect(server, user, pass, port)) {
        TextArea.append("การเชื่อมต่อสำเร็จ : "+server+"\n");
        isConnection = true ;
        cmdDisconnectHeadOffice.setEnabled(true);
    } else {
        cmdConnectHeadOffice.setEnabled(true);
        isConnection = false ;
        TextArea.append("การเชื่อมล้มเหลว : "+server+"\n");
    }
}
private void cmdDown6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown6ActionPerformed
    
    Down6Thread = new Thread(new Runnable(){
          
        public void run(){
            cmdUp1.setEnabled(false);
            cmdUp2.setEnabled(false);
            cmdUp5.setEnabled(false);
            cmdDown2.setEnabled(false);
            cmdDown1.setEnabled(false);
            cmdDown3.setEnabled(false);
            loadConfFTPServer();
            down6();
            cmdUp1.setEnabled(true);
            cmdUp2.setEnabled(true);
            cmdUp5.setEnabled(true);
            cmdDown1.setEnabled(true);
            cmdDown3.setEnabled(true);
            cmdDown2.setEnabled(true);
        }
    });
    Down6Thread.start();
}//GEN-LAST:event_cmdDown6ActionPerformed

private void cmdCancleAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancleAllActionPerformed
    
    TextArea.append("\n!!!ยกเลิกการรับและส่งข้อมูลทุกประเภท!!!\n");
    //up1Thread.stop();
    up2Thread.stop();
    /*up3Thread.stop();
    up4Thread.stop();
    up5Thread.stop();
    Down1Thread.stop();
    Down2Thread.stop();
    Down3Thread.stop();
    Down4Thread.stop();
    Down5Thread.stop();
    Down6Thread.stop();
     * */
    lb.setText("");
    pb.setValue(0);
}//GEN-LAST:event_cmdCancleAllActionPerformed

private JTextArea TextArea = new JTextArea();

public void cmdUp1ActionPerformed(JTextArea TextArea, 
        String TDate1, String TDate2, JLabel lb,
        JLabel lblStatus, JProgressBar pb,
        JComboBox cbXserver){
    this.TextArea=TextArea;
    this.TDate1=TDate1;
    this.TDate2=TDate2;
    this.lb=lb;
    this.lblStatus=lblStatus;
    this.cbxServer = cbXserver;

    loadConfFTPServer();
    up1();
}

Thread up1Thread;
private void cmdUp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp1ActionPerformed
    loadConfFTPServer();
    up1Thread = new Thread(new Runnable() {

        public void run() {
            cmdUp2.setEnabled(false);
            cmdUp5.setEnabled(false);
            cmdDown1.setEnabled(false);
            cmdDown2.setEnabled(false);
            cmdDown3.setEnabled(false);
            cmdDown6.setEnabled(false);
            up1();
            cmdUp2.setEnabled(true);
            cmdUp5.setEnabled(true);
            cmdDown1.setEnabled(true);
            cmdDown2.setEnabled(true);
            cmdDown3.setEnabled(true);
            cmdDown6.setEnabled(true);
        }
    });
    up1Thread.start();
}//GEN-LAST:event_cmdUp1ActionPerformed
Thread up2Thread;

public void cmdUp2ActionPerformed(JLabel lb, JLabel lblStatus,
        JProgressBar pb, JTextArea TextArea, JComboBox cbXserver) {
    this.lb=lb;
    this.lblStatus=lblStatus;
    this.pb=pb;
    this.TextArea=TextArea;
    this.cbxServer = cbXserver;

    loadConfFTPServer();
    up2();
}
private void cmdUp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp2ActionPerformed
    loadConfFTPServer();
    //Thread t = new Thread(new Runnable(){
        up2Thread  = new Thread(new Runnable(){
        public void run(){
            cmdUp1.setEnabled(false);
            cmdUp5.setEnabled(false);
            cmdDown1.setEnabled(false);
            cmdDown2.setEnabled(false);
            cmdDown3.setEnabled(false);
            cmdDown6.setEnabled(false);
            loadConfFTPServer();
            up2();
            cmdUp1.setEnabled(true);
            cmdUp5.setEnabled(true);
            cmdDown1.setEnabled(true);
            cmdDown2.setEnabled(true);
            cmdDown3.setEnabled(true);
            cmdDown6.setEnabled(true);
        }
    });
    up2Thread.start();
}//GEN-LAST:event_cmdUp2ActionPerformed
    Thread up3Thread;
private void cmdUp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp3ActionPerformed
    
    up3Thread = new Thread(new Runnable(){
          
        public void run(){
            loadConfFTPServer();
            up3();
        }
    });
    up3Thread.start();
}//GEN-LAST:event_cmdUp3ActionPerformed
    Thread up4Thread;
private void cmdUp4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUp4ActionPerformed
    
    up4Thread = new Thread(new Runnable(){
          
        public void run(){
            loadConfFTPServer();
            up4();
        }
    });
    up4Thread.start();
}//GEN-LAST:event_cmdUp4ActionPerformed
    Thread Down1Thread;
private void cmdDown1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown1ActionPerformed
    loadConfFTPServer();
    Down1Thread = new Thread(new Runnable(){
          
        public void run(){
            cmdUp1.setEnabled(false);
            cmdUp2.setEnabled(false);
            cmdUp5.setEnabled(false);
            
            cmdDown2.setEnabled(false);
            cmdDown3.setEnabled(false);
            cmdDown6.setEnabled(false);
            down1();
            
            cmdUp1.setEnabled(true);
            cmdUp2.setEnabled(true);
            cmdUp5.setEnabled(true);
            cmdDown2.setEnabled(true);
            cmdDown3.setEnabled(true);
            cmdDown6.setEnabled(true);
        }
    });
    Down1Thread.start();
}//GEN-LAST:event_cmdDown1ActionPerformed
    Thread Down2Thread;
private void cmdDown2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown2ActionPerformed
    
    Down2Thread = new Thread(new Runnable(){
          
        public void run(){
            cmdUp1.setEnabled(false);
            cmdUp2.setEnabled(false);
            cmdUp5.setEnabled(false);
            cmdDown1.setEnabled(false);
            cmdDown3.setEnabled(false);
            cmdDown6.setEnabled(false);
            loadConfFTPServer();
            down2();
            cmdUp1.setEnabled(true);
            cmdUp2.setEnabled(true);
            cmdUp5.setEnabled(true);
            cmdDown1.setEnabled(true);
            cmdDown3.setEnabled(true);
            cmdDown6.setEnabled(true);
        }
    });
    Down2Thread.start();
}//GEN-LAST:event_cmdDown2ActionPerformed
    Thread Down3Thread;
private void cmdDown3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown3ActionPerformed
    
    Down3Thread = new Thread(new Runnable(){
          
        public void run(){
            cmdUp1.setEnabled(false);
            cmdUp2.setEnabled(false);
            cmdUp5.setEnabled(false);
            cmdDown2.setEnabled(false);
            cmdDown1.setEnabled(false);
            cmdDown6.setEnabled(false);
            loadConfFTPServer();
            down3();
            cmdUp1.setEnabled(true);
            cmdUp2.setEnabled(true);
            cmdUp5.setEnabled(true);
            cmdDown1.setEnabled(true);
            cmdDown2.setEnabled(true);
            cmdDown6.setEnabled(true);
        }
    });
    Down3Thread.start();
}//GEN-LAST:event_cmdDown3ActionPerformed
    Thread Down4Thread;
private void cmdDown4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown4ActionPerformed
   
    Down4Thread = new Thread(new Runnable(){
          
        public void run(){
            loadConfFTPServer();
            down4();
        }
    });
    Down4Thread.start();
}//GEN-LAST:event_cmdDown4ActionPerformed
    Thread Down5Thread;
private void cmdDown5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDown5ActionPerformed
    
    Down5Thread = new Thread(new Runnable(){
          
        public void run(){
            loadConfFTPServer();
            
        }
    });
    Down5Thread.start();
}//GEN-LAST:event_cmdDown5ActionPerformed

private void txfSendStartKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfSendStartKeyPressed
    if(evt.getKeyCode()==KeyEvent.VK_ENTER){
        txfSendStop.requestFocus();
    }
}//GEN-LAST:event_txfSendStartKeyPressed

private void cmdSystemSetupMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdSystemSetupMouseReleased
// TODO add your handling code here:
     //if (SetupFTPProperty.getSetupFTPProperty() == null) {
        GetPassword frm = new GetPassword(this, true);
        frm.setVisible(true);
        if (frm.ValidPassword) {
            SetupFTPProperty.createSetup();
            SetupFTPProperty.showSetupFTPProperty();
            setVisible(false);
        }
    //}
}//GEN-LAST:event_cmdSystemSetupMouseReleased

public String TDate1 = "";
public String TDate2 = "";

    private void up1(){
        complete = 0;
        incomplete = 0;
        
        if (TDate1.trim().equals("") || TDate2.trim().equals("")) {
            JOptionPane.showMessageDialog(this, "กรุณาระบุวันที่");
            txfSendStart.requestFocus();
            return;
        }
        
        TextArea.append("\n(1) ส่งข้อมูลการขาย/ลูกหนี้ภายนอก/สมาชิก/Stock Movement/Gift Voucher/EJ\n");
        TextArea.append("----------------------------\n");
        
        Calendar sendStart = convertToCalendar(TDate1);
        Calendar sendStop = convertToCalendar(TDate2);
        if (sendStart.compareTo(sendStop) > 0) {
            JOptionPane.showMessageDialog(this, "You date error");
            return;
        }

        String[] daiNames = getFileNames("dai", sendStart, sendStop);
        String[] acrNames = getFileNames("acr", sendStart, sendStop);
        String[] memNames = getFileNames("mem", sendStart, sendStop);
        String[] gifNames = getFileNames("gif", sendStart, sendStop);
        String[] EJNames = getEJFileNames(sendStart, sendStop);

        for (int i = 0; i < daiNames.length; i++) {
            uploadFilesUp1(daiNames[i], acrNames[i], memNames[i], gifNames[i], EJNames[i]);
            TextArea.append("\n");
        }
        
        if(!cmdSumAct){
            showComplete();
        }
    }

    private void up2() {
        complete = 0;
        incomplete = 0;
        
        TextArea.append("\n(2) ส่งข้อมูลยอดสินค้าคงเหลือสิ้นเดือน / ยอดการโอนสินค้า\n");
        TextArea.append("----------------------------\n");
        
        String server = null,user = null,pass = null;
        File f = null;
        int port = 21;
        
        String remot = null;
        
        //sendStock
        try{
            if(isCheckServer){
                server = prop.getProperty("host1");
                user = prop.getProperty("usersend1");
                pass = prop.getProperty("passsend1");
                port = Integer.parseInt(prop.getProperty("port1"));
                remot = prop.getProperty("bor1");
            } else {
                remot = "C:/spapplication/possaledata/" ;
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        
        //remote
        String _dir = prop.getProperty("end1");
        if (_dir.charAt(_dir.length() - 1) == '/') {
            _dir = _dir.substring(0, _dir.length() - 1);
        }
        
        DirectoryUtility du = new DirectoryUtility();
        
        Vector<File> locals = du.getAllFilesInDirectory(_dir);

        if (locals != null) {
            for (int i = 0; i < locals.size(); i++) {
                String remote = remot + locals.get(i).getName();  
                
                if (!checkData(server, user, port, locals.get(i).getPath(), remote)) {
                    TextArea.append(locals.get(i).getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ ftp_" + prop.getProperty("config") + ".ini\n");
                    incomplete++;
                } else if (!checkUseableFile(locals.get(i).getPath())) {
                    TextArea.append(locals.get(i).getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ว่ามีอยู่หรือไม่\n");
                    incomplete++;
                } else {
                    if(isCheckServer){
                        if (uploadFile(server, user, pass, port, locals.get(i).getPath(), remote)) {
                            TextArea.append(locals.get(i).getName() + " => สำเร็จ\n");
                            complete++;
                        } else {
                            TextArea.append(locals.get(i).getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                            incomplete++;
                        }
                    }else{
                        if (copyFile(server, user, pass, port, locals.get(i).getPath(), remote)) {
                            TextArea.append(locals.get(i).getName() + " => สำเร็จ\n");
                            //complete++;
                        } else {
                            TextArea.append(locals.get(i).getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                            //incomplete++;
                        }
                    }
                }
               
            }
        }else{
            JOptionPane.showMessageDialog(this, "No Have File.");
        }
        
        TextArea.append("\n");
        
        if(!cmdSumAct){
            showComplete();
        }
    }
    
     void up3(){

    }
    
    void up4(){
        
    }
    
    void up5(){
        cmdSumAct = true;
        int completeTotal = 0;
        int incompleteTotal = 0;
        
        up1();
        completeTotal += complete;
        incompleteTotal += incomplete;
        up2();
        completeTotal += complete;
        incompleteTotal += incomplete;
        
        showComplete(completeTotal,incompleteTotal);
        cmdSumAct = false;
    }
    
    void down1(){
        complete = 0;
        incomplete = 0;
        
        TextArea.append("\n(1) รับข้อมูล Master File   จากสำนักงานใหญ่");
        TextArea.append("\n----------------------------\n");

        String server = null,user = null,pass = null;
        File f = null;
        int port = 21;
        
        String remote = null , local = null;
        
        try{
            if(isCheckServer){
                server = prop.getProperty("host1");
                user = prop.getProperty("userreceive1");
                pass = prop.getProperty("passreceive1");
                port = Integer.parseInt(prop.getProperty("port1"));
            }
            local = prop.getProperty("receive1");
            remote = prop.getProperty("borreceive1");
        }catch(Exception ex){
            ex.printStackTrace();
        }
            
         //Bran-Type_Master       
        String fileName = BranType+"_masterl.zip";
        String bLocal = local + fileName;
        String bRemote = remote + fileName;
        if(isCheckServer){
            downFile(server, user, pass, port, bLocal, bRemote);
        }else{
            copyFile(server, user, pass, port, bLocal, bRemote);
        }
        //ARC_Master
        fileName = "ACR_MASTER.zip";
        bLocal = local + fileName;
        bRemote = remote + fileName;
        if(isCheckServer){
            downFile(server, user, pass, port, bLocal, bRemote);
        }else{
            copyFile(server, user, pass, port, bLocal, bRemote);
        }
        if(!cmdSumAct){
            showCompleteDownLoad();
        }
    }
    
    void down2(){
        complete = 0;
        incomplete = 0;
        
        TextArea.append("\n(2) รับข้อมูลสมาชิก   จากสำนักงานใหญ่");
        TextArea.append("\n----------------------------\n");

        String server = null,user = null,pass = null;
        File f = null;
        int port = 21;
        
        String remote = null , local = null;
        
        //MEM_Master
        try{
            if(isCheckServer){
                server = prop.getProperty("host2");
                user = prop.getProperty("userreceive2");
                pass = prop.getProperty("passreceive2");
                port = Integer.parseInt(prop.getProperty("port2"));
            }
            local = prop.getProperty("receive2");
            remote = prop.getProperty("borreceive1");
        }catch(Exception ex){
            ex.printStackTrace();
        }

        String fileName = "mem_masterl.zip";
        String bLocal = local + fileName;
        String bRemote = remote + fileName;
        if(isCheckServer){
            downFile(server, user, pass, port, bLocal, bRemote);
        }else{
            copyFile(server, user, pass, port, bLocal, bRemote);
        }
        if(!cmdSumAct){
            showCompleteDownLoad();
        }
    }
    
    void down3(){
        complete = 0;
        incomplete = 0;
        
        TextArea.append("\n(3) รับข้อมูลบัตรของขวัญ   จากสำนักงานใหญ่");
        TextArea.append("\n----------------------------\n");

        String server = null,user = null,pass = null;
        File f = null;
        int port = 21;
        
        String remote = null , local = null;
        
        //MEM_Master
        try{
            if(isCheckServer){
                server = prop.getProperty("host3");
                user = prop.getProperty("userreceive3");
                pass = prop.getProperty("passreceive3");
                port = Integer.parseInt(prop.getProperty("port3"));
            }
            local = prop.getProperty("receive3");
            remote = prop.getProperty("borreceive1");
        }catch(Exception ex){
            ex.printStackTrace();
        }
                
        String fileName = "GIFT_MASTER.zip";
        String bLocal = local + fileName;
        String bRemote = remote + fileName;
        if(isCheckServer){
            downFile(server, user, pass, port, bLocal, bRemote);
        }else{
            copyFile(server, user, pass, port, bLocal, bRemote);
        }
        if(!cmdSumAct){
            showCompleteDownLoad();
        }
    }
    
    void down4(){
        TextArea.append("\nปุ่มว่างเปล่า\n");
    }
    
    private void down6(){
        cmdSumAct = true;
        int completeTotal = 0;
        int incompleteTotal = 0;
        
        down1();
        completeTotal += complete;
        incompleteTotal += incomplete;
        down2();
        completeTotal += complete;
        incompleteTotal += incomplete;
        down3();
        completeTotal += complete;
        incompleteTotal += incomplete;
        
        showCompleteDownLoad(completeTotal,incompleteTotal);
        cmdSumAct = false;
    }
    
    public static void main(String args[]) {
        main = new FTPMainWindow();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                main.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SaveAndExit1;
    private javax.swing.JComboBox cbGetStart;
    private javax.swing.JComboBox cbGetStop;
    private javax.swing.JComboBox cbxServer;
    private javax.swing.JButton cmdCancleAll;
    private javax.swing.JButton cmdClearMemo;
    private javax.swing.JButton cmdConnectHeadOffice;
    private javax.swing.JButton cmdDisconnectHeadOffice;
    private javax.swing.JButton cmdDown1;
    private javax.swing.JButton cmdDown2;
    private javax.swing.JButton cmdDown3;
    private javax.swing.JButton cmdDown4;
    private javax.swing.JButton cmdDown5;
    private javax.swing.JButton cmdDown6;
    private javax.swing.JButton cmdExitMain;
    private javax.swing.JButton cmdSystemSetup;
    private javax.swing.JButton cmdUp1;
    private javax.swing.JButton cmdUp2;
    private javax.swing.JButton cmdUp3;
    private javax.swing.JButton cmdUp4;
    private javax.swing.JButton cmdUp5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JProgressBar pb;
    private javax.swing.JFormattedTextField txfSendStart;
    private javax.swing.JFormattedTextField txfSendStop;
    private javax.swing.JTextPane txtPane;
    // End of variables declaration//GEN-END:variables
    ComponentControl txtpaneCon;
    Properties prop;
    FTPUtility ftp;
    //String BranId = "549"; 
    int complete;
    int incomplete;
     MaskFormatter mask;
    
    private void setProgress() {
        pb.setMaximum(100);
        pb.setMinimum(0);
        pb.setStringPainted(true);
        lb.setText("");
        lblStatus.setText("");
        
    }
    
    private static FTPMainWindow main;
    
    public static FTPMainWindow getFTPMainWindow(){
        return main;
    }
    public static void createMain(){
        main = new FTPMainWindow();
    }
    public static void showFTPMainWindow(){
        main.setVisible(true);
    }
    
    private void loadMainServer(){
        prop = new Properties();
        try {
            FileInputStream input = new FileInputStream("C:/spapplication/dbconfig/ftp_main.ini");
            prop.load(input);
            input.close();             
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "File Not Found : "+"/spapplication/dbconfig/ftp_main.ini");
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error with file : "+"/spapplication/dbconfig/ftp_main.ini");
        }      
    }
    private void loadLocalServer(){
        prop = new Properties();
        try {
            FileInputStream input = new FileInputStream("C:/spapplication/dbconfig/ftp_local.ini");
            prop.load(input);
            input.close();             
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "File Not Found : "+"/spapplication/dbconfig/ftp_local.ini");
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error with file : "+"/spapplication/dbconfig/ftp_local.ini");
        }      
    }    
    private void loadSecondaryServer(){
        prop = new Properties();
        try {
            FileInputStream input = new FileInputStream("C:/spapplication/dbconfig/ftp_secondary.ini");
            prop.load(input);
            input.close();             
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "File Not Found : "+"/spapplication/dbconfig/ftp_main.ini");
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error with file : "+"/spapplication/dbconfig/ftp_main.ini");
        }      
    }
    
    private String getNumString(int num){
        if(num < 10 )
            return "0"+num;
        else
            return ""+num;
        
    }
    
    private int getNumInt(String num){
        //System.out.println(num);
        if( num.charAt(0) == '0' )
            return Integer.parseInt(num.substring(1));
        else
            return Integer.parseInt(num);
        
    }
    
    private Calendar convertToCalendar(String date){
        //JOptionPane.showMessageDialog(this, date);
        StringTokenizer st = new StringTokenizer(date,"/");
    
        int day = getNumInt(st.nextToken());
        int month = getNumInt(st.nextToken());
        int year = getNumInt(st.nextToken());

        return new GregorianCalendar(year,month-1,day);
    }
    
    private Vector getHaveFiles(String path,String fileName){
        return null;
    }
    
    private void showStrArray(String[] s){
        for(int i=0; i<s.length; i++)
            System.out.println(s[i]);
    
    }
   
    private String getFileName(String type , Calendar today){
        String file = BranId+"_"+type.toUpperCase()+"_"+today.get(Calendar.YEAR);
        file += getNumString(today.get(Calendar.MONTH)+1);
        file += getNumString(today.get(Calendar.DAY_OF_MONTH));
        file += ".zip";
        return file;
    }
    
    private String[] getFileNames(String type,Calendar start,Calendar stop){
        ElapsedTime et = new ElapsedTime();
        int dayNum = et.getDays((GregorianCalendar) start, (GregorianCalendar) stop) + 1;
        String[] names = new String[dayNum];

        Calendar tempStart = (Calendar) start.clone();

        for (int i = 0; i < names.length; i++) {
            //System.out.println(tempStart.getTime());
            names[i] = getFileName(type, tempStart);
            tempStart.add(Calendar.DAY_OF_MONTH, 1);
        }        
        return names;
    }
    
    private String getEJFileName(Calendar today){
        String file = BranId+today.get(Calendar.YEAR);
        file += getNumString(today.get(Calendar.MONTH)+1);
        file += getNumString(today.get(Calendar.DAY_OF_MONTH));
        file += ".zip";
        return file;
    }
    
    private String[] getEJFileNames(Calendar start,Calendar stop){
        ElapsedTime et = new ElapsedTime();

        int dayNum = et.getDays((GregorianCalendar) start, (GregorianCalendar) stop) + 1;
        String[] names = new String[dayNum];

        Calendar tempStart = (Calendar) start.clone();

        for (int i = 0; i < names.length; i++) {
            //System.out.println(tempStart.getTime());
            names[i] = getEJFileName(tempStart);
            tempStart.add(Calendar.DAY_OF_MONTH, 1);
        }        
        return names;
    }
    
    private void uploadFilesUp1(String dai,String act,String mem,String gif,String ej){
        String server = null,user = null,pass = null;
        String local = null,remote = null;
        File f = null;
        int port = 21;
        
        //dai
        try{
            if(isCheckServer){
                server = prop.getProperty("host1");
                user = prop.getProperty("usersend1");
                pass = prop.getProperty("passsend1");
                port = Integer.parseInt(prop.getProperty("port1"));
            }
            local = prop.getProperty("sale1")+dai;
            remote = prop.getProperty("bor1")+dai;

        }catch(Exception ex){
            ex.printStackTrace();
        }
        f = new File(local);
        
        if (!checkData(server, user, port, local, remote)) {
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ ftp_"+prop.getProperty("config")+".ini\n");
            incomplete++;
        }else if(!checkUseableFile(local)){
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ว่ามีอยู่หรือไม่\n");
            incomplete++;
        } else {
            if(isCheckServer){
                if (uploadFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    incomplete++;
                }
            }else{
                if (copyFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    //complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    //incomplete++;
                }
            }
        }
        
        //act
        try{
            if(isCheckServer){
                server = prop.getProperty("host1");
                user = prop.getProperty("usersend1");
                pass = prop.getProperty("passsend1");
                port = Integer.parseInt(prop.getProperty("port1"));
            }
            local = prop.getProperty("sale1")+act;
            remote = prop.getProperty("bor1")+act;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        f = new File(local);
        
        if (!checkData(server, user, port, local, remote)) {
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ ftp_"+prop.getProperty("config")+".ini\n");
            incomplete++;
        }else if(!checkUseableFile(local)){
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ว่ามีอยู่หรือไม่\n");
            incomplete++;
        } else {
            if(isCheckServer){
                if (uploadFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    incomplete++;
                }
            }else{
                if (copyFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    //complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    //incomplete++;
                }
            }
        }
        
        //mem
        try{
            if(isCheckServer){
                server = prop.getProperty("host2");
                user = prop.getProperty("usersend2");
                pass = prop.getProperty("passsend2");
                port = Integer.parseInt(prop.getProperty("port2"));
            }
            local = prop.getProperty("sale1")+mem;
            remote = prop.getProperty("bor1")+mem;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        f = new File(local);
        
        if (!checkData(server, user, port, local, remote)) {
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ ftp_"+prop.getProperty("config")+".ini\n");
            incomplete++;
        }else if(!checkUseableFile(local)){
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ว่ามีอยู่หรือไม่\n");
            incomplete++;
        } else {
            if(isCheckServer){
                if (uploadFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    incomplete++;
                }
            }else{
                if (copyFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    //complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    //incomplete++;
                }
            }
        }
        
        //gif
        try{
            if(isCheckServer){
                server = prop.getProperty("host3");
                user = prop.getProperty("usersend3");
                pass = prop.getProperty("passsend3");
                port = Integer.parseInt(prop.getProperty("port3"));
            }
            local = prop.getProperty("sale1")+gif;
            remote = prop.getProperty("bor1")+gif;
            //remote = "/Choonew/"+gif;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        f = new File(local);
        
        if (!checkData(server, user, port, local, remote)) {
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ ftp_"+prop.getProperty("config")+".ini\n");
            incomplete++;
        }else if(!checkUseableFile(local)){
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ว่ามีอยู่หรือไม่\n");
            incomplete++;
        } else {
            if(isCheckServer){
                if (uploadFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    incomplete++;
                }
            }else{
                if (copyFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    //complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    //incomplete++;
                }
            }
        }
        
        //ej
        try{
            if(isCheckServer){
                server = prop.getProperty("host1");
                user = prop.getProperty("usersend1");
                pass = prop.getProperty("passsend1");
                port = Integer.parseInt(prop.getProperty("port1"));
            }
            local = prop.getProperty("sale1")+ej;
            remote = prop.getProperty("ej1")+ej;
            //remote = "/Choonew/"+ej;
        }catch(Exception ex){
            ex.printStackTrace();
        }
        f = new File(local);
        
        if (!checkData(server, user, port, local, remote)) {
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ ftp_"+prop.getProperty("config")+".ini\n");
            incomplete++;
        }else if(!checkUseableFile(local)){
            TextArea.append(f.getName() + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ว่ามีอยู่หรือไม่\n");
            incomplete++;
        } else {
            if(isCheckServer){
                if (uploadFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    incomplete++;
                }
            }else{
                if (copyFile(server, user, pass, port, local, remote)) {
                    TextArea.append(f.getName() + " => สำเร็จ\n");
                    //complete++;
                } else {
                    TextArea.append(f.getName() + " => ไม่สำเร็จ upload ล้มเหลว\n");
                    //incomplete++;
                }
            }
        }
        
    }    
    
    private boolean uploadFile(String ftpServer,String user,String password,
            int port,String source,String fileName){
        boolean success = false;
        
        FTPUtility ftp2 = new FTPUtility();
        ftp2.setProgress(lb, pb);

        File f = new File(source);
        lblStatus.setText("Upload " + f.getName());

        if(ftp2.connect(ftpServer,user,password,port)){
            try {
                //f.upload("122.155.1.203", "t999", "bor_ftp", "54520100716.zip",
                //new File("/spapplication/archive/54520100716.zip"));
                if (ftp2.upload(ftpServer, user, password, fileName, new File(source))) {
                    //check exist file
//                success = ftp2.checkFileExists_(server,user,pass,port,remote);
                    success = true;
                } else {
                    //JOptionPane.showMessageDialog(this, "Can not upload server");
                    success = false;
                }
            } catch (MalformedURLException ex) {
                Logger.getLogger(FTPMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FTPMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            //JOptionPane.showMessageDialog(this, "Can not Connect server");     
            success = false;
        }
        ftp2.disconnect();
        return success;
    }
    public boolean copyFile(String server,String user,String pass,int port,String srFile,String dtFile) {
        try {
            File f1 = new File(srFile);
            File f2 = new File(dtFile);
            InputStream in = new FileInputStream(f1);
            OutputStream out = new FileOutputStream(f2);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            complete++;
            in.close();
            out.close();
            System.out.println("File copied.");
            return true;
        } catch (FileNotFoundException ex) {
            incomplete++;
            System.out.println(ex.getMessage() + " in the specified directory.");
            return false;
        } catch (IOException e) {
            incomplete++;
            System.out.println(e.getMessage());
            return false;
        }
    }
    private boolean download(String ftpServer,String user,String password,int port,
            String source, String fileName){
        boolean success = false;
        
        FTPUtility_bak ftp3 = new FTPUtility_bak();
        ftp3.setProgress(lb, pb);
    
        String name = null;
        StringTokenizer st = new StringTokenizer(source,"/");
        for(int i=0; i<st.countTokens(); i++){
            if(i==st.countTokens()-1)
                name = st.nextToken();
            else
                st.nextToken();
        }
        
        lblStatus.setText("Download " + name);
        
        if(ftp3.connect(ftpServer,user,password,port)){
            try {
                if (ftp3.download1(fileName, source)) {
                    success = true;
                } else {
                    //JOptionPane.showMessageDialog(this, "Can not upload server");
                    success = false;
                }
            }catch (Exception ex) {
                Logger.getLogger(FTPMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            //JOptionPane.showMessageDialog(this, "Can not Connect server");     
            success = false;
        }
        ftp3.disconnect();
        return success;
    }
    
    private void downFile(String server,String user,String pass,int port,String local,String remote){
        if (!checkData(server, user, port, local, remote)) {
            TextArea.append(local + " => ไม่สำเร็จ ตรวจสอบ ไฟล์ ftp_" + prop.getProperty("config") + ".ini\n");
            incomplete++;
        } else {
            if (download(server, user, pass, port, local, remote)) {
                TextArea.append(local + " => สำเร็จ\n");
                complete++;
            } else {
                TextArea.append(local + " => ไม่สำเร็จ download ล้มเหลว\n");
                incomplete++;
            }
        }
    }
    
    private boolean checkData(String server, String user, int port, String local, String remote) {
        if (isCheckServer) {
            if (server == null || user == null || local == null || remote == null) {
                JOptionPane.showMessageDialog(this, "Please check data in ftp"+prop.getProperty("config")+".ini.");
                return false;
            } else {
                return true;
            }
        } else {
            return true ;
        }
    }
    
    private boolean checkUseableFile(String local) {
        File file = new File(local);
        if (file.exists()) {
            if (file.isFile()) {
                if (file.canRead()) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    
    private void showComplete(){
        TextArea.append("Upload สำเร็จ := ");
        TextArea.append(complete + "\n");
        TextArea.append("Upload ไม่สำเร็จ := ");
        TextArea.append(incomplete + "\n");
    }
    private void showComplete(int complete,int incomplete){
        TextArea.append("Upload สำเร็จ := ");
        TextArea.append(complete + "\n");
        TextArea.append("Upload ไม่สำเร็จ := ");
        TextArea.append(incomplete + "\n");
    }
    
    private void showCompleteDownLoad(){
        TextArea.append("Download สำเร็จ := ");
        TextArea.append(complete + "\n");
        TextArea.append("Download ไม่สำเร็จ := ");
        TextArea.append(incomplete + "\n");
    }
    private void showCompleteDownLoad(int complete,int incomplete){
        TextArea.append("Download สำเร็จ := ");
        TextArea.append(complete + "\n");
        TextArea.append("Download ไม่สำเร็จ := ");
        TextArea.append(incomplete + "\n");
    }
    private boolean isCheckServer = false;
    private void loadConfFTPServer(){
        if(((String)cbxServer.getSelectedItem()).equals("Local FTP Server")){
            isCheckServer = false;
            loadLocalServer();
        }else if(((String)cbxServer.getSelectedItem()).equals("Main FTP Server")){
            isCheckServer = true;
            loadMainServer();
        }else{
            isCheckServer = true;
            loadSecondaryServer();
        }
        System.out.println("LoadConfFTPServer");
    }
    
    void setDayInCbx(){
        Calendar today = Calendar.getInstance();
        String day = getNumString(today.get(Calendar.DAY_OF_MONTH));
        String month = getNumString(today.get(Calendar.MONTH)+1);
        String year = getNumString(today.get(Calendar.YEAR));
        
        String date = day+"/"+month+"/"+year;
        
        //txfSendStart.setText(date);
        //txfSendStop.setText(date);
        cbGetStart.insertItemAt(date, 0);
        cbGetStop.insertItemAt(date, 0);

    }
    
    private void setDisButton() {
        //cmdCancleAll.setEnabled(false);
        cmdClearMemo.setEnabled(false);
        cmdConnectHeadOffice.setEnabled(false);
        cmdDisconnectHeadOffice.setEnabled(false);
        cmdDown1.setEnabled(false);
        cmdDown2.setEnabled(false);
        cmdDown3.setEnabled(false);
        //cmdDown4.setEnabled(false);
        //cmdDown5.setEnabled(false);
        cmdDown6.setEnabled(false);
        cmdExitMain.setEnabled(false);
        cmdSystemSetup.setEnabled(false);
        cmdUp1.setEnabled(false);
        cmdUp2.setEnabled(false);
        //cmdUp3.setEnabled(false);
        //cmdUp4.setEnabled(false);
        cmdUp5.setEnabled(false);
    }
    private void setEnaButton() {
        //cmdCancleAll.setEnabled(true);
        cmdClearMemo.setEnabled(true);
        cmdConnectHeadOffice.setEnabled(true);
        cmdDisconnectHeadOffice.setEnabled(true);
        cmdDown1.setEnabled(true);
        cmdDown2.setEnabled(true);
        cmdDown3.setEnabled(true);
        //cmdDown4.setEnabled(true);
        //cmdDown5.setEnabled(true);
        cmdDown6.setEnabled(true);
        cmdExitMain.setEnabled(true);
        cmdSystemSetup.setEnabled(true);
        cmdUp1.setEnabled(true);
        cmdUp2.setEnabled(true);
        //cmdUp3.setEnabled(true);
        //cmdUp4.setEnabled(true);
        cmdUp5.setEnabled(true);
    }
   
}
